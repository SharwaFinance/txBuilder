{
  "address": "0xb94fe302bF6B707027706996887299120449B6ec",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxySeller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_hegicErc721",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        }
      ],
      "name": "OpenPositionByHegic",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "calculateAmount",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "name": "decodeFromHegic",
      "outputs": [
        {
          "internalType": "contract IHegicStrategy",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalCost",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "additional",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHegicStrategy",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalCost",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "additional",
          "type": "bytes[]"
        }
      ],
      "name": "encodeFromHegic",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hegicErc721",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "parametersArray",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "processTx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxySeller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referrer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newReferrer",
          "type": "address"
        }
      ],
      "name": "setReferrer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc04c8550b90c9a5ca0ca7abab1bf04d32202f0ef6ec0df979e2291a1b54afb5f",
  "receipt": {
    "to": null,
    "from": "0x8B57f3a9bDf2cfdBF9B2627ff8bEa86fB5641a50",
    "contractAddress": "0xb94fe302bF6B707027706996887299120449B6ec",
    "transactionIndex": 2,
    "gasUsed": "8290474",
    "logsBloom": "0x
    "blockHash": "0x6dc6c3e66d66de5a5267545fb31e959eb0971be5b34c44ccfc5273c0423798ed",
    "transactionHash": "0xc04c8550b90c9a5ca0ca7abab1bf04d32202f0ef6ec0df979e2291a1b54afb5f",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 164574214,
        "transactionHash": "0xc04c8550b90c9a5ca0ca7abab1bf04d32202f0ef6ec0df979e2291a1b54afb5f",
        "address": "0xb94fe302bF6B707027706996887299120449B6ec",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b57f3a9bdf2cfdbf9b2627ff8bea86fb5641a50"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6dc6c3e66d66de5a5267545fb31e959eb0971be5b34c44ccfc5273c0423798ed"
      }
    ],
    "blockNumber": 164574214,
    "cumulativeGasUsed": "9012095",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7740FC99bcaE3763a5641e450357a94936eaF380",
    "0x5Fe380D68fEe022d8acd42dc4D36FbfB249a76d5",
    "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
    "0x683ad8b899cd14d8e077c9a623e8b3fed65a8c09"
  ],
  "numDeployments": 1,
  "solcInputHash": "82e65d397ad98f35442f9bc6e2462d36",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxySeller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hegicErc721\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"name\":\"OpenPositionByHegic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"calculateAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"name\":\"decodeFromHegic\",\"outputs\":[{\"internalType\":\"contract IHegicStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalCost\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"additional\",\"type\":\"bytes[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHegicStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalCost\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"additional\",\"type\":\"bytes[]\"}],\"name\":\"encodeFromHegic\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hegicErc721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"parametersArray\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"processTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxySeller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReferrer\",\"type\":\"address\"}],\"name\":\"setReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0nika0\",\"events\":{\"OpenPositionByHegic(uint256,uint256,address,address,uint256,uint256,uint256)\":{\"details\":\"This event is triggered when a user successfully opens a Hegic option position using this contract.\",\"params\":{\"amount\":\"The amount of the option that was purchased.\",\"buildID\":\"The unique identifier for the option position build.\",\"holder\":\"The address of the user who opened the option position.\",\"period\":\"The duration of the option period in seconds.\",\"premium\":\"The premium paid for the option.\",\"strategy\":\"The address of the Hegic option strategy contract used for the position.\",\"tokenID\":\"The identifier of the newly created Hegic option token.\"}}},\"kind\":\"dev\",\"methods\":{\"allApprove()\":{\"details\":\"See {ITxBuilderOpenHegic-allApprove}.\"},\"calculateAmount(bytes)\":{\"details\":\"This public view function calculates the amount of a token based on a set of input parameters.  It decodes the parameters, retrieves the necessary information from a Hegic strategy,  calculates the premium amount from positive PNL (Profit and Loss),  and ensures it does not exceed the maximum total cost.\",\"params\":{\"parameters\":\"The encoded parameters for the calculation.\"},\"returns\":{\"amount\":\"The calculated amount of the token.\",\"token\":\"The address of the token to be calculated.\"}},\"decodeFromHegic(bytes)\":{\"details\":\"See {ITxBuilderOpenHegic-decodeFromHegic}.\"},\"encodeFromHegic(address,uint256,uint256,uint256,bytes[])\":{\"details\":\"See {ITxBuilderOpenHegic-encodeFromHegic}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"processTx(bytes,uint256,address)\":{\"details\":\"See {IBaseTxBuilderOpen-processTx}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setReferrer(address)\":{\"details\":\"See {ITxBuilderOpenHegic-setReferrer}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Transaction Builder for Opening Hegic Option Positions\",\"version\":1},\"userdoc\":{\"events\":{\"OpenPositionByHegic(uint256,uint256,address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when a Hegic option position is opened.\"}},\"kind\":\"user\",\"methods\":{\"calculateAmount(bytes)\":{\"notice\":\"Calculate the amount of a token based on provided parameters.\"}},\"notice\":\"This contract facilitates the opening of Hegic option positions using predefined parameters.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/hegic/TxBuilderOpenHegic.sol\":\"TxBuilderOpenHegic\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BaseTxBuilderOpen.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IBaseTxBuilderOpen} from \\\"./IBaseTxBuilderOpen.sol\\\";\\n\\n/**\\n * @title BaseTxBuilderOpen\\n * @author 0nika0\\n * @notice An abstract base contract for building and processing option transactions.\\n * @dev This contract provides the foundational structure for creating and processing option transactions. \\n * It includes functions to handle transaction processing and token amount calculation.\\n */\\nabstract contract BaseTxBuilderOpen is Ownable, IBaseTxBuilderOpen {\\n\\n    // PUBLIC FUNCTONS //\\n\\n    /**\\n     * @dev See {IBaseTxBuilderOpen-calculateAmount}.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) public view virtual returns (\\n        address token,\\n        uint256 amount\\n    ) {}\\n\\n    // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @dev See {IBaseTxBuilderOpen-processTx}.\\n     */\\n    function processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) external {\\n        _processTx(parametersArray, buildID, user);\\n    }\\n\\n    function onERC721Received(\\n        address, \\n        address, \\n        uint256, \\n        bytes calldata\\n    ) external returns(bytes4) {\\n        return bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"));\\n    } \\n\\n    // INTERNAL FUNCTIONS //\\n\\n    /**\\n     * @notice Internal function to process a transaction for opening an option position.\\n     * @dev This internal function processes a transaction for opening an option position based on the provided parameters.\\n     * @param parametersArray The encoded parameters for opening the option position.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param user The address of the user who is opening the option position.\\n     */\\n    function _processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0e2cc6f014638b522e38c7f8856199cde84665331d18a9947790b6ce6fb09313\",\"license\":\"GPL-3.0-or-later\"},\"contracts/IBaseTxBuilderOpen.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\n\\ninterface IBaseTxBuilderOpen {\\n    // PUBLIC FUNCTONS //\\n\\n    /**\\n     * @notice Calculate the amount of a token based on provided parameters.\\n     * @dev This function calculates the amount of a token based on a set of input parameters.\\n     * @param parameters The encoded parameters for the calculation.\\n     * @return token The address of the token to be calculated.\\n     * @return amount The calculated amount of the token.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) external view returns (\\n        address token,\\n        uint256 amount\\n    ); \\n\\n     // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @notice Process a transaction for opening an option position.\\n     * @dev This function processes a transaction for opening an option position based on the provided parameters.\\n     * @param parametersArray The encoded parameters for opening the option position.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param user The address of the user who is opening the option position.\\n     */\\n    function processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) external;\\n\\n\\n\\n}\\n\",\"keccak256\":\"0x73b18ed44e66dd7dfe5d1b58e946c8faf17727fcef6f5e389c130a80933369b5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/hegic/IHegicStrategy.sol\":{\"content\":\"pragma solidity ^0.8.3;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2022 Hegic Protocol\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\ninterface IHegicStrategy {\\n    event SetLimit(uint256 limit);\\n\\n    event Acquired(\\n        uint256 indexed id,\\n        StrategyData data,\\n        uint256 negativepnl,\\n        uint256 positivepnl,\\n        uint256 period,\\n        bytes[] additional\\n    );\\n\\n    struct StrategyData {\\n        uint128 amount;\\n        uint128 strike;\\n    }\\n\\n    function strategyData(uint256 strategyID)\\n        external\\n        view\\n        returns (uint128 amount, uint128 strike);\\n\\n    function getLockedByStrategy() external view returns (uint256 amount);\\n\\n    function lockedLimit() external view returns (uint256 value);\\n\\n    function isPayoffAvailable(\\n        uint256 optID,\\n        address caller,\\n        address recipient\\n    ) external view returns (bool);\\n\\n    function getAvailableContracts(uint32 period, bytes[] calldata additional)\\n        external\\n        view\\n        returns (uint256 available);\\n\\n    function payOffAmount(uint256 optionID)\\n        external\\n        view\\n        returns (uint256 profit);\\n\\n    function calculateNegativepnlAndPositivepnl(\\n        uint256 amount,\\n        uint256 period,\\n        bytes[] calldata\\n    ) external view returns (uint128 negativepnl, uint128 positivepnl);\\n\\n    function create(\\n        uint256 id,\\n        address holder,\\n        uint256 amount,\\n        uint256 period,\\n        bytes[] calldata\\n    )\\n        external\\n        returns (\\n            uint32 expiration,\\n            uint256 positivePNL,\\n            uint256 negativePNL\\n        );\\n\\n    function connect() external;\\n\\n    function positionExpiration(uint256)\\n        external\\n        view\\n        returns (uint32 timestamp);\\n}\\n\",\"keccak256\":\"0x76560ef25ec8bcf9dc2170fcd555fbc42534b9de0b0b680afe49a4da62f0350c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/hegic/IPositionsManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IPositionsManager is IERC721 {\\n    function nextTokenId() external view returns (uint256);\\n}\",\"keccak256\":\"0x3bdebb5af5fc6a8d62a776f45654e2100a8d16cfb937505a5ecdad4af384de51\",\"license\":\"GPL-3.0-or-later\"},\"contracts/hegic/IProxySeller.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {IHegicStrategy} from \\\"./IHegicStrategy.sol\\\";\\n\\ninterface IProxySeller {\\n    function buyWithReferal(\\n        IHegicStrategy strategy,\\n        uint256 amount,\\n        uint256 period,\\n        bytes[] calldata additional,\\n        address referrer\\n    )  external;\\n}\\n\",\"keccak256\":\"0x1f0af9bf93672bec479239aedb3ccdf2d8aef61d8b1eb3d99b0b24d27375a853\",\"license\":\"GPL-3.0-or-later\"},\"contracts/hegic/ITxBuilderOpenHegic.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {IHegicStrategy} from \\\"./IHegicStrategy.sol\\\";\\n\\ninterface ITxBuilderOpenHegic {\\n\\n    // OWNER FUNCTIONS //\\n\\n    /**\\n     * @notice Set a new referrer address.\\n     * @dev This external function allows the owner to update the referrer address associated with the contract.\\n     * @param newReferrer The new address to set as the referrer.\\n     */\\n    function setReferrer(address newReferrer) external;\\n\\n    // EXTERNAL FUNCTIONS //  \\n\\n    /**\\n     * @notice Grants an unlimited approval of USDC tokens to the proxy seller contract.\\n     * @dev This external function approves the proxy seller contract to spend an unlimited amount of USDC tokens on behalf of the calling user. \\n     * It sets the approval amount to the maximum possible value, allowing the proxy seller to interact with USDC tokens without needing further approvals.\\n     */\\n    function allApprove() external;\\n\\n    // PURE FUNCTIONS //\\n\\n    /**\\n     * @notice Encodes parameters for interacting with a Hegic option strategy.\\n     * @dev This external function encodes various parameters, including the strategy contract, \\n     * option amount, option period, maximum total cost, and additional data, \\n     * into a single byte array for interactions with a Hegic option strategy.\\n     * @param strategy The address of the Hegic option strategy contract.\\n     * @param amount The amount of the option to be purchased.\\n     * @param period The duration of the option period in seconds.\\n     * @param maxTotalCost The maximum total cost allowed for the option purchase.\\n     * @param additional Additional data required for the strategy, encoded as bytes array.\\n     * @return paramData The encoded parameters as a bytes array.\\n     */\\n    function encodeFromHegic(\\n        IHegicStrategy strategy,\\n        uint256 amount,\\n        uint256 period,\\n        uint256 maxTotalCost,\\n        bytes[] memory additional\\n    ) external pure returns (bytes memory paramData);\\n\\n    /**\\n     * @notice Decodes parameters from an encoded byte array.\\n     * @dev This public function decodes an encoded byte array containing parameters related to a Hegic option strategy. \\n     * It extracts the strategy contract address, option amount, option period, maximum total cost, and additional data.\\n     * @param paramData The encoded parameters as a bytes array.\\n     * @return strategy The address of the Hegic option strategy contract.\\n     * @return amount The amount of the option.\\n     * @return period The duration of the option period in seconds.\\n     * @return maxTotalCost The maximum total cost allowed for the option purchase.\\n     * @return additional Additional data required for the strategy, decoded as bytes array.\\n     */\\n    function decodeFromHegic(\\n        bytes memory paramData\\n    ) external pure returns (\\n        IHegicStrategy strategy,\\n        uint256 amount,\\n        uint256 period,\\n        uint256 maxTotalCost,\\n        bytes[] memory additional\\n    );\\n\\n    // EVENTS //\\n\\n    /**\\n     * @notice Emitted when a Hegic option position is opened.\\n     * @dev This event is triggered when a user successfully opens a Hegic option position using this contract.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param tokenID The identifier of the newly created Hegic option token.\\n     * @param strategy The address of the Hegic option strategy contract used for the position.\\n     * @param holder The address of the user who opened the option position.\\n     * @param amount The amount of the option that was purchased.\\n     * @param period The duration of the option period in seconds.\\n     * @param premium The premium paid for the option.\\n     */\\n    event OpenPositionByHegic(\\n        uint256 indexed buildID,\\n        uint256 tokenID,\\n        address strategy,\\n        address holder,\\n        uint256 amount,\\n        uint256 period,\\n        uint256 premium\\n    );\\n}\",\"keccak256\":\"0x366b7a67745ecbbe1c578a4ce0e6ca54c65e041365a935fc9062a870dc47e59d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/hegic/TxBuilderOpenHegic.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {BaseTxBuilderOpen, ERC20} from \\\"../BaseTxBuilderOpen.sol\\\";\\nimport {IHegicStrategy} from \\\"./IHegicStrategy.sol\\\";\\nimport {IPositionsManager} from \\\"./IPositionsManager.sol\\\";\\nimport {IProxySeller} from \\\"./IProxySeller.sol\\\";\\nimport {ITxBuilderOpenHegic} from \\\"./ITxBuilderOpenHegic.sol\\\";\\n\\n/**\\n * @title Transaction Builder for Opening Hegic Option Positions\\n * @author 0nika0\\n * @notice This contract facilitates the opening of Hegic option positions using predefined parameters.\\n */\\ncontract TxBuilderOpenHegic is BaseTxBuilderOpen, ITxBuilderOpenHegic {\\n\\n    address public proxySeller; \\n    address public hegicErc721; \\n    address public usdc; \\n    address public referrer;\\n\\n    constructor(\\n        address _proxySeller,\\n        address _hegicErc721,\\n        address _usdc,\\n        address _referrer\\n    ) {\\n        proxySeller = _proxySeller;\\n        hegicErc721 = _hegicErc721;\\n        usdc = _usdc;\\n        referrer = _referrer;\\n    }\\n\\n    // OWNER FUNCTIONS //\\n\\n    /**\\n     * @dev See {ITxBuilderOpenHegic-setReferrer}.\\n     */\\n    function setReferrer(address newReferrer) external onlyOwner {\\n        referrer = newReferrer;\\n    }\\n\\n    // EXTERNAL FUNCTIONS //  \\n\\n    /**\\n     * @dev See {ITxBuilderOpenHegic-allApprove}.\\n     */\\n    function allApprove() external {\\n        ERC20(usdc).approve(proxySeller, type(uint256).max);\\n    }   \\n\\n    // PUBLIC FUNCTIONS //  \\n\\n    /**\\n     * @notice Calculate the amount of a token based on provided parameters.\\n     * @dev This public view function calculates the amount of a token based on a set of input parameters. \\n     * It decodes the parameters, retrieves the necessary information from a Hegic strategy, \\n     * calculates the premium amount from positive PNL (Profit and Loss), \\n     * and ensures it does not exceed the maximum total cost.\\n     * @param parameters The encoded parameters for the calculation.\\n     * @return token The address of the token to be calculated.\\n     * @return amount The calculated amount of the token.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) public view override returns (\\n        address token,\\n        uint256 amount\\n    ) {\\n        token = usdc;\\n\\n        (\\n            IHegicStrategy strategy,\\n            uint256 amountHegic,\\n            uint256 period,\\n            uint256 maxTotalCost,\\n            bytes[] memory additional\\n        ) = decodeFromHegic(parameters);\\n\\n        (, uint128 positivepnl) = strategy.calculateNegativepnlAndPositivepnl(amountHegic, period, additional);\\n\\n        require(uint256(positivepnl) <= maxTotalCost, \\\"maximum total value exceeded\\\");\\n\\n        amount = uint256(positivepnl);\\n    } \\n\\n    // INTERNAL FUNCTIONS //    \\n\\n    /**\\n     * @notice Process a transaction for opening a Hegic option position.\\n     * @dev This internal function processes a transaction for opening a Hegic option position based on provided parameters. \\n     * It decodes the parameters to extract strategy, amount, period, additional data, and premium. \\n     * It then performs the necessary actions to create and transfer the option token to the user.\\n     * @param parameters The encoded parameters for opening the option position.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param user The address of the user who is opening the option position.\\n     */\\n    function _processTx(\\n        bytes memory parameters, \\n        uint256 buildID,\\n        address user\\n    ) internal override {\\n        (\\n            IHegicStrategy strategy,\\n            uint256 amount,\\n            uint256 period,\\n            ,\\n            bytes[] memory additional\\n        ) = decodeFromHegic(parameters);\\n        \\n        (, uint256 premium) = calculateAmount(parameters);\\n        \\n        uint256 id = IPositionsManager(hegicErc721).nextTokenId();\\n        \\n        IProxySeller(proxySeller).buyWithReferal(\\n            strategy,\\n            amount,\\n            period,\\n            additional,\\n            referrer\\n        );\\n        \\n        IPositionsManager(hegicErc721).transferFrom(address(this), user, id);\\n        \\n        emit OpenPositionByHegic(buildID, id, address(strategy), user, amount, period, premium);\\n    }\\n\\n    // PURE FUNCTIONS //\\n\\n    /**\\n     * @dev See {ITxBuilderOpenHegic-encodeFromHegic}.\\n     */\\n    function encodeFromHegic(\\n        IHegicStrategy strategy,\\n        uint256 amount,\\n        uint256 period,\\n        uint256 maxTotalCost,\\n        bytes[] memory additional\\n    ) external pure returns (bytes memory paramData) {\\n        return abi.encode(strategy, amount, period, maxTotalCost, additional);\\n    }\\n\\n    /**\\n     * @dev See {ITxBuilderOpenHegic-decodeFromHegic}.\\n     */\\n    function decodeFromHegic(\\n        bytes memory paramData\\n    ) public pure returns (\\n        IHegicStrategy strategy,\\n        uint256 amount,\\n        uint256 period,\\n        uint256 maxTotalCost,\\n        bytes[] memory additional\\n    ) {\\n        (\\n            strategy,\\n            amount,\\n            period,\\n            maxTotalCost,\\n            additional\\n        ) = abi.decode(paramData, (\\n            IHegicStrategy,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bytes[]\\n        ));\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x56aeef9ada142fb9592b5f7b71e12e88316a7db5f5e3d5ca362cecff548de39f\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080346100ef57601f610d3838819003918201601f19168301916001600160401b038311848410176100f4578084926080946040528339810103126100ef576100478161010a565b906100546020820161010a565b61006c60606100656040850161010a565b930161010a565b6000549360018060a01b03199333858716176000556040519560018060a01b03948580948193823391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a316876001541617600155168560025416176002551683600354161760035516906004541617600455610c19908161011f8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100ef5756fe608060408181526004918236101561001657600080fd5b600092833560e01c91826305395c201461077d57508163150b7a02146107065781633819137a146105035781633e413bee146104da57816368447c93146104b2578163715018a6146104585781637531a64e1461040657816379cce624146103155781638da5cb5b146102ed578163a18a7bfc146102ac578163ad4bb90814610211578163f2b60d2a146101bb578163f2fde38b146100ea575063f68cae1e146100bf57600080fd5b346100e657816003193601126100e65760015490516001600160a01b039091168152602090f35b5080fd5b9050346101b75760203660031901126101b7576101056107a2565b9061010e61095b565b6001600160a01b03918216928315610165575050600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b82843461020e57602036600319011261020e5782359067ffffffffffffffff821161020e57506101f461020a936101f992369101610825565b610ad7565b929593949190915195869586610928565b0390f35b80fd5b919050346101b757826003193601126101b757600354600154825163095ea7b360e01b81526001600160a01b03918216948101949094526000196024850152602091849160449183918891165af19081156102a3575061026f575080f35b6020813d821161029b575b81610287602093836107e7565b810103126100e657518015150361020e5780f35b3d915061027a565b513d84823e3d90fd5b8390346100e65760203660031901126100e6576102c76107a2565b6102cf61095b565b81546001600160a01b0319166001600160a01b039190911617905580f35b5050346100e657816003193601126100e657905490516001600160a01b039091168152602090f35b919050346101b75760a03660031901126101b7578135926001600160a01b038416840361020e576084359267ffffffffffffffff908185116101b757366023860112156101b757840135916103698361086c565b91610376855193846107e7565b838352602095868401916024809660051b8301019336851161020e57868301935b8585106103e0578a8a61020a8b6103d18c6103c38d8451978893606435916044359135908a8701610928565b03601f1981018652856107e7565b519282849384528301906108a7565b84358381116101b7578a916103fb83928b3691890101610825565b815201940193610397565b9050823461020e57602036600319011261020e5781359067ffffffffffffffff821161020e57506104429161043d91369101610825565b6109c7565b82516001600160a01b0390921682526020820152f35b833461020e578060031936011261020e5761047161095b565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b9050346101b757826003193601126101b7575490516001600160a01b03909116815260209150f35b5050346100e657816003193601126100e65760035490516001600160a01b039091168152602090f35b919050346101b75760603660031901126101b757813567ffffffffffffffff8111610702576105359036908401610825565b6001600160a01b0391604435838116908190036106fe57610566918561055a85610ad7565b999297919890506109c7565b9890506020826002541686519b8c8092631d5e528f60e21b82525afa998a156106bd578b9a6106c7575b508a8260015416938386541694803b156101b75784838b9389986105e48f988d51998a988997889663128694af60e11b8852169e8f908701526024860152604485015260a0606485015260a48401906108cc565b90608483015203925af180156106bd576106a8575b509089916002541690813b156101b757896064849283885195869485936323b872dd60e01b855230908501528b602485015260448401525af1801561069e57610686575b5050815196875260208701528501526060840152608083015260a08201527fb58b8caf38f3a5fb1aa22a6ae38defcd6835d2efaf65952daa55d65c56ac416160c060243592a280f35b61068f906107bd565b61069a57873861063d565b8780fd5b84513d84823e3d90fd5b6106b5909a91929a6107bd565b9890386105f9565b85513d8d823e3d90fd5b9099506020813d82116106f6575b816106e2602093836107e7565b810103126106f257519838610590565b8a80fd5b3d91506106d5565b8580fd5b8380fd5b9050346101b75760803660031901126101b7576107216107a2565b506024356001600160a01b038116036101b7576064359067ffffffffffffffff9081831161077957366023840112156107795782013590811161070257369101602401116100e65751630a85bd0160e11b8152602090f35b8480fd5b8490346100e657816003193601126100e6576002546001600160a01b03168152602090f35b600435906001600160a01b03821682036107b857565b600080fd5b67ffffffffffffffff81116107d157604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176107d157604052565b67ffffffffffffffff81116107d157601f01601f191660200190565b81601f820112156107b85780359061083c82610809565b9261084a60405194856107e7565b828452602083830101116107b857816000926020809301838601378301015290565b67ffffffffffffffff81116107d15760051b60200190565b60005b8381106108975750506000910152565b8181015183820152602001610887565b906020916108c081518092818552858086019101610884565b601f01601f1916010190565b908082519081815260208091019281808460051b8301019501936000915b8483106108fa5750505050505090565b9091929394958480610918600193601f198682030187528a516108a7565b98019301930191949392906108ea565b919260a093610958969592600180871b0316845260208401526040830152606082015281608082015201906108cc565b90565b6000546001600160a01b0316330361096f57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b51906001600160801b03821682036107b857565b90610a1860018060a01b036109e0816003541694610ad7565b9160409694919695869485519687958694859363d666b43360e01b8552600485015260248401526060604484015260648301906108cc565b0392165afa8015610acc57600090610a84575b6001600160801b03915016918211610a41575090565b5162461bcd60e51b815260206004820152601c60248201527f6d6178696d756d20746f74616c2076616c7565206578636565646564000000006044820152606490fd5b8282813d8311610ac5575b610a9981836107e7565b8101031261020e5750610ac0602082610ab96001600160801b03946109b3565b50016109b3565b610a2b565b503d610a8f565b82513d6000823e3d90fd5b8051810160209060a0838383019203126107b85782820151926001600160a01b03841684036107b8576040908181015193606092838301519460808401519460a085015167ffffffffffffffff958682116107b857019282603f850112156107b8578484015191610b478361086c565b96610b54835198896107e7565b838852828789019460051b870101958587116107b857838101945b878610610b86575050505050505050509091929394565b85518381116107b85782019087605f830112156107b8578582015190610bab82610809565b610bb7885191826107e7565b828152898784860101116107b857610bd88c94938594898685019101610884565b815201950194610b6f56fea2646970667358221220b78beed604b985fc364f549550bfa820f9b83bf2839f3adb4f71fa71ee9bca1a64736f6c63430008130033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c91826305395c201461077d57508163150b7a02146107065781633819137a146105035781633e413bee146104da57816368447c93146104b2578163715018a6146104585781637531a64e1461040657816379cce624146103155781638da5cb5b146102ed578163a18a7bfc146102ac578163ad4bb90814610211578163f2b60d2a146101bb578163f2fde38b146100ea575063f68cae1e146100bf57600080fd5b346100e657816003193601126100e65760015490516001600160a01b039091168152602090f35b5080fd5b9050346101b75760203660031901126101b7576101056107a2565b9061010e61095b565b6001600160a01b03918216928315610165575050600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b82843461020e57602036600319011261020e5782359067ffffffffffffffff821161020e57506101f461020a936101f992369101610825565b610ad7565b929593949190915195869586610928565b0390f35b80fd5b919050346101b757826003193601126101b757600354600154825163095ea7b360e01b81526001600160a01b03918216948101949094526000196024850152602091849160449183918891165af19081156102a3575061026f575080f35b6020813d821161029b575b81610287602093836107e7565b810103126100e657518015150361020e5780f35b3d915061027a565b513d84823e3d90fd5b8390346100e65760203660031901126100e6576102c76107a2565b6102cf61095b565b81546001600160a01b0319166001600160a01b039190911617905580f35b5050346100e657816003193601126100e657905490516001600160a01b039091168152602090f35b919050346101b75760a03660031901126101b7578135926001600160a01b038416840361020e576084359267ffffffffffffffff908185116101b757366023860112156101b757840135916103698361086c565b91610376855193846107e7565b838352602095868401916024809660051b8301019336851161020e57868301935b8585106103e0578a8a61020a8b6103d18c6103c38d8451978893606435916044359135908a8701610928565b03601f1981018652856107e7565b519282849384528301906108a7565b84358381116101b7578a916103fb83928b3691890101610825565b815201940193610397565b9050823461020e57602036600319011261020e5781359067ffffffffffffffff821161020e57506104429161043d91369101610825565b6109c7565b82516001600160a01b0390921682526020820152f35b833461020e578060031936011261020e5761047161095b565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b9050346101b757826003193601126101b7575490516001600160a01b03909116815260209150f35b5050346100e657816003193601126100e65760035490516001600160a01b039091168152602090f35b919050346101b75760603660031901126101b757813567ffffffffffffffff8111610702576105359036908401610825565b6001600160a01b0391604435838116908190036106fe57610566918561055a85610ad7565b999297919890506109c7565b9890506020826002541686519b8c8092631d5e528f60e21b82525afa998a156106bd578b9a6106c7575b508a8260015416938386541694803b156101b75784838b9389986105e48f988d51998a988997889663128694af60e11b8852169e8f908701526024860152604485015260a0606485015260a48401906108cc565b90608483015203925af180156106bd576106a8575b509089916002541690813b156101b757896064849283885195869485936323b872dd60e01b855230908501528b602485015260448401525af1801561069e57610686575b5050815196875260208701528501526060840152608083015260a08201527fb58b8caf38f3a5fb1aa22a6ae38defcd6835d2efaf65952daa55d65c56ac416160c060243592a280f35b61068f906107bd565b61069a57873861063d565b8780fd5b84513d84823e3d90fd5b6106b5909a91929a6107bd565b9890386105f9565b85513d8d823e3d90fd5b9099506020813d82116106f6575b816106e2602093836107e7565b810103126106f257519838610590565b8a80fd5b3d91506106d5565b8580fd5b8380fd5b9050346101b75760803660031901126101b7576107216107a2565b506024356001600160a01b038116036101b7576064359067ffffffffffffffff9081831161077957366023840112156107795782013590811161070257369101602401116100e65751630a85bd0160e11b8152602090f35b8480fd5b8490346100e657816003193601126100e6576002546001600160a01b03168152602090f35b600435906001600160a01b03821682036107b857565b600080fd5b67ffffffffffffffff81116107d157604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176107d157604052565b67ffffffffffffffff81116107d157601f01601f191660200190565b81601f820112156107b85780359061083c82610809565b9261084a60405194856107e7565b828452602083830101116107b857816000926020809301838601378301015290565b67ffffffffffffffff81116107d15760051b60200190565b60005b8381106108975750506000910152565b8181015183820152602001610887565b906020916108c081518092818552858086019101610884565b601f01601f1916010190565b908082519081815260208091019281808460051b8301019501936000915b8483106108fa5750505050505090565b9091929394958480610918600193601f198682030187528a516108a7565b98019301930191949392906108ea565b919260a093610958969592600180871b0316845260208401526040830152606082015281608082015201906108cc565b90565b6000546001600160a01b0316330361096f57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b51906001600160801b03821682036107b857565b90610a1860018060a01b036109e0816003541694610ad7565b9160409694919695869485519687958694859363d666b43360e01b8552600485015260248401526060604484015260648301906108cc565b0392165afa8015610acc57600090610a84575b6001600160801b03915016918211610a41575090565b5162461bcd60e51b815260206004820152601c60248201527f6d6178696d756d20746f74616c2076616c7565206578636565646564000000006044820152606490fd5b8282813d8311610ac5575b610a9981836107e7565b8101031261020e5750610ac0602082610ab96001600160801b03946109b3565b50016109b3565b610a2b565b503d610a8f565b82513d6000823e3d90fd5b8051810160209060a0838383019203126107b85782820151926001600160a01b03841684036107b8576040908181015193606092838301519460808401519460a085015167ffffffffffffffff958682116107b857019282603f850112156107b8578484015191610b478361086c565b96610b54835198896107e7565b838852828789019460051b870101958587116107b857838101945b878610610b86575050505050505050509091929394565b85518381116107b85782019087605f830112156107b8578582015190610bab82610809565b610bb7885191826107e7565b828152898784860101116107b857610bd88c94938594898685019101610884565b815201950194610b6f56fea2646970667358221220b78beed604b985fc364f549550bfa820f9b83bf2839f3adb4f71fa71ee9bca1a64736f6c63430008130033",
  "devdoc": {
    "author": "0nika0",
    "events": {
      "OpenPositionByHegic(uint256,uint256,address,address,uint256,uint256,uint256)": {
        "details": "This event is triggered when a user successfully opens a Hegic option position using this contract.",
        "params": {
          "amount": "The amount of the option that was purchased.",
          "buildID": "The unique identifier for the option position build.",
          "holder": "The address of the user who opened the option position.",
          "period": "The duration of the option period in seconds.",
          "premium": "The premium paid for the option.",
          "strategy": "The address of the Hegic option strategy contract used for the position.",
          "tokenID": "The identifier of the newly created Hegic option token."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allApprove()": {
        "details": "See {ITxBuilderOpenHegic-allApprove}."
      },
      "calculateAmount(bytes)": {
        "details": "This public view function calculates the amount of a token based on a set of input parameters.  It decodes the parameters, retrieves the necessary information from a Hegic strategy,  calculates the premium amount from positive PNL (Profit and Loss),  and ensures it does not exceed the maximum total cost.",
        "params": {
          "parameters": "The encoded parameters for the calculation."
        },
        "returns": {
          "amount": "The calculated amount of the token.",
          "token": "The address of the token to be calculated."
        }
      },
      "decodeFromHegic(bytes)": {
        "details": "See {ITxBuilderOpenHegic-decodeFromHegic}."
      },
      "encodeFromHegic(address,uint256,uint256,uint256,bytes[])": {
        "details": "See {ITxBuilderOpenHegic-encodeFromHegic}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "processTx(bytes,uint256,address)": {
        "details": "See {IBaseTxBuilderOpen-processTx}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setReferrer(address)": {
        "details": "See {ITxBuilderOpenHegic-setReferrer}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Transaction Builder for Opening Hegic Option Positions",
    "version": 1
  },
  "userdoc": {
    "events": {
      "OpenPositionByHegic(uint256,uint256,address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when a Hegic option position is opened."
      }
    },
    "kind": "user",
    "methods": {
      "calculateAmount(bytes)": {
        "notice": "Calculate the amount of a token based on provided parameters."
      }
    },
    "notice": "This contract facilitates the opening of Hegic option positions using predefined parameters.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/hegic/TxBuilderOpenHegic.sol:TxBuilderOpenHegic",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5938,
        "contract": "contracts/hegic/TxBuilderOpenHegic.sol:TxBuilderOpenHegic",
        "label": "proxySeller",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5940,
        "contract": "contracts/hegic/TxBuilderOpenHegic.sol:TxBuilderOpenHegic",
        "label": "hegicErc721",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5942,
        "contract": "contracts/hegic/TxBuilderOpenHegic.sol:TxBuilderOpenHegic",
        "label": "usdc",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5944,
        "contract": "contracts/hegic/TxBuilderOpenHegic.sol:TxBuilderOpenHegic",
        "label": "referrer",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}