{
  "address": "0x9daA79Dbf6CD067D207194661779677B5Ee29DCF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchanger",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_buildManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "productType",
          "type": "uint256"
        }
      ],
      "name": "CreateBuild",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "buildManager",
      "outputs": [
        {
          "internalType": "contract IBuildManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "moduleAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct ITxBuilder.Module[]",
          "name": "moduleArray",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes[]",
          "name": "parametersArray",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "swapDataArray",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "productType",
          "type": "uint256"
        }
      ],
      "name": "consolidationOfTransactions",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchanger",
      "outputs": [
        {
          "internalType": "contract IExchanger",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "module",
      "outputs": [
        {
          "internalType": "address",
          "name": "moduleAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exchangerAddress",
          "type": "address"
        }
      ],
      "name": "setExchanger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "moduleAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct ITxBuilder.Module",
          "name": "modData",
          "type": "tuple"
        }
      ],
      "name": "setModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd3458a5de7cb205045a4da6fa76dc4582f7524ead28fb6246cd2b235ed0f13e8",
  "receipt": {
    "to": null,
    "from": "0x8B57f3a9bDf2cfdBF9B2627ff8bEa86fB5641a50",
    "contractAddress": "0x9daA79Dbf6CD067D207194661779677B5Ee29DCF",
    "transactionIndex": 1,
    "gasUsed": "9043279",
    "logsBloom": "0x
    "blockHash": "0x09e82d9be8275c53d1ec51edffceb47153636d2ed6a57fc649766b097a72e063",
    "transactionHash": "0xd3458a5de7cb205045a4da6fa76dc4582f7524ead28fb6246cd2b235ed0f13e8",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 164574170,
        "transactionHash": "0xd3458a5de7cb205045a4da6fa76dc4582f7524ead28fb6246cd2b235ed0f13e8",
        "address": "0x9daA79Dbf6CD067D207194661779677B5Ee29DCF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b57f3a9bdf2cfdbf9b2627ff8bea86fb5641a50"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x09e82d9be8275c53d1ec51edffceb47153636d2ed6a57fc649766b097a72e063"
      }
    ],
    "blockNumber": 164574170,
    "cumulativeGasUsed": "9043279",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x03E34a4d1F2B88579521086876E781479A544610",
    "0x92DCa00556c34a17c6AC4CE8A0d0A01445326512"
  ],
  "numDeployments": 1,
  "solcInputHash": "4bf5226f41b2f099f1eff60c8b1170a7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchanger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buildManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productType\",\"type\":\"uint256\"}],\"name\":\"CreateBuild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buildManager\",\"outputs\":[{\"internalType\":\"contract IBuildManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct ITxBuilder.Module[]\",\"name\":\"moduleArray\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"parametersArray\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"swapDataArray\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"productType\",\"type\":\"uint256\"}],\"name\":\"consolidationOfTransactions\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchanger\",\"outputs\":[{\"internalType\":\"contract IExchanger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"module\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchangerAddress\",\"type\":\"address\"}],\"name\":\"setExchanger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct ITxBuilder.Module\",\"name\":\"modData\",\"type\":\"tuple\"}],\"name\":\"setModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0nika0\",\"details\":\"This contract manages the consolidation of transactions and products, allowing users to create and interact with modules. It enables users to consolidate multiple transactions into one and create products through modules.\",\"events\":{\"CreateBuild(uint256,address,uint256)\":{\"details\":\"An event emitted when a build or product is created.  This event is triggered when a user creates a new build or product, and it provides information about the build ID, the user who created it, and the product type associated with the build. \",\"params\":{\"buildID\":\"The unique identifier for the created build.\",\"productType\":\"The type of product associated with the build.\",\"user\":\"The address of the user who created the build.\"}}},\"kind\":\"dev\",\"methods\":{\"consolidationOfTransactions((address,string)[],bytes[],bytes[],uint256)\":{\"details\":\"This external function allows users to consolidate and execute multiple transactions across different modules in a single call.  It takes an array of modules, parameters, and swap data, and executes the transactions sequentially.  The function ensures that the lengths of the arrays are equal and validates the required message value for each swap.\",\"params\":{\"moduleArray\":\"An array of Module structs representing the modules to interact with.\",\"parametersArray\":\"An array of encoded parameters for each module's transaction.\",\"productType\":\"The type of product or operation being performed.\",\"swapDataArray\":\"An array of encoded swap data for each module's transaction.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setExchanger(address)\":{\"details\":\"This external function allows the contract owner to set the address of the Exchanger contract.\",\"params\":{\"exchangerAddress\":\"The address of the Exchanger contract.\"}},\"setModule(uint256,(address,string))\":{\"details\":\"This external function allows the contract owner to set a module's data at a specific index.\",\"params\":{\"index\":\"The index at which to set the module.\",\"modData\":\"The module data to set.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawERC20(address,address,uint256)\":{\"details\":\"This external function allows the contract owner to withdraw ERC20 tokens to a specified user address.\",\"params\":{\"amount\":\"The amount of tokens to withdraw.\",\"token\":\"The address of the ERC20 token contract.\",\"user\":\"The address of the user to receive the tokens.\"}},\"withdrawETH(address,uint256)\":{\"details\":\"This external function allows the contract owner to withdraw Ether (ETH) to a specified user address.\",\"params\":{\"amount\":\"The amount of ETH to withdraw.\",\"user\":\"The address of the user to receive the ETH.\"}}},\"title\":\"TxBuilder\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"consolidationOfTransactions((address,string)[],bytes[],bytes[],uint256)\":{\"notice\":\"Consolidate and execute multiple transactions in a single call.\"},\"setExchanger(address)\":{\"notice\":\"Set the address of the Exchanger contract.\"},\"setModule(uint256,(address,string))\":{\"notice\":\"Set a module at a specific index.\"},\"withdrawERC20(address,address,uint256)\":{\"notice\":\"Withdraw ERC20 tokens to a specified user address.\"},\"withdrawETH(address,uint256)\":{\"notice\":\"Withdraw Ether (ETH) to a specified user address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TxBuilder.sol\":\"TxBuilder\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/IBaseTxBuilderOpen.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\n\\ninterface IBaseTxBuilderOpen {\\n    // PUBLIC FUNCTONS //\\n\\n    /**\\n     * @notice Calculate the amount of a token based on provided parameters.\\n     * @dev This function calculates the amount of a token based on a set of input parameters.\\n     * @param parameters The encoded parameters for the calculation.\\n     * @return token The address of the token to be calculated.\\n     * @return amount The calculated amount of the token.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) external view returns (\\n        address token,\\n        uint256 amount\\n    ); \\n\\n     // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @notice Process a transaction for opening an option position.\\n     * @dev This function processes a transaction for opening an option position based on the provided parameters.\\n     * @param parametersArray The encoded parameters for opening the option position.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param user The address of the user who is opening the option position.\\n     */\\n    function processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) external;\\n\\n\\n\\n}\\n\",\"keccak256\":\"0x73b18ed44e66dd7dfe5d1b58e946c8faf17727fcef6f5e389c130a80933369b5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/IBuildManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\ninterface IBuildManager {\\n    // OWNER FUNCTIONS //\\n\\n    /**\\n     * @dev Allows the owner to set the address of the transaction builder contract.\\n     * @param newTxBuilder The new address of the transaction builder contract.\\n     */\\n    function setTxBuilder(address newTxBuilder) external;\\n\\n    // VIEW FUNCTIONS //\\n\\n    /**\\n     * @dev Retrieves the current build ID.\\n     * @return uint256 The current build ID.\\n     */\\n    function getBuildID() external view returns (uint256);\\n\\n    // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @dev Increments the build ID externally, allowing the designated transaction builder contract to update it.\\n     *      Requires the caller to be the set transaction builder contract to have access rights.\\n     */\\n    function increaseBuildID() external;\\n}\",\"keccak256\":\"0x0c325cba82a5e5084ee230be000a5999c1068758f652f8eb78f294ed5860ed4d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/ITxBuilder.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\ninterface ITxBuilder {\\n    // STRUCTS //\\n\\n    /**\\n     * @title Module\\n     * @dev A structure representing a modular component.\\n     * \\n     * This structure is used to store information about a modular component, including its address and a human-readable name.\\n     */\\n    struct Module {\\n        address moduleAddress; // The address of the module component.\\n        string name;           // A human-readable name for the module.\\n    }\\n\\n    // OWNER FUNCTIONS //\\n\\n    /**\\n     * @notice Set the address of the Exchanger contract.\\n     * @dev This external function allows the contract owner to set the address of the Exchanger contract.\\n     * @param exchangerAddress The address of the Exchanger contract.\\n     */\\n    function setExchanger(address exchangerAddress) external;\\n\\n    /**\\n     * @notice Set a module at a specific index.\\n     * @dev This external function allows the contract owner to set a module's data at a specific index.\\n     * @param index The index at which to set the module.\\n     * @param modData The module data to set.\\n     */\\n    function setModule(uint256 index, Module calldata modData) external;\\n\\n    /**\\n     * @notice Withdraw Ether (ETH) to a specified user address.\\n     * @dev This external function allows the contract owner to withdraw Ether (ETH) to a specified user address.\\n     * @param user The address of the user to receive the ETH.\\n     * @param amount The amount of ETH to withdraw.\\n     */\\n    function withdrawETH(address user, uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraw ERC20 tokens to a specified user address.\\n     * @dev This external function allows the contract owner to withdraw ERC20 tokens to a specified user address.\\n     * @param token The address of the ERC20 token contract.\\n     * @param user The address of the user to receive the tokens.\\n     * @param amount The amount of tokens to withdraw.\\n     */\\n    function withdrawERC20(address token, address user, uint256 amount) external;\\n\\n    // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @notice Consolidate and execute multiple transactions in a single call.\\n     * @dev This external function allows users to consolidate and execute multiple transactions across different modules in a single call. \\n     * It takes an array of modules, parameters, and swap data, and executes the transactions sequentially. \\n     * The function ensures that the lengths of the arrays are equal and validates the required message value for each swap.\\n     * @param moduleArray An array of Module structs representing the modules to interact with.\\n     * @param parametersArray An array of encoded parameters for each module's transaction.\\n     * @param swapDataArray An array of encoded swap data for each module's transaction.\\n     * @param productType The type of product or operation being performed.\\n     */\\n    function consolidationOfTransactions(\\n        Module[] memory moduleArray, \\n        bytes[] memory parametersArray,\\n        bytes[] memory swapDataArray,  \\n        uint256 productType\\n    ) external payable;\\n\\n    // EVENTS //\\n\\n    /**\\n     * @dev An event emitted when a build or product is created.\\n     * \\n     * This event is triggered when a user creates a new build or product, and it provides information about the build ID,\\n     * the user who created it, and the product type associated with the build.\\n     * \\n     * @param buildID The unique identifier for the created build.\\n     * @param user The address of the user who created the build.\\n     * @param productType The type of product associated with the build.\\n     */\\n    event CreateBuild(\\n        uint256 buildID,\\n        address indexed user,\\n        uint256 productType\\n    );\\n\\n}\",\"keccak256\":\"0x812e44ca6ce2ca77862792b8ecea895b194089dec58e649ad372c6fddb22a5ec\",\"license\":\"GPL-3.0-or-later\"},\"contracts/TxBuilder.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IBaseTxBuilderOpen} from \\\"./IBaseTxBuilderOpen.sol\\\";\\nimport {IExchanger} from \\\"./exchanger/IExchanger.sol\\\";\\nimport {ITxBuilder} from \\\"./ITxBuilder.sol\\\";\\nimport {IBuildManager} from \\\"./IBuildManager.sol\\\";\\n\\n/**\\n * @title TxBuilder\\n * @author 0nika0\\n * @dev This contract manages the consolidation of transactions and products, allowing users to create and interact with modules.\\n * It enables users to consolidate multiple transactions into one and create products through modules.\\n */\\ncontract TxBuilder is Ownable, ITxBuilder {\\n\\n    IExchanger public exchanger;\\n    IBuildManager public buildManager;\\n\\n    mapping(uint256 => Module) public module;\\n\\n    constructor(\\n        address _exchanger,\\n        address _buildManager\\n    ) {\\n        exchanger = IExchanger(_exchanger);\\n        buildManager = IBuildManager(_buildManager);\\n    }\\n\\n    // OWNER FUNCTIONS //\\n\\n    function setExchanger(address exchangerAddress) external onlyOwner {\\n        exchanger = IExchanger(exchangerAddress);\\n    }\\n\\n    function setModule(uint256 index, Module calldata modData) external onlyOwner {\\n        module[index] = modData;\\n    }\\n\\n    function withdrawETH(address user, uint256 amount) external onlyOwner {\\n        payable(user).transfer(amount);\\n    }\\n\\n    function withdrawERC20(address token, address user, uint256 amount) external onlyOwner {\\n        ERC20(token).transfer(user, amount);\\n    }\\n\\n    // EXTERNAL FUNCTIONS //\\n\\n    function consolidationOfTransactions(\\n        Module[] memory moduleArray, \\n        bytes[] memory parametersArray,\\n        bytes[] memory swapDataArray,  \\n        uint256 productType\\n    ) external payable {\\n        require(moduleArray.length == parametersArray.length && parametersArray.length == swapDataArray.length, \\\"arrays not equal\\\");\\n\\n        uint256 buildID = buildManager.getBuildID();\\n        \\n        exchanger.checkMsgValue(swapDataArray, msg.value);\\n\\n        for (uint i = 0; i < moduleArray.length; i++) {\\n            uint256 msgValue = exchanger.calculateMsgValue(swapDataArray[i]);\\n\\n            if (msgValue == 0) {\\n                exchanger.swap(swapDataArray[i], msg.sender, moduleArray[i].moduleAddress);\\n            } else {\\n                exchanger.swap{ value: msgValue }(swapDataArray[i], msg.sender, moduleArray[i].moduleAddress);\\n            }    \\n\\n            IBaseTxBuilderOpen(moduleArray[i].moduleAddress).processTx(parametersArray[i], buildID, msg.sender);\\n        }\\n\\n        emit CreateBuild(buildID, msg.sender, productType);\\n        \\n        buildManager.increaseBuildID();\\n    }\\n}\\n\",\"keccak256\":\"0x1d5edac5fe6b3b6498f2c3d2ef720a2e444ad4fbaf46e16360e86ecb417529c8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/exchanger/IExchanger.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\ninterface IExchanger {\\n    // STRUCTS //\\n\\n    /**\\n     * @dev A struct representing data related to token swaps.\\n     * \\n     * This struct encapsulates information necessary for token swaps, including the token path, input and output tokens,\\n     * input amount, minimum expected output amount, flags to indicate whether tokens are ETH and if the swap should be executed.\\n     * \\n     * @param path The path of tokens to follow in the swap.\\n     * @param tokenIn The address of the input token.\\n     * @param tokenOut The address of the output token.\\n     * @param amountIn The amount of input tokens to swap.\\n     * @param amountOutMinimum The minimum amount of output tokens expected from the swap.\\n     * @param isETH A boolean indicating whether the input token is ETH (true if it is).\\n     * @param swap A boolean indicating whether the swap should be executed (true if it should).\\n     */\\n    struct ExchangeData {\\n        bytes path;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        bool isETH;\\n        bool swap;\\n    }\\n    \\n    // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @dev Allows a trader to perform a swap operation or a direct token transfer between addresses.\\n     * \\n     * This function can be used by traders to perform token swaps through a decentralized exchange or directly transfer tokens between addresses.\\n     * If the 'swap' flag in the provided data is set to true, a token swap is executed with specific details such as input and output tokens,\\n     * minimum expected output, and other swap-related parameters. If the 'swap' flag is set to false, a direct token transfer is performed between 'from' and 'to'.\\n     * \\n     * @param data The encoded swap or transfer data that includes information about the operation.\\n     * @param from The address from which tokens are transferred or swapped.\\n     * @param to The address that receives the tokens in the transfer or swap operation.\\n     * \\n     * Requirements:\\n     * - The caller must have the 'TRADER_ROLE'.\\n     */\\n    function swap(bytes memory data, address from, address to) external payable;\\n\\n    // PURE FUNCTIONS //\\n\\n    /**\\n     * @dev Verifies if the provided `msg.value` matches the calculated value based on a series of swap operations.\\n     * \\n     * This function checks if the provided `msg.value` matches the calculated value obtained by summing the input amounts of ETH for each swap operation.\\n     * It is used to ensure the correctness of `msg.value` when performing multiple swaps, preventing errors or discrepancies.\\n     * \\n     * @param swapDataArray An array of encoded swap data, each containing information about swap or transfer operations.\\n     * @param msgValue The expected `msg.value` to be validated against the calculated value.\\n     * \\n     * Requirements:\\n     * - The `msg.value` must match the calculated value based on the provided `swapDataArray`.\\n     */\\n    function checkMsgValue(bytes[] memory swapDataArray, uint256 msgValue) external pure;\\n    \\n    /**\\n     * @dev Calculates the expected `msg.value` for a given swap operation encoded in swapData.\\n     * \\n     * This function calculates the expected `msg.value` based on the information provided in the swapData.\\n     * It checks if the swap operation involves ETH and is indeed a swap (not just a transfer).\\n     * If these conditions are met, it returns the calculated `msg.value`.\\n     * \\n     * @param swapData The encoded swap data that describes the swap operation.\\n     * \\n     * @return value The calculated `msg.value` for the swap operation. If it's not a swap involving ETH, the value is 0.\\n     */\\n    function calculateMsgValue(bytes memory swapData) external pure returns (uint256 value);\\n    \\n    /**\\n     * @dev Encodes the ExchangeData struct into a bytes array.\\n     * \\n     * This function takes the ExchangeData struct as input and encodes it into a bytes array using ABI encoding.\\n     * The resulting bytes array, `paramData`, can be used to store or transmit the struct's data.\\n     * \\n     * @param data The ExchangeData struct to be encoded.\\n     * \\n     * @return paramData The encoded data in the form of a bytes array.\\n     */\\n    function encodeFromExchange(ExchangeData memory data) external pure returns (bytes memory paramData);\\n    \\n    /**\\n     * @dev Decodes the ExchangeData struct from a bytes array.\\n     * \\n     * This function decodes the ExchangeData struct from a given bytes array (`paramData`) using ABI decoding.\\n     * The decoded struct, `data`, is returned for further use and processing.\\n     * \\n     * @param paramData The bytes array containing the encoded ExchangeData struct.\\n     * \\n     * @return data The decoded ExchangeData struct.\\n     */\\n    function decodeFromExchange(bytes memory paramData) external pure returns (ExchangeData memory data);\\n}\",\"keccak256\":\"0xf492368b088bed0563ab071485d13cfcc23a845ea4583b2d921346c44d8c7875\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080346100c357601f610f7e38819003918201601f19168301916001600160401b038311848410176100c85780849260409485528339810103126100c357610052602061004b836100de565b92016100de565b60008054336001600160a01b0319808316821784556040519590946001600160a01b03949093859391908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a31683600154161760015516906002541617600255610e8b90816100f38239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100c35756fe6080604052600436101561001257600080fd5b6000803560e01c8063302d2ef614610621578063430f75da1461053a57806344004cc1146104875780634782f7791461042b5780634d12fca414610402578063715018a6146103a8578063868ccfb3146101f85780638da5cb5b146101d1578063d4fee1ac146101a8578063da909b09146101635763f2fde38b1461009657600080fd5b34610160576020366003190112610160576100af610c3a565b6100b7610da4565b6001600160a01b0390811690811561010c57600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b80fd5b50346101605760203660031901126101605761017d610c3a565b610185610da4565b60018060a01b03166bffffffffffffffffffffffff60a01b600154161760015580f35b50346101605780600319360112610160576002546040516001600160a01b039091168152602090f35b5034610160578060031936011261016057546040516001600160a01b039091168152602090f35b5034610160576003196040368201126103a45760249081359167ffffffffffffffff908184116103a0576040843603938401126103a057610237610da4565b60043585526020600381526040862093856004013560018060a01b03811680910361039c5785546001600160a01b03191617855560019485019583810135916022190182121561039c570160048101359384116103985783360383820113610398576102a38654610d2a565b601f8111610352575b508691601f85116001146102ea575091839491849388956102dd575b5050501b916000199060031b1c191617905580f35b01013592503880806102c8565b92909184601f198116888a52858a20958a905b89838310610336575050501061031a575b50505050811b01905580f35b60001960f88660031b161c19920101351690553880808061030e565b87860187013589559097019693840193889350908101906102fd565b868852828820601f860160051c81019184871061038e575b601f0160051c019086905b8281106103835750506102ac565b898155018690610375565b909150819061036a565b8680fd5b8780fd5b8480fd5b5080fd5b50346101605780600319360112610160576103c1610da4565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101605780600319360112610160576001546040516001600160a01b039091168152602090f35b50346101605760403660031901126101605780808080610449610c3a565b60243590610455610da4565b8290821561047d575b6001600160a01b031690f1156104715780f35b604051903d90823e3d90fd5b6108fc915061045e565b5034610160576060366003190112610160576104a1610c3a565b6001600160a01b039060243582811691908290036105355760446020926104c6610da4565b85604051958694859363a9059cbb60e01b8552600485015284356024850152165af1801561052a576104f6575080f35b6020813d8211610522575b8161050e60209383610c00565b810103126103a45751801515036101605780f35b3d9150610501565b6040513d84823e3d90fd5b600080fd5b50346101605760209081600319360112610160576004358152600382526040812060018060a01b0381541690600180910184604051928583549361057d85610d2a565b808752948381169081156105fc57506001146105c0575b83876105bc886105a6818d0382610c00565b6040805194859485528401526040830190610d64565b0390f35b908094939750528583205b8284106105e9575050508101909201916105a6846105bc8338610594565b80548585018801529286019281016105cb565b60ff1916858801525050505090151560051b82010192506105a6846105bc8338610594565b5060803660031901126101605767ffffffffffffffff906004358281116103a457366023820112156103a457806004013561065b81610c22565b916106696040519384610c00565b8183526024602084019260051b820101903682116103a05760248101925b828410610b365750505050602435838111610b32576106aa903690600401610c97565b92604435908111610b32576106c3903690600401610c97565b92815181518091149081610b27575b5015610aef5760025460405163815662f360e01b81529290602090849060049082906001600160a01b03165afa928315610ae4578493610aac575b506001546001600160a01b0316803b156103a057846040518092634526150760e11b8252604482016040600484015289518091526064830160648260051b8501019160208c019186905b828210610a79575050505082809134602483015203915afa8015610a6e57610a5b575b50835b81518110156109d7576001546107c4906001600160a01b031660206107a2848a610dfc565b516040518094819263bcc4bffd60e01b83528460048401526024830190610d64565b0381845afa9182156109cc578792610998575b50816109195750506001546001600160a01b03166107f58288610dfc565b51906001600160a01b036108098486610dfc565b51511691813b1561039c5791879161083a93836040518096819582946378a820a760e01b8452339060048501610e26565b03925af180156108fa57908691610905575b50505b6001600160a01b036108618284610dfc565b51511661086e8285610dfc565b51813b15610398576108a187928392604051948580948193631c0c89bd60e11b8352606060048401526064830190610d64565b8b602483015233604483015203925af180156108fa579086916108e6575b505060001981146108d25760010161077d565b634e487b7160e01b85526011600452602485fd5b6108ef90610bd6565b6103a05784386108bf565b6040513d88823e3d90fd5b61090e90610bd6565b6103a057843861084c565b6109238389610dfc565b516001600160a01b036109368587610dfc565b51511692823b156109945791610967939189936040518096819582946378a820a760e01b8452339060048501610e26565b03925af180156108fa57908691610980575b505061084f565b61098990610bd6565b6103a0578438610979565b8880fd5b9091506020813d6020116109c4575b816109b460209383610c00565b81010312610535575190386107d7565b3d91506109a7565b6040513d89823e3d90fd5b50505060405190815260643560208201527fdf35236315d79f749febbbe30af46d136cadd5dc4f8006c5668c7bd2fac5da7260403392a260025481906001600160a01b0316803b15610a58578180916004604051809481936339feea8360e01b83525af1801561052a57610a485750f35b610a5190610bd6565b6101605780f35b50fd5b610a6790949194610bd6565b923861077a565b6040513d87823e3d90fd5b929550926001919496506020610a9a81926063198b82030186528851610d64565b960192019201928a9593879593610757565b9092506020813d602011610adc575b81610ac860209383610c00565b81010312610ad85751913861070d565b8380fd5b3d9150610abb565b6040513d86823e3d90fd5b60405162461bcd60e51b815260206004820152601060248201526f185c9c985e5cc81b9bdd08195c5d585b60821b6044820152606490fd5b9050845114386106d2565b8280fd5b8335878111610398578201604060231982360301126103985760405190604082018281108a821117610bc25760405260248101356001600160a01b038116810361099457825260449081810135908a8211610bbe5701366043820112156109945791610baf602094928594369160248201359101610c50565b83820152815201930192610687565b8980fd5b634e487b7160e01b89526041600452602489fd5b67ffffffffffffffff8111610bea57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610bea57604052565b67ffffffffffffffff8111610bea5760051b60200190565b600435906001600160a01b038216820361053557565b92919267ffffffffffffffff8211610bea5760405191610c7a601f8201601f191660200184610c00565b829481845281830111610535578281602093846000960137010152565b81601f8201121561053557803590610cae82610c22565b92604092610cbe84519586610c00565b808552602093848087019260051b8501019383851161053557858101925b858410610ced575050505050505090565b833567ffffffffffffffff811161053557820185603f82011215610535578791610d1f87838786809601359101610c50565b815201930192610cdc565b90600182811c92168015610d5a575b6020831014610d4457565b634e487b7160e01b600052602260045260246000fd5b91607f1691610d39565b919082519283825260005b848110610d90575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610d6f565b6000546001600160a01b03163303610db857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b8051821015610e105760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b91610e3e604092959495606085526060850190610d64565b6001600160a01b039182166020850152941691015256fea264697066735822122072cae748f2e7c5ff6e84a01318771c63d683f2cd47e58cf97cc7d8c9ab0963e764736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c8063302d2ef614610621578063430f75da1461053a57806344004cc1146104875780634782f7791461042b5780634d12fca414610402578063715018a6146103a8578063868ccfb3146101f85780638da5cb5b146101d1578063d4fee1ac146101a8578063da909b09146101635763f2fde38b1461009657600080fd5b34610160576020366003190112610160576100af610c3a565b6100b7610da4565b6001600160a01b0390811690811561010c57600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b80fd5b50346101605760203660031901126101605761017d610c3a565b610185610da4565b60018060a01b03166bffffffffffffffffffffffff60a01b600154161760015580f35b50346101605780600319360112610160576002546040516001600160a01b039091168152602090f35b5034610160578060031936011261016057546040516001600160a01b039091168152602090f35b5034610160576003196040368201126103a45760249081359167ffffffffffffffff908184116103a0576040843603938401126103a057610237610da4565b60043585526020600381526040862093856004013560018060a01b03811680910361039c5785546001600160a01b03191617855560019485019583810135916022190182121561039c570160048101359384116103985783360383820113610398576102a38654610d2a565b601f8111610352575b508691601f85116001146102ea575091839491849388956102dd575b5050501b916000199060031b1c191617905580f35b01013592503880806102c8565b92909184601f198116888a52858a20958a905b89838310610336575050501061031a575b50505050811b01905580f35b60001960f88660031b161c19920101351690553880808061030e565b87860187013589559097019693840193889350908101906102fd565b868852828820601f860160051c81019184871061038e575b601f0160051c019086905b8281106103835750506102ac565b898155018690610375565b909150819061036a565b8680fd5b8780fd5b8480fd5b5080fd5b50346101605780600319360112610160576103c1610da4565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101605780600319360112610160576001546040516001600160a01b039091168152602090f35b50346101605760403660031901126101605780808080610449610c3a565b60243590610455610da4565b8290821561047d575b6001600160a01b031690f1156104715780f35b604051903d90823e3d90fd5b6108fc915061045e565b5034610160576060366003190112610160576104a1610c3a565b6001600160a01b039060243582811691908290036105355760446020926104c6610da4565b85604051958694859363a9059cbb60e01b8552600485015284356024850152165af1801561052a576104f6575080f35b6020813d8211610522575b8161050e60209383610c00565b810103126103a45751801515036101605780f35b3d9150610501565b6040513d84823e3d90fd5b600080fd5b50346101605760209081600319360112610160576004358152600382526040812060018060a01b0381541690600180910184604051928583549361057d85610d2a565b808752948381169081156105fc57506001146105c0575b83876105bc886105a6818d0382610c00565b6040805194859485528401526040830190610d64565b0390f35b908094939750528583205b8284106105e9575050508101909201916105a6846105bc8338610594565b80548585018801529286019281016105cb565b60ff1916858801525050505090151560051b82010192506105a6846105bc8338610594565b5060803660031901126101605767ffffffffffffffff906004358281116103a457366023820112156103a457806004013561065b81610c22565b916106696040519384610c00565b8183526024602084019260051b820101903682116103a05760248101925b828410610b365750505050602435838111610b32576106aa903690600401610c97565b92604435908111610b32576106c3903690600401610c97565b92815181518091149081610b27575b5015610aef5760025460405163815662f360e01b81529290602090849060049082906001600160a01b03165afa928315610ae4578493610aac575b506001546001600160a01b0316803b156103a057846040518092634526150760e11b8252604482016040600484015289518091526064830160648260051b8501019160208c019186905b828210610a79575050505082809134602483015203915afa8015610a6e57610a5b575b50835b81518110156109d7576001546107c4906001600160a01b031660206107a2848a610dfc565b516040518094819263bcc4bffd60e01b83528460048401526024830190610d64565b0381845afa9182156109cc578792610998575b50816109195750506001546001600160a01b03166107f58288610dfc565b51906001600160a01b036108098486610dfc565b51511691813b1561039c5791879161083a93836040518096819582946378a820a760e01b8452339060048501610e26565b03925af180156108fa57908691610905575b50505b6001600160a01b036108618284610dfc565b51511661086e8285610dfc565b51813b15610398576108a187928392604051948580948193631c0c89bd60e11b8352606060048401526064830190610d64565b8b602483015233604483015203925af180156108fa579086916108e6575b505060001981146108d25760010161077d565b634e487b7160e01b85526011600452602485fd5b6108ef90610bd6565b6103a05784386108bf565b6040513d88823e3d90fd5b61090e90610bd6565b6103a057843861084c565b6109238389610dfc565b516001600160a01b036109368587610dfc565b51511692823b156109945791610967939189936040518096819582946378a820a760e01b8452339060048501610e26565b03925af180156108fa57908691610980575b505061084f565b61098990610bd6565b6103a0578438610979565b8880fd5b9091506020813d6020116109c4575b816109b460209383610c00565b81010312610535575190386107d7565b3d91506109a7565b6040513d89823e3d90fd5b50505060405190815260643560208201527fdf35236315d79f749febbbe30af46d136cadd5dc4f8006c5668c7bd2fac5da7260403392a260025481906001600160a01b0316803b15610a58578180916004604051809481936339feea8360e01b83525af1801561052a57610a485750f35b610a5190610bd6565b6101605780f35b50fd5b610a6790949194610bd6565b923861077a565b6040513d87823e3d90fd5b929550926001919496506020610a9a81926063198b82030186528851610d64565b960192019201928a9593879593610757565b9092506020813d602011610adc575b81610ac860209383610c00565b81010312610ad85751913861070d565b8380fd5b3d9150610abb565b6040513d86823e3d90fd5b60405162461bcd60e51b815260206004820152601060248201526f185c9c985e5cc81b9bdd08195c5d585b60821b6044820152606490fd5b9050845114386106d2565b8280fd5b8335878111610398578201604060231982360301126103985760405190604082018281108a821117610bc25760405260248101356001600160a01b038116810361099457825260449081810135908a8211610bbe5701366043820112156109945791610baf602094928594369160248201359101610c50565b83820152815201930192610687565b8980fd5b634e487b7160e01b89526041600452602489fd5b67ffffffffffffffff8111610bea57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610bea57604052565b67ffffffffffffffff8111610bea5760051b60200190565b600435906001600160a01b038216820361053557565b92919267ffffffffffffffff8211610bea5760405191610c7a601f8201601f191660200184610c00565b829481845281830111610535578281602093846000960137010152565b81601f8201121561053557803590610cae82610c22565b92604092610cbe84519586610c00565b808552602093848087019260051b8501019383851161053557858101925b858410610ced575050505050505090565b833567ffffffffffffffff811161053557820185603f82011215610535578791610d1f87838786809601359101610c50565b815201930192610cdc565b90600182811c92168015610d5a575b6020831014610d4457565b634e487b7160e01b600052602260045260246000fd5b91607f1691610d39565b919082519283825260005b848110610d90575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610d6f565b6000546001600160a01b03163303610db857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b8051821015610e105760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b91610e3e604092959495606085526060850190610d64565b6001600160a01b039182166020850152941691015256fea264697066735822122072cae748f2e7c5ff6e84a01318771c63d683f2cd47e58cf97cc7d8c9ab0963e764736f6c63430008130033",
  "devdoc": {
    "author": "0nika0",
    "details": "This contract manages the consolidation of transactions and products, allowing users to create and interact with modules. It enables users to consolidate multiple transactions into one and create products through modules.",
    "events": {
      "CreateBuild(uint256,address,uint256)": {
        "details": "An event emitted when a build or product is created.  This event is triggered when a user creates a new build or product, and it provides information about the build ID, the user who created it, and the product type associated with the build. ",
        "params": {
          "buildID": "The unique identifier for the created build.",
          "productType": "The type of product associated with the build.",
          "user": "The address of the user who created the build."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "consolidationOfTransactions((address,string)[],bytes[],bytes[],uint256)": {
        "details": "This external function allows users to consolidate and execute multiple transactions across different modules in a single call.  It takes an array of modules, parameters, and swap data, and executes the transactions sequentially.  The function ensures that the lengths of the arrays are equal and validates the required message value for each swap.",
        "params": {
          "moduleArray": "An array of Module structs representing the modules to interact with.",
          "parametersArray": "An array of encoded parameters for each module's transaction.",
          "productType": "The type of product or operation being performed.",
          "swapDataArray": "An array of encoded swap data for each module's transaction."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setExchanger(address)": {
        "details": "This external function allows the contract owner to set the address of the Exchanger contract.",
        "params": {
          "exchangerAddress": "The address of the Exchanger contract."
        }
      },
      "setModule(uint256,(address,string))": {
        "details": "This external function allows the contract owner to set a module's data at a specific index.",
        "params": {
          "index": "The index at which to set the module.",
          "modData": "The module data to set."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawERC20(address,address,uint256)": {
        "details": "This external function allows the contract owner to withdraw ERC20 tokens to a specified user address.",
        "params": {
          "amount": "The amount of tokens to withdraw.",
          "token": "The address of the ERC20 token contract.",
          "user": "The address of the user to receive the tokens."
        }
      },
      "withdrawETH(address,uint256)": {
        "details": "This external function allows the contract owner to withdraw Ether (ETH) to a specified user address.",
        "params": {
          "amount": "The amount of ETH to withdraw.",
          "user": "The address of the user to receive the ETH."
        }
      }
    },
    "title": "TxBuilder",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "consolidationOfTransactions((address,string)[],bytes[],bytes[],uint256)": {
        "notice": "Consolidate and execute multiple transactions in a single call."
      },
      "setExchanger(address)": {
        "notice": "Set the address of the Exchanger contract."
      },
      "setModule(uint256,(address,string))": {
        "notice": "Set a module at a specific index."
      },
      "withdrawERC20(address,address,uint256)": {
        "notice": "Withdraw ERC20 tokens to a specified user address."
      },
      "withdrawETH(address,uint256)": {
        "notice": "Withdraw Ether (ETH) to a specified user address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/TxBuilder.sol:TxBuilder",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 957,
        "contract": "contracts/TxBuilder.sol:TxBuilder",
        "label": "exchanger",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IExchanger)1249"
      },
      {
        "astId": 960,
        "contract": "contracts/TxBuilder.sol:TxBuilder",
        "label": "buildManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IBuildManager)868"
      },
      {
        "astId": 965,
        "contract": "contracts/TxBuilder.sol:TxBuilder",
        "label": "module",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Module)876_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IBuildManager)868": {
        "encoding": "inplace",
        "label": "contract IBuildManager",
        "numberOfBytes": "20"
      },
      "t_contract(IExchanger)1249": {
        "encoding": "inplace",
        "label": "contract IExchanger",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Module)876_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ITxBuilder.Module)",
        "numberOfBytes": "32",
        "value": "t_struct(Module)876_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Module)876_storage": {
        "encoding": "inplace",
        "label": "struct ITxBuilder.Module",
        "members": [
          {
            "astId": 873,
            "contract": "contracts/TxBuilder.sol:TxBuilder",
            "label": "moduleAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 875,
            "contract": "contracts/TxBuilder.sol:TxBuilder",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}