{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/exchanger/IExchanger.sol": {
      "content": "pragma solidity 0.8.19;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * SharwaFinance\n * Copyright (C) 2023 SharwaFinance\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\ninterface IExchanger {\n    // STRUCTS //\n\n    /**\n     * @dev A struct representing data related to token swaps.\n     * \n     * This struct encapsulates information necessary for token swaps, including the token path, input and output tokens,\n     * input amount, minimum expected output amount, flags to indicate whether tokens are ETH and if the swap should be executed.\n     * \n     * @param path The path of tokens to follow in the swap.\n     * @param tokenIn The address of the input token.\n     * @param tokenOut The address of the output token.\n     * @param amountIn The amount of input tokens to swap.\n     * @param amountOutMinimum The minimum amount of output tokens expected from the swap.\n     * @param isETH A boolean indicating whether the input token is ETH (true if it is).\n     * @param swap A boolean indicating whether the swap should be executed (true if it should).\n     */\n    struct ExchangeData {\n        bytes path;\n        address tokenIn;\n        address tokenOut;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        bool isETH;\n        bool swap;\n    }\n    \n    // EXTERNAL FUNCTIONS //\n\n    /**\n     * @dev Allows a trader to perform a swap operation or a direct token transfer between addresses.\n     * \n     * This function can be used by traders to perform token swaps through a decentralized exchange or directly transfer tokens between addresses.\n     * If the 'swap' flag in the provided data is set to true, a token swap is executed with specific details such as input and output tokens,\n     * minimum expected output, and other swap-related parameters. If the 'swap' flag is set to false, a direct token transfer is performed between 'from' and 'to'.\n     * \n     * @param data The encoded swap or transfer data that includes information about the operation.\n     * @param from The address from which tokens are transferred or swapped.\n     * @param to The address that receives the tokens in the transfer or swap operation.\n     * \n     * Requirements:\n     * - The caller must have the 'TRADER_ROLE'.\n     */\n    function swap(bytes memory data, address from, address to) external payable;\n\n    // PURE FUNCTIONS //\n\n    /**\n     * @dev Verifies if the provided `msg.value` matches the calculated value based on a series of swap operations.\n     * \n     * This function checks if the provided `msg.value` matches the calculated value obtained by summing the input amounts of ETH for each swap operation.\n     * It is used to ensure the correctness of `msg.value` when performing multiple swaps, preventing errors or discrepancies.\n     * \n     * @param swapDataArray An array of encoded swap data, each containing information about swap or transfer operations.\n     * @param msgValue The expected `msg.value` to be validated against the calculated value.\n     * \n     * Requirements:\n     * - The `msg.value` must match the calculated value based on the provided `swapDataArray`.\n     */\n    function checkMsgValue(bytes[] memory swapDataArray, uint256 msgValue) external pure;\n    \n    /**\n     * @dev Calculates the expected `msg.value` for a given swap operation encoded in swapData.\n     * \n     * This function calculates the expected `msg.value` based on the information provided in the swapData.\n     * It checks if the swap operation involves ETH and is indeed a swap (not just a transfer).\n     * If these conditions are met, it returns the calculated `msg.value`.\n     * \n     * @param swapData The encoded swap data that describes the swap operation.\n     * \n     * @return value The calculated `msg.value` for the swap operation. If it's not a swap involving ETH, the value is 0.\n     */\n    function calculateMsgValue(bytes memory swapData) external pure returns (uint256 value);\n    \n    /**\n     * @dev Encodes the ExchangeData struct into a bytes array.\n     * \n     * This function takes the ExchangeData struct as input and encodes it into a bytes array using ABI encoding.\n     * The resulting bytes array, `paramData`, can be used to store or transmit the struct's data.\n     * \n     * @param data The ExchangeData struct to be encoded.\n     * \n     * @return paramData The encoded data in the form of a bytes array.\n     */\n    function encodeFromExchange(ExchangeData memory data) external pure returns (bytes memory paramData);\n    \n    /**\n     * @dev Decodes the ExchangeData struct from a bytes array.\n     * \n     * This function decodes the ExchangeData struct from a given bytes array (`paramData`) using ABI decoding.\n     * The decoded struct, `data`, is returned for further use and processing.\n     * \n     * @param paramData The bytes array containing the encoded ExchangeData struct.\n     * \n     * @return data The decoded ExchangeData struct.\n     */\n    function decodeFromExchange(bytes memory paramData) external pure returns (ExchangeData memory data);\n}"
    },
    "contracts/IBaseTxBuilderOpen.sol": {
      "content": "pragma solidity 0.8.19;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * SharwaFinance\n * Copyright (C) 2023 SharwaFinance\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\ninterface IBaseTxBuilderOpen {\n    // PUBLIC FUNCTONS //\n\n    /**\n     * @notice Calculate the amount of a token based on provided parameters.\n     * @dev This function calculates the amount of a token based on a set of input parameters.\n     * @param parameters The encoded parameters for the calculation.\n     * @return token The address of the token to be calculated.\n     * @return amount The calculated amount of the token.\n     */\n    function calculateAmount(\n        bytes memory parameters\n    ) external view returns (\n        address token,\n        uint256 amount\n    ); \n\n     // EXTERNAL FUNCTIONS //\n\n    /**\n     * @notice Process a transaction for opening an option position.\n     * @dev This function processes a transaction for opening an option position based on the provided parameters.\n     * @param parametersArray The encoded parameters for opening the option position.\n     * @param buildID The unique identifier for the option position build.\n     * @param user The address of the user who is opening the option position.\n     */\n    function processTx(\n        bytes memory parametersArray,\n        uint256 buildID,\n        address user\n    ) external;\n\n\n\n}\n"
    },
    "contracts/IBuildManager.sol": {
      "content": "pragma solidity 0.8.19;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * SharwaFinance\n * Copyright (C) 2023 SharwaFinance\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\ninterface IBuildManager {\n    // OWNER FUNCTIONS //\n\n    /**\n     * @dev Allows the owner to set the address of the transaction builder contract.\n     * @param newTxBuilder The new address of the transaction builder contract.\n     */\n    function setTxBuilder(address newTxBuilder) external;\n\n    // VIEW FUNCTIONS //\n\n    /**\n     * @dev Retrieves the current build ID.\n     * @return uint256 The current build ID.\n     */\n    function getBuildID() external view returns (uint256);\n\n    // EXTERNAL FUNCTIONS //\n\n    /**\n     * @dev Increments the build ID externally, allowing the designated transaction builder contract to update it.\n     *      Requires the caller to be the set transaction builder contract to have access rights.\n     */\n    function increaseBuildID() external;\n}"
    },
    "contracts/ITxBuilder.sol": {
      "content": "pragma solidity 0.8.19;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * SharwaFinance\n * Copyright (C) 2023 SharwaFinance\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\ninterface ITxBuilder {\n    // STRUCTS //\n\n    /**\n     * @title Module\n     * @dev A structure representing a modular component.\n     * \n     * This structure is used to store information about a modular component, including its address and a human-readable name.\n     */\n    struct Module {\n        address moduleAddress; // The address of the module component.\n        string name;           // A human-readable name for the module.\n    }\n\n    // OWNER FUNCTIONS //\n\n    /**\n     * @notice Set the address of the Exchanger contract.\n     * @dev This external function allows the contract owner to set the address of the Exchanger contract.\n     * @param exchangerAddress The address of the Exchanger contract.\n     */\n    function setExchanger(address exchangerAddress) external;\n\n    /**\n     * @notice Set a module at a specific index.\n     * @dev This external function allows the contract owner to set a module's data at a specific index.\n     * @param index The index at which to set the module.\n     * @param modData The module data to set.\n     */\n    function setModule(uint256 index, Module calldata modData) external;\n\n    /**\n     * @notice Withdraw Ether (ETH) to a specified user address.\n     * @dev This external function allows the contract owner to withdraw Ether (ETH) to a specified user address.\n     * @param user The address of the user to receive the ETH.\n     * @param amount The amount of ETH to withdraw.\n     */\n    function withdrawETH(address user, uint256 amount) external;\n\n    /**\n     * @notice Withdraw ERC20 tokens to a specified user address.\n     * @dev This external function allows the contract owner to withdraw ERC20 tokens to a specified user address.\n     * @param token The address of the ERC20 token contract.\n     * @param user The address of the user to receive the tokens.\n     * @param amount The amount of tokens to withdraw.\n     */\n    function withdrawERC20(address token, address user, uint256 amount) external;\n\n    // EXTERNAL FUNCTIONS //\n\n    /**\n     * @notice Consolidate and execute multiple transactions in a single call.\n     * @dev This external function allows users to consolidate and execute multiple transactions across different modules in a single call. \n     * It takes an array of modules, parameters, and swap data, and executes the transactions sequentially. \n     * The function ensures that the lengths of the arrays are equal and validates the required message value for each swap.\n     * @param moduleArray An array of Module structs representing the modules to interact with.\n     * @param parametersArray An array of encoded parameters for each module's transaction.\n     * @param swapDataArray An array of encoded swap data for each module's transaction.\n     * @param productType The type of product or operation being performed.\n     */\n    function consolidationOfTransactions(\n        Module[] memory moduleArray, \n        bytes[] memory parametersArray,\n        bytes[] memory swapDataArray,  \n        uint256 productType\n    ) external payable;\n\n    // EVENTS //\n\n    /**\n     * @dev An event emitted when a build or product is created.\n     * \n     * This event is triggered when a user creates a new build or product, and it provides information about the build ID,\n     * the user who created it, and the product type associated with the build.\n     * \n     * @param buildID The unique identifier for the created build.\n     * @param user The address of the user who created the build.\n     * @param productType The type of product associated with the build.\n     */\n    event CreateBuild(\n        uint256 buildID,\n        address indexed user,\n        uint256 productType\n    );\n\n}"
    },
    "contracts/TxBuilder.sol": {
      "content": "pragma solidity 0.8.19;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * SharwaFinance\n * Copyright (C) 2023 SharwaFinance\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IBaseTxBuilderOpen} from \"./IBaseTxBuilderOpen.sol\";\nimport {IExchanger} from \"./exchanger/IExchanger.sol\";\nimport {ITxBuilder} from \"./ITxBuilder.sol\";\nimport {IBuildManager} from \"./IBuildManager.sol\";\n\n/**\n * @title TxBuilder\n * @author 0nika0\n * @dev This contract manages the consolidation of transactions and products, allowing users to create and interact with modules.\n * It enables users to consolidate multiple transactions into one and create products through modules.\n */\ncontract TxBuilder is Ownable, ITxBuilder {\n\n    IExchanger public exchanger;\n    IBuildManager public buildManager;\n\n    mapping(uint256 => Module) public module;\n\n    constructor(\n        address _exchanger,\n        address _buildManager\n    ) {\n        exchanger = IExchanger(_exchanger);\n        buildManager = IBuildManager(_buildManager);\n    }\n\n    // OWNER FUNCTIONS //\n\n    function setExchanger(address exchangerAddress) external onlyOwner {\n        exchanger = IExchanger(exchangerAddress);\n    }\n\n    function setModule(uint256 index, Module calldata modData) external onlyOwner {\n        module[index] = modData;\n    }\n\n    function withdrawETH(address user, uint256 amount) external onlyOwner {\n        payable(user).transfer(amount);\n    }\n\n    function withdrawERC20(address token, address user, uint256 amount) external onlyOwner {\n        ERC20(token).transfer(user, amount);\n    }\n\n    // EXTERNAL FUNCTIONS //\n\n    function consolidationOfTransactions(\n        Module[] memory moduleArray, \n        bytes[] memory parametersArray,\n        bytes[] memory swapDataArray,  \n        uint256 productType\n    ) external payable {\n        require(moduleArray.length == parametersArray.length && parametersArray.length == swapDataArray.length, \"arrays not equal\");\n\n        uint256 buildID = buildManager.getBuildID();\n        \n        exchanger.checkMsgValue(swapDataArray, msg.value);\n\n        for (uint i = 0; i < moduleArray.length; i++) {\n            uint256 msgValue = exchanger.calculateMsgValue(swapDataArray[i]);\n\n            if (msgValue == 0) {\n                exchanger.swap(swapDataArray[i], msg.sender, moduleArray[i].moduleAddress);\n            } else {\n                exchanger.swap{ value: msgValue }(swapDataArray[i], msg.sender, moduleArray[i].moduleAddress);\n            }    \n\n            IBaseTxBuilderOpen(moduleArray[i].moduleAddress).processTx(parametersArray[i], buildID, msg.sender);\n        }\n\n        emit CreateBuild(buildID, msg.sender, productType);\n        \n        buildManager.increaseBuildID();\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}