{
  "address": "0x74c9F3Fd89406DBf66cd856d7e5Baa790437d61b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_optionMarket",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_optionToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strikeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "iterations",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IOptionMarket.OptionType",
          "name": "optionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "setCollateralTo",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minTotalCost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxTotalCost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "OpenPositionByLyra",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "calculateAmount",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "name": "decodeFromLyra",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "strikeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "iterations",
              "type": "uint256"
            },
            {
              "internalType": "enum IOptionMarket.OptionType",
              "name": "optionType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "setCollateralTo",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minTotalCost",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxTotalCost",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            }
          ],
          "internalType": "struct IOptionMarket.TradeInputParameters",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "strikeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "iterations",
              "type": "uint256"
            },
            {
              "internalType": "enum IOptionMarket.OptionType",
              "name": "optionType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "setCollateralTo",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minTotalCost",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxTotalCost",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            }
          ],
          "internalType": "struct IOptionMarket.TradeInputParameters",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "encodeFromLyra",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "parametersArray",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "processTx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referrer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newReferrer",
          "type": "address"
        }
      ],
      "name": "setReferrer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x23090a62c0d128ff2b14eba7375194a4daab78f3d529bae3b36f521cf812b9ee",
  "receipt": {
    "to": null,
    "from": "0x8B57f3a9bDf2cfdBF9B2627ff8bEa86fB5641a50",
    "contractAddress": "0x74c9F3Fd89406DBf66cd856d7e5Baa790437d61b",
    "transactionIndex": 2,
    "gasUsed": "9803811",
    "logsBloom": "0x
    "blockHash": "0xe9678b0e9a4213a3a34c28505d142e94fa72e24a12042fbdb1d5720c05c5cf0d",
    "transactionHash": "0x23090a62c0d128ff2b14eba7375194a4daab78f3d529bae3b36f521cf812b9ee",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 164574267,
        "transactionHash": "0x23090a62c0d128ff2b14eba7375194a4daab78f3d529bae3b36f521cf812b9ee",
        "address": "0x74c9F3Fd89406DBf66cd856d7e5Baa790437d61b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b57f3a9bdf2cfdbf9b2627ff8bea86fb5641a50"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xe9678b0e9a4213a3a34c28505d142e94fa72e24a12042fbdb1d5720c05c5cf0d"
      }
    ],
    "blockNumber": 164574267,
    "cumulativeGasUsed": "11297459",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe044919cf58dFb066FC9DE7c69C7db19f336B20c",
    "0x0e97498F3d91756Ec7F2d244aC97F6Ea9f4eBbC3",
    "0x683ad8b899cd14d8e077c9a623e8b3fed65a8c09"
  ],
  "numDeployments": 1,
  "solcInputHash": "82e65d397ad98f35442f9bc6e2462d36",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_optionMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_optionToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strikeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IOptionMarket.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setCollateralTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTotalCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTotalCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"OpenPositionByLyra\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"calculateAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"name\":\"decodeFromLyra\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"strikeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"enum IOptionMarket.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setCollateralTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"internalType\":\"struct IOptionMarket.TradeInputParameters\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"strikeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"enum IOptionMarket.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setCollateralTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"internalType\":\"struct IOptionMarket.TradeInputParameters\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"encodeFromLyra\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"parametersArray\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"processTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReferrer\",\"type\":\"address\"}],\"name\":\"setReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0nika0\",\"events\":{\"OpenPositionByLyra(uint256,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,address,uint256)\":{\"details\":\"This event is emitted when a user opens a position using the Lyra protocol, recording important details of the transaction.\",\"params\":{\"amount\":\"The amount of the Lyra option.\",\"buildID\":\"The unique identifier for the Lyra option position build.\",\"iterations\":\"The number of iterations for the Lyra option.\",\"maxTotalCost\":\"The maximum total cost allowed for the option.\",\"minTotalCost\":\"The minimum total cost allowed for the option.\",\"optionType\":\"The type of the Lyra option (e.g., LONG_CALL, LONG_PUT, SHORT_CALL_BASE).\",\"positionId\":\"The identifier for the option position.\",\"referrer\":\"The referrer associated with the option transaction.\",\"setCollateralTo\":\"The collateral amount set for the option.\",\"strikeId\":\"The identifier for the strike price of the option.\",\"tokenID\":\"The unique identifier of the Lyra option token.\"}}},\"kind\":\"dev\",\"methods\":{\"allApprove()\":{\"details\":\"See {ITxBuilderOpenLyra-allApprove}.\"},\"calculateAmount(bytes)\":{\"details\":\"This public view function calculates the amount of a token based on a set of input parameters. It decodes the parameters, retrieves the necessary information from a Lyra strategy, and calculates the amount based on the option type and related factors.\",\"params\":{\"parameters\":\"The encoded parameters for the calculation.\"},\"returns\":{\"amount\":\"The calculated amount of the token.\",\"token\":\"The address of the token to be calculated.\"}},\"decodeFromLyra(bytes)\":{\"details\":\"See {ITxBuilderOpenLyra-decodeFromLyra}.\"},\"encodeFromLyra((uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,address))\":{\"details\":\"See {ITxBuilderOpenLyra-encodeFromLyra}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"processTx(bytes,uint256,address)\":{\"details\":\"See {IBaseTxBuilderOpen-processTx}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setReferrer(address)\":{\"details\":\"See {ITxBuilderOpenLyra-setReferrer}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"TxBuilderOpenLyra\",\"version\":1},\"userdoc\":{\"events\":{\"OpenPositionByLyra(uint256,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Emitted when a position is opened using the Lyra protocol.\"}},\"kind\":\"user\",\"methods\":{\"calculateAmount(bytes)\":{\"notice\":\"Calculate the amount of a token based on provided parameters.\"}},\"notice\":\"A contract for building and processing Lyra option transactions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lyra/TxBuilderOpenLyra.sol\":\"TxBuilderOpenLyra\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BaseTxBuilderOpen.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IBaseTxBuilderOpen} from \\\"./IBaseTxBuilderOpen.sol\\\";\\n\\n/**\\n * @title BaseTxBuilderOpen\\n * @author 0nika0\\n * @notice An abstract base contract for building and processing option transactions.\\n * @dev This contract provides the foundational structure for creating and processing option transactions. \\n * It includes functions to handle transaction processing and token amount calculation.\\n */\\nabstract contract BaseTxBuilderOpen is Ownable, IBaseTxBuilderOpen {\\n\\n    // PUBLIC FUNCTONS //\\n\\n    /**\\n     * @dev See {IBaseTxBuilderOpen-calculateAmount}.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) public view virtual returns (\\n        address token,\\n        uint256 amount\\n    ) {}\\n\\n    // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @dev See {IBaseTxBuilderOpen-processTx}.\\n     */\\n    function processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) external {\\n        _processTx(parametersArray, buildID, user);\\n    }\\n\\n    function onERC721Received(\\n        address, \\n        address, \\n        uint256, \\n        bytes calldata\\n    ) external returns(bytes4) {\\n        return bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"));\\n    } \\n\\n    // INTERNAL FUNCTIONS //\\n\\n    /**\\n     * @notice Internal function to process a transaction for opening an option position.\\n     * @dev This internal function processes a transaction for opening an option position based on the provided parameters.\\n     * @param parametersArray The encoded parameters for opening the option position.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param user The address of the user who is opening the option position.\\n     */\\n    function _processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0e2cc6f014638b522e38c7f8856199cde84665331d18a9947790b6ce6fb09313\",\"license\":\"GPL-3.0-or-later\"},\"contracts/IBaseTxBuilderOpen.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\n\\ninterface IBaseTxBuilderOpen {\\n    // PUBLIC FUNCTONS //\\n\\n    /**\\n     * @notice Calculate the amount of a token based on provided parameters.\\n     * @dev This function calculates the amount of a token based on a set of input parameters.\\n     * @param parameters The encoded parameters for the calculation.\\n     * @return token The address of the token to be calculated.\\n     * @return amount The calculated amount of the token.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) external view returns (\\n        address token,\\n        uint256 amount\\n    ); \\n\\n     // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @notice Process a transaction for opening an option position.\\n     * @dev This function processes a transaction for opening an option position based on the provided parameters.\\n     * @param parametersArray The encoded parameters for opening the option position.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param user The address of the user who is opening the option position.\\n     */\\n    function processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) external;\\n\\n\\n\\n}\\n\",\"keccak256\":\"0x73b18ed44e66dd7dfe5d1b58e946c8faf17727fcef6f5e389c130a80933369b5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lyra/IOptionMarket.sol\":{\"content\":\"pragma solidity ^0.8.3;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IOptionMarket {\\n    enum OptionType {\\n        LONG_CALL,\\n        LONG_PUT,\\n        SHORT_CALL_BASE,\\n        SHORT_CALL_QUOTE,\\n        SHORT_PUT_QUOTE\\n    }\\n\\n    struct Result {\\n        uint positionId;\\n        uint totalCost;\\n        uint totalFee;\\n    }\\n\\n    struct TradeInputParameters {\\n        // id of strike\\n        uint strikeId;\\n        // OptionToken ERC721 id for position (set to 0 for new positions)\\n        uint positionId;\\n        // number of sub-orders to break order into (reduces slippage)\\n        uint iterations;\\n        // type of option to trade\\n        OptionType optionType;\\n        // number of contracts to trade\\n        uint amount;\\n        // final amount of collateral to leave in OptionToken position\\n        uint setCollateralTo;\\n        // revert trade if totalCost is below this value\\n        uint minTotalCost;\\n        // revert trade if totalCost is above this value\\n        uint maxTotalCost;\\n        // referrer emitted in Trade event, no on-chain interaction\\n        address referrer;\\n    }\\n\\n    function openPosition(TradeInputParameters memory params) external returns (Result memory result);\\n    function closePosition(TradeInputParameters memory params) external returns (Result memory result);\\n    function quoteAsset() external view returns(ERC20);\\n    function baseAsset() external view returns(ERC20);\\n}\",\"keccak256\":\"0x35ee0a81acdb4e3abfc496ba55982e71d5b0d0a992d2736a19a2b958862eac2a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lyra/IOptionToken.sol\":{\"content\":\"pragma solidity ^0.8.3;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IOptionToken is IERC721 {\\n    function nextId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9ebb31691b8a685c974af09246e620f1f8004c10e4e032e1f4083f71e1abf3fb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lyra/ITxBuilderOpenLyra.sol\":{\"content\":\"pragma solidity ^0.8.3;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {IOptionMarket} from \\\"./IOptionMarket.sol\\\";\\n\\ninterface ITxBuilderOpenLyra {\\n\\n    // OWNER FUNCTIONS //\\n\\n    /**\\n     * @notice Set a new referrer address.\\n     * @dev This external function allows the owner to update the referrer address associated with the contract.\\n     * @param newReferrer The new address to set as the referrer.\\n     */\\n    function setReferrer(address newReferrer) external;\\n\\n    // EXTERNAL FUNCTIONS //  \\n\\n    /**\\n     * @notice Grants an unlimited approval for assets to be used in the OptionMarket.\\n     * @dev This external function allows the contract owner to grant an unlimited approval for the quote asset and base asset to be used within the OptionMarket contract. \\n     * It sets the approval amount to the maximum possible value, allowing the OptionMarket to interact with these assets without needing further approvals.\\n     */\\n    function allApprove() external;\\n\\n    // PURE FUNCTIONS //\\n\\n    /**\\n     * @notice Encodes parameters for interacting with a Lyra option strategy.\\n     * @dev This external function encodes the provided trade input parameters into a bytes array for interactions with a Lyra option strategy.\\n     * @param params The trade input parameters to encode.\\n     * @return paramData The encoded parameters as a bytes array.\\n     */\\n    function encodeFromLyra(IOptionMarket.TradeInputParameters memory params) external pure returns (bytes memory paramData);\\n\\n    /**\\n     * @notice Decodes parameters from an encoded byte array.\\n     * @dev This public function decodes an encoded byte array containing trade input parameters related to a Lyra option strategy.\\n     * @param paramData The encoded parameters as a bytes array.\\n     * @return params The decoded trade input parameters.\\n     */\\n    function decodeFromLyra(bytes memory paramData) external pure returns (IOptionMarket.TradeInputParameters memory params);\\n\\n    // EVENTS //\\n\\n    /**\\n     * @notice Emitted when a position is opened using the Lyra protocol.\\n     * @dev This event is emitted when a user opens a position using the Lyra protocol, recording important details of the transaction.\\n     * @param buildID The unique identifier for the Lyra option position build.\\n     * @param strikeId The identifier for the strike price of the option.\\n     * @param positionId The identifier for the option position.\\n     * @param iterations The number of iterations for the Lyra option.\\n     * @param optionType The type of the Lyra option (e.g., LONG_CALL, LONG_PUT, SHORT_CALL_BASE).\\n     * @param amount The amount of the Lyra option.\\n     * @param setCollateralTo The collateral amount set for the option.\\n     * @param minTotalCost The minimum total cost allowed for the option.\\n     * @param maxTotalCost The maximum total cost allowed for the option.\\n     * @param referrer The referrer associated with the option transaction.\\n     * @param tokenID The unique identifier of the Lyra option token.\\n     */\\n    event OpenPositionByLyra(\\n        uint256 indexed buildID,\\n        uint256 strikeId,\\n        uint256 positionId,\\n        uint256 iterations,\\n        IOptionMarket.OptionType optionType,\\n        uint256 amount,\\n        uint256 setCollateralTo,\\n        uint256 minTotalCost,\\n        uint256 maxTotalCost,\\n        address referrer,\\n        uint256 tokenID\\n    );\\n}\\n\",\"keccak256\":\"0x0c16b7c9ed63b9d4dc26b123c9c4bd1cc456f7e8ff426a263054771223425a2b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lyra/TxBuilderOpenLyra.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {BaseTxBuilderOpen, ERC20} from \\\"../BaseTxBuilderOpen.sol\\\";\\nimport {IOptionMarket} from \\\"./IOptionMarket.sol\\\";\\nimport {IOptionToken} from \\\"./IOptionToken.sol\\\";\\nimport {ITxBuilderOpenLyra} from \\\"./ITxBuilderOpenLyra.sol\\\";\\n\\n/**\\n * @title TxBuilderOpenLyra\\n * @author 0nika0\\n * @notice A contract for building and processing Lyra option transactions.\\n */\\ncontract TxBuilderOpenLyra is BaseTxBuilderOpen, ITxBuilderOpenLyra {\\n    \\n    address public optionMarket; \\n    address public optionToken; \\n    address public referrer;\\n\\n    constructor(\\n        address _optionMarket,\\n        address _optionToken,\\n        address _referrer\\n    ) {\\n        optionMarket = _optionMarket;\\n        optionToken = _optionToken;\\n        referrer = _referrer;\\n    }\\n\\n    // OWNER FUNCTIONS //\\n\\n    /**\\n     * @dev See {ITxBuilderOpenLyra-setReferrer}.\\n     */\\n    function setReferrer(address newReferrer) external onlyOwner {\\n        referrer = newReferrer;\\n    }\\n\\n    // EXTERNAL FUNCTIONS //  \\n\\n    /**\\n     * @dev See {ITxBuilderOpenLyra-allApprove}.\\n     */\\n    function allApprove() external {\\n        IOptionMarket(optionMarket).quoteAsset().approve(optionMarket, type(uint256).max);\\n        IOptionMarket(optionMarket).baseAsset().approve(optionMarket, type(uint256).max);\\n    }\\n\\n    // PUBLIC FUNCTIONS //  \\n\\n    /**\\n     * @notice Calculate the amount of a token based on provided parameters.\\n     * @dev This public view function calculates the amount of a token based on a set of input parameters.\\n     * It decodes the parameters, retrieves the necessary information from a Lyra strategy,\\n     * and calculates the amount based on the option type and related factors.\\n     * @param parameters The encoded parameters for the calculation.\\n     * @return token The address of the token to be calculated.\\n     * @return amount The calculated amount of the token.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) public view override returns (\\n        address token,\\n        uint256 amount\\n    ) {\\n        (\\n            IOptionMarket.TradeInputParameters memory params\\n        ) = decodeFromLyra(parameters);\\n\\n        if (params.optionType == IOptionMarket.OptionType.LONG_CALL || params.optionType == IOptionMarket.OptionType.LONG_PUT) {\\n            amount = params.maxTotalCost / (1e18 / 10 ** IOptionMarket(optionMarket).quoteAsset().decimals());\\n            token = address(IOptionMarket(optionMarket).quoteAsset());\\n        } else if (params.optionType == IOptionMarket.OptionType.SHORT_CALL_QUOTE || params.optionType == IOptionMarket.OptionType.SHORT_PUT_QUOTE) {\\n            amount = params.setCollateralTo / (1e18 / 10 ** IOptionMarket(optionMarket).quoteAsset().decimals());\\n            token = address(IOptionMarket(optionMarket).quoteAsset());\\n        } else if (params.optionType == IOptionMarket.OptionType.SHORT_CALL_BASE) {\\n            amount = params.setCollateralTo / (1e18 / 10 ** IOptionMarket(optionMarket).baseAsset().decimals());\\n            token = address(IOptionMarket(optionMarket).baseAsset());\\n        }\\n    }\\n\\n    // INTERNAL FUNCTIONS //   \\n\\n    /**\\n     * @notice Process a transaction for opening a Lyra option position.\\n     * @dev This internal function processes a transaction for opening a Lyra option position based on provided parameters.\\n     * It decodes the parameters, retrieves the necessary information from a Lyra strategy,\\n     * calculates the required Lyra asset, and performs the necessary actions to create and transfer the option token to the user.\\n     * @param parameters The encoded parameters for opening the option position.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param user The address of the user who is opening the option position.\\n     */\\n    function _processTx(\\n        bytes memory parameters,\\n        uint256 buildID,\\n        address user\\n    ) override internal {\\n        (\\n            IOptionMarket.TradeInputParameters memory params\\n        ) = decodeFromLyra(parameters);\\n\\n        params.referrer = referrer; \\n        \\n        (address lyraAsset,) = calculateAmount(parameters);\\n        \\n        uint256 id = IOptionToken(optionToken).nextId();\\n        \\n        IOptionMarket(optionMarket).openPosition(params);\\n        \\n        ERC20(lyraAsset).transfer(user, ERC20(lyraAsset).balanceOf(address(this)));\\n        \\n        IOptionToken(optionToken).transferFrom(address(this), user, id);\\n\\n        if (params.optionType == IOptionMarket.OptionType.SHORT_CALL_BASE) {\\n            IOptionMarket(optionMarket).quoteAsset().transfer(user, IOptionMarket(optionMarket).quoteAsset().balanceOf(address(this)));\\n        }\\n        \\n        emit OpenPositionByLyra(\\n            buildID,\\n            params.strikeId,\\n            params.positionId,\\n            params.iterations,\\n            params.optionType,\\n            params.amount,\\n            params.setCollateralTo,\\n            params.minTotalCost,\\n            params.maxTotalCost,\\n            params.referrer,\\n            id\\n        );\\n    }\\n\\n    // PURE FUNCTIONS //\\n\\n    /**\\n     * @dev See {ITxBuilderOpenLyra-encodeFromLyra}.\\n     */\\n    function encodeFromLyra(IOptionMarket.TradeInputParameters memory params) external pure returns (bytes memory paramData) {\\n        return abi.encode(params);\\n    }\\n\\n    /**\\n     * @dev See {ITxBuilderOpenLyra-decodeFromLyra}.\\n     */\\n    function decodeFromLyra(bytes memory paramData) public pure returns (IOptionMarket.TradeInputParameters memory params) {\\n        (\\n            params\\n        ) = abi.decode(paramData, (\\n            IOptionMarket.TradeInputParameters\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x0b2ee1d4efe6656ffc29aa4b8d868175f17ca733822d64af7c2fd2d04c9e4ea6\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080346100dc57601f6112ec38819003918201601f19168301916001600160401b038311848410176100e1578084926060946040528339810103126100dc57610047816100f7565b61005f6040610058602085016100f7565b93016100f7565b600080546001600160a01b03198082163390811784556040519691956001600160a01b0395948694859391908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a31685600154161760015516836002541617600255169060035416176003556111e0908161010c8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100dc5756fe608080604052600436101561001357600080fd5b600090813560e01c908163150b7a0214610b48575080632bab754b14610b1f5780632f63d89214610a2a5780633819137a146104cd57806368447c93146104a4578063715018a61461044a5780637531a64e146103f357806389f94c29146103a65780638da5cb5b1461037f578063a18a7bfc1461033a578063ad4bb908146101a6578063bb4a9f881461017d5763f2fde38b146100b057600080fd5b3461017a57602036600319011261017a576100c9610bbe565b6100d1610d13565b6001600160a01b0390811690811561012657600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b80fd5b503461017a578060031936011261017a576001546040516001600160a01b039091168152602090f35b503461017a578060031936011261017a5760015460405163fdf262b760e01b81526020916001600160a01b039081168383600481845afa92831561032f578593610310575b5060405163095ea7b360e01b91828252600482015284816044818987600019998a6024850152165af18015610305576102e8575b5060015460405163cdf456e160e01b815290831691868683600481875afa9485156102db57879560449483916102ae575b506040519788968795865260048601526024850152165af180156102a357610276578280f35b8161029592903d1061029c575b61028d8183610c07565b810190610d8a565b5038808280f35b503d610283565b6040513d85823e3d90fd5b6102ce9150873d89116102d4575b6102c68183610c07565b810190610d6b565b38610250565b503d6102bc565b50604051903d90823e3d90fd5b6102fe90853d871161029c5761028d8183610c07565b503861021f565b6040513d88823e3d90fd5b610328919350843d86116102d4576102c68183610c07565b91386101eb565b6040513d87823e3d90fd5b503461017a57602036600319011261017a57610354610bbe565b61035c610d13565b60018060a01b03166bffffffffffffffffffffffff60a01b600354161760035580f35b503461017a578060031936011261017a57546040516001600160a01b039091168152602090f35b503461017a57602036600319011261017a576004359067ffffffffffffffff821161017a576103ef6103e36103de3660048601610c29565b6110dc565b60405191829182610ca3565b0390f35b503461017a57602036600319011261017a576004359067ffffffffffffffff821161017a5761042d6104283660048501610c29565b610e02565b604080516001600160a01b03939093168352602083019190915290f35b503461017a578060031936011261017a57610463610d13565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461017a578060031936011261017a576003546040516001600160a01b039091168152602090f35b503461017a57606036600319011261017a5760043567ffffffffffffffff811161090a576104ff903690600401610c29565b6044356001600160a01b038116900361090a57600482610539610521846110dc565b6003546001600160a01b031661010082015293610e02565b5060025460405163186e33a360e21b81529360209185919082906001600160a01b03165afa928315610a1f5782936109eb575b506001546040516335b02ed160e21b81529060609082906001600160a01b031681868161059c8b60048301610ca3565b03925af180156102a357610964575b506040516370a0823160e01b81523060048201526020816024816001600160a01b0386165afa9081156102a357839161092d575b5060405163a9059cbb60e01b81526001600160a01b03604480358216600484015260248301939093529093602093859392849291165af180156108bb5761090e575b5060025483906001600160a01b0316803b1561090a576040516323b872dd60e01b8152306004820152604480356001600160a01b03166024830152810184905291908290606490829084905af180156108bb576108da575b5060608201805160058110156108c65760021461074d575b8251926020810151916040820151905160058110156107395760808301516106ed60a08501519260c08601519460e08701519661010060018060a01b0391015116976040519a8b5260208b015260408a01526060890190610c80565b608087015260a086015260c085015260e08401526101008301526101208201527f8650344f378c8df5446864351ca3e88677936be22fcf7b4d2254da11ce46875a61014060243592a280f35b634e487b7160e01b87526021600452602487fd5b60015460405163fdf262b760e01b80825286926001600160a01b031690602083600481855afa9283156108bb578493610899575b5060209060046040518094819382525afa9081156102a357602491602091859161087c575b506040516370a0823160e01b815230600482015292839182906001600160a01b03165afa9081156102a357839161083f575b5060405163a9059cbb60e01b81526001600160a01b03604480358216600484015260248301939093529093602093859392849291165af1801561032f57610820575b50610691565b6108389060203d60201161029c5761028d8183610c07565b503861081a565b9250506020823d602011610874575b8161085b60209383610c07565b8101031261086f57905185919060206107d8565b600080fd5b3d915061084e565b6108939150823d84116102d4576102c68183610c07565b386107a6565b60209193506108b490823d84116102d4576102c68183610c07565b9290610781565b6040513d86823e3d90fd5b634e487b7160e01b85526021600452602485fd5b67ffffffffffffffff81949294116108f6576040529138610679565b634e487b7160e01b82526041600452602482fd5b5080fd5b6109269060203d60201161029c5761028d8183610c07565b5038610621565b90506020813d60201161095c575b8161094860209383610c07565b81010312610958575160206105df565b8280fd5b3d915061093b565b9091506060813d6060116109e3575b8161098060609383610c07565b810103126109df576040519081606081011067ffffffffffffffff6060840111176109cb579060408087949360608401825280518452602081015160208501520151910152386105ab565b634e487b7160e01b86526041600452602486fd5b8480fd5b3d9150610973565b9092506020813d602011610a17575b81610a0760209383610c07565b8101031261090a5751913861056c565b3d91506109fa565b6040513d84823e3d90fd5b503461017a5761012036600319011261017a5760405190610a4a82610bd4565b60043582526020916024358382015260443560408201526064356005811015610958576060820152608435608082015260a43560a082015260c43560c082015260e43560e0820152610104356001600160a01b03811681036109585761010082015260405191908290610abf90858301610ca3565b03610ad2601f1991828101855284610c07565b604051938492818452845191828186015281955b838710610b065750506040945090601f9185828601015201168101030190f35b8681018201518888016040015295810195879550610ae6565b503461017a578060031936011261017a576002546040516001600160a01b039091168152602090f35b90503461090a57608036600319011261090a57610b63610bbe565b506024356001600160a01b0381160361090a5760643567ffffffffffffffff808211610bba5736602383011215610bba578160040135908111610bba573691016024011161090a57630a85bd0160e11b8152602090f35b8380fd5b600435906001600160a01b038216820361086f57565b610120810190811067ffffffffffffffff821117610bf157604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610bf157604052565b81601f8201121561086f5780359067ffffffffffffffff8211610bf15760405192610c5e601f8401601f191660200185610c07565b8284526020838301011161086f57816000926020809301838601378301015290565b906005821015610c8d5752565b634e487b7160e01b600052602160045260246000fd5b919091610120810192805182526020810151602083015260408101516040830152610cd660608201516060840190610c80565b6080818101519083015260a0808201519083015260c0808201519083015260e08082015190830152610100908101516001600160a01b0316910152565b6000546001600160a01b03163303610d2757565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b9081602091031261086f57516001600160a01b038116810361086f5790565b9081602091031261086f5751801515810361086f5790565b9081602091031261086f575160ff8116810361086f5790565b60ff16604d8111610dcc57600a0a90565b634e487b7160e01b600052601160045260246000fd5b8115610dec570490565b634e487b7160e01b600052601260045260246000fd5b600090600091610e1283926110dc565b9160608301805160058110156110b4571580156110c8575b15610f6f5750505060e001516001546040805163fdf262b760e01b808252946001600160a01b039492938516926020928381600481885afa908115610f4857879185918591610f52575b50600488518094819363313ce56760e01b8352165afa908115610f485790610ea3918491610f1b575b50610dbb565b8015610f07578391610ebf91670de0b6b3a76400000490610de2565b96600486518096819382525afa938415610efd575092610ee0575b50501691565b610ef69250803d106102d4576102c68183610c07565b3880610eda565b51903d90823e3d90fd5b634e487b7160e01b83526012600452602483fd5b610f3b9150853d8711610f41575b610f338183610c07565b810190610da2565b38610e9d565b503d610f29565b86513d85823e3d90fd5b610f699150823d84116102d4576102c68183610c07565b38610e74565b805160058110156110b45760031480156110a0575b15610ffb5750505060a001516001546040805163fdf262b760e01b808252946001600160a01b039492938516926020928381600481885afa908115610f4857879185918591610f525750600488518094819363313ce56760e01b8352165afa908115610f485790610ea3918491610f1b5750610dbb565b94929093919451600581101561108c57600214611016575050565b60a001516001546040805163cdf456e160e01b8082529597509495506001600160a01b0394909391851692602092918381600481885afa908115610f4857879185918591610f525750600488518094819363313ce56760e01b8352165afa908115610f485790610ea3918491610f1b5750610dbb565b634e487b7160e01b83526021600452602483fd5b50805160058110156110b457600414610f84565b634e487b7160e01b86526021600452602486fd5b50805160058110156110b457600114610e2a565b6040516110e881610bd4565b6000908181528160208201528160408201528160608201528160808201528160a08201528160c08201528160e082015281610100809201526101208084805181010312610958576040519361113c85610bd4565b602081015185526040810151602086015260608101516040860152608081015160058110156109df57606086015260a0810151608086015260c081015160a086015260e081015160c08601528281015160e086015201519160018060a01b038316830361017a57508201529056fea264697066735822122021a0bcba3e26f922582fa07cae6c696f52eccd9aae671763949356ec7763aa8a64736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "0nika0",
    "events": {
      "OpenPositionByLyra(uint256,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,address,uint256)": {
        "details": "This event is emitted when a user opens a position using the Lyra protocol, recording important details of the transaction.",
        "params": {
          "amount": "The amount of the Lyra option.",
          "buildID": "The unique identifier for the Lyra option position build.",
          "iterations": "The number of iterations for the Lyra option.",
          "maxTotalCost": "The maximum total cost allowed for the option.",
          "minTotalCost": "The minimum total cost allowed for the option.",
          "optionType": "The type of the Lyra option (e.g., LONG_CALL, LONG_PUT, SHORT_CALL_BASE).",
          "positionId": "The identifier for the option position.",
          "referrer": "The referrer associated with the option transaction.",
          "setCollateralTo": "The collateral amount set for the option.",
          "strikeId": "The identifier for the strike price of the option.",
          "tokenID": "The unique identifier of the Lyra option token."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allApprove()": {
        "details": "See {ITxBuilderOpenLyra-allApprove}."
      },
      "calculateAmount(bytes)": {
        "details": "This public view function calculates the amount of a token based on a set of input parameters. It decodes the parameters, retrieves the necessary information from a Lyra strategy, and calculates the amount based on the option type and related factors.",
        "params": {
          "parameters": "The encoded parameters for the calculation."
        },
        "returns": {
          "amount": "The calculated amount of the token.",
          "token": "The address of the token to be calculated."
        }
      },
      "decodeFromLyra(bytes)": {
        "details": "See {ITxBuilderOpenLyra-decodeFromLyra}."
      },
      "encodeFromLyra((uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,address))": {
        "details": "See {ITxBuilderOpenLyra-encodeFromLyra}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "processTx(bytes,uint256,address)": {
        "details": "See {IBaseTxBuilderOpen-processTx}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setReferrer(address)": {
        "details": "See {ITxBuilderOpenLyra-setReferrer}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "TxBuilderOpenLyra",
    "version": 1
  },
  "userdoc": {
    "events": {
      "OpenPositionByLyra(uint256,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,address,uint256)": {
        "notice": "Emitted when a position is opened using the Lyra protocol."
      }
    },
    "kind": "user",
    "methods": {
      "calculateAmount(bytes)": {
        "notice": "Calculate the amount of a token based on provided parameters."
      }
    },
    "notice": "A contract for building and processing Lyra option transactions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/lyra/TxBuilderOpenLyra.sol:TxBuilderOpenLyra",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6364,
        "contract": "contracts/lyra/TxBuilderOpenLyra.sol:TxBuilderOpenLyra",
        "label": "optionMarket",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6366,
        "contract": "contracts/lyra/TxBuilderOpenLyra.sol:TxBuilderOpenLyra",
        "label": "optionToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6368,
        "contract": "contracts/lyra/TxBuilderOpenLyra.sol:TxBuilderOpenLyra",
        "label": "referrer",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}