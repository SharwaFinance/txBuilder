{
  "address": "0x92DCa00556c34a17c6AC4CE8A0d0A01445326512",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getBuildID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increaseBuildID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTxBuilder",
          "type": "address"
        }
      ],
      "name": "setTxBuilder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "txBuilder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb6896027734636b724e10e0bd70d6f660903d3b87e9e5dc14a14570f230170ef",
  "receipt": {
    "to": null,
    "from": "0x8B57f3a9bDf2cfdBF9B2627ff8bEa86fB5641a50",
    "contractAddress": "0x92DCa00556c34a17c6AC4CE8A0d0A01445326512",
    "transactionIndex": 1,
    "gasUsed": "2702524",
    "logsBloom": "0x000000000000000000000000000000000000000000000000008000000000000000008000000000000000004000400000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000200000000000000000008000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x49a2805c0af83ba018ae6e7354e9ffe9bccc2eb337e9b702f218de5ca6fc96c5",
    "transactionHash": "0xb6896027734636b724e10e0bd70d6f660903d3b87e9e5dc14a14570f230170ef",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 164574136,
        "transactionHash": "0xb6896027734636b724e10e0bd70d6f660903d3b87e9e5dc14a14570f230170ef",
        "address": "0x92DCa00556c34a17c6AC4CE8A0d0A01445326512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b57f3a9bdf2cfdbf9b2627ff8bea86fb5641a50"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x49a2805c0af83ba018ae6e7354e9ffe9bccc2eb337e9b702f218de5ca6fc96c5"
      }
    ],
    "blockNumber": 164574136,
    "cumulativeGasUsed": "2702524",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "69940414021e249ee89094cf8aaab651",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getBuildID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseBuildID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTxBuilder\",\"type\":\"address\"}],\"name\":\"setTxBuilder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txBuilder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0nika0\",\"details\":\"A contract that manages the build ID generation and assignment for transactions.      It allows the owner to set the transaction builder contract and provides functions      to retrieve the current build ID and increment it externally, ensuring proper access control.\",\"kind\":\"dev\",\"methods\":{\"getBuildID()\":{\"details\":\"Retrieves the current build ID.\",\"returns\":{\"_0\":\"uint256 The current build ID.\"}},\"increaseBuildID()\":{\"details\":\"Increments the build ID externally, allowing the designated transaction builder contract to update it.      Requires the caller to be the set transaction builder contract to have access rights.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setTxBuilder(address)\":{\"details\":\"Allows the owner to set the address of the transaction builder contract.\",\"params\":{\"newTxBuilder\":\"The new address of the transaction builder contract.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"BuildManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BuildManager.sol\":\"BuildManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BuildManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IBuildManager} from \\\"./IBuildManager.sol\\\";\\n\\n/**\\n * @title BuildManager\\n * @author 0nika0\\n * @dev A contract that manages the build ID generation and assignment for transactions.\\n *      It allows the owner to set the transaction builder contract and provides functions\\n *      to retrieve the current build ID and increment it externally, ensuring proper access control.\\n */\\ncontract BuildManager is Ownable, IBuildManager {\\n\\n    uint256 private nextBuildID = 1;\\n    address public txBuilder;\\n\\n    // OWNER FUNCTIONS //\\n\\n    function setTxBuilder(address newTxBuilder) external onlyOwner {\\n        txBuilder = newTxBuilder;\\n    }\\n\\n    // VIEW FUNCTIONS //\\n\\n    function getBuildID() external view returns (uint256) {\\n        return nextBuildID;\\n    }\\n\\n    // EXTERNAL FUNCTIONS //\\n\\n    function increaseBuildID() external {\\n        require(msg.sender == txBuilder, \\\"you do not have access rights\\\");\\n        nextBuildID++;\\n    }\\n}\\n\",\"keccak256\":\"0x82e478603f85af524f0d66d26bfdc267dc7c022cd20569e07f3cf447eed6555f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/IBuildManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\ninterface IBuildManager {\\n    // OWNER FUNCTIONS //\\n\\n    /**\\n     * @dev Allows the owner to set the address of the transaction builder contract.\\n     * @param newTxBuilder The new address of the transaction builder contract.\\n     */\\n    function setTxBuilder(address newTxBuilder) external;\\n\\n    // VIEW FUNCTIONS //\\n\\n    /**\\n     * @dev Retrieves the current build ID.\\n     * @return uint256 The current build ID.\\n     */\\n    function getBuildID() external view returns (uint256);\\n\\n    // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @dev Increments the build ID externally, allowing the designated transaction builder contract to update it.\\n     *      Requires the caller to be the set transaction builder contract to have access rights.\\n     */\\n    function increaseBuildID() external;\\n}\",\"keccak256\":\"0x0c325cba82a5e5084ee230be000a5999c1068758f652f8eb78f294ed5860ed4d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080806040523461005f5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a36001805561036990816100658239f35b600080fdfe60808060405260048036101561001457600080fd5b600091823560e01c90816339feea831461024c57508063715018a6146101f2578063815662f3146101d45780638bd32511146101ab5780638da5cb5b14610181578063c671eacd146101395763f2fde38b1461006f57600080fd5b34610135576020366003190112610135576001600160a01b03813581811692908390036101315761009e6102db565b82156100de575082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60849060206040519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8380fd5b5080fd5b503461013557602036600319011261013557356001600160a01b03811690819003610135576101666102db565b6bffffffffffffffffffffffff60a01b600254161760025580f35b82346101a857806003193601126101a857546040516001600160a01b039091168152602090f35b80fd5b82346101a857806003193601126101a8576002546040516001600160a01b039091168152602090f35b82346101a857806003193601126101a8576020600154604051908152f35b82346101a857806003193601126101a85761020b6102db565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b839150346101355781600319360112610135576002546001600160a01b0316330361029a575060015460001981146102875760010160015580f35b506011602492634e487b7160e01b835252fd5b62461bcd60e51b8152602083820152601d60248201527f796f7520646f206e6f74206861766520616363657373207269676874730000006044820152606490fd5b6000546001600160a01b031633036102ef57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea26469706673582212206831daf749781f51d4583d55868368d25e725aafd42eaeb566f2f29ad8ef04df64736f6c63430008130033",
  "deployedBytecode": "0x60808060405260048036101561001457600080fd5b600091823560e01c90816339feea831461024c57508063715018a6146101f2578063815662f3146101d45780638bd32511146101ab5780638da5cb5b14610181578063c671eacd146101395763f2fde38b1461006f57600080fd5b34610135576020366003190112610135576001600160a01b03813581811692908390036101315761009e6102db565b82156100de575082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60849060206040519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8380fd5b5080fd5b503461013557602036600319011261013557356001600160a01b03811690819003610135576101666102db565b6bffffffffffffffffffffffff60a01b600254161760025580f35b82346101a857806003193601126101a857546040516001600160a01b039091168152602090f35b80fd5b82346101a857806003193601126101a8576002546040516001600160a01b039091168152602090f35b82346101a857806003193601126101a8576020600154604051908152f35b82346101a857806003193601126101a85761020b6102db565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b839150346101355781600319360112610135576002546001600160a01b0316330361029a575060015460001981146102875760010160015580f35b506011602492634e487b7160e01b835252fd5b62461bcd60e51b8152602083820152601d60248201527f796f7520646f206e6f74206861766520616363657373207269676874730000006044820152606490fd5b6000546001600160a01b031633036102ef57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea26469706673582212206831daf749781f51d4583d55868368d25e725aafd42eaeb566f2f29ad8ef04df64736f6c63430008130033",
  "devdoc": {
    "author": "0nika0",
    "details": "A contract that manages the build ID generation and assignment for transactions.      It allows the owner to set the transaction builder contract and provides functions      to retrieve the current build ID and increment it externally, ensuring proper access control.",
    "kind": "dev",
    "methods": {
      "getBuildID()": {
        "details": "Retrieves the current build ID.",
        "returns": {
          "_0": "uint256 The current build ID."
        }
      },
      "increaseBuildID()": {
        "details": "Increments the build ID externally, allowing the designated transaction builder contract to update it.      Requires the caller to be the set transaction builder contract to have access rights."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setTxBuilder(address)": {
        "details": "Allows the owner to set the address of the transaction builder contract.",
        "params": {
          "newTxBuilder": "The new address of the transaction builder contract."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "BuildManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/BuildManager.sol:BuildManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2748,
        "contract": "contracts/BuildManager.sol:BuildManager",
        "label": "nextBuildID",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2750,
        "contract": "contracts/BuildManager.sol:BuildManager",
        "label": "txBuilder",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}