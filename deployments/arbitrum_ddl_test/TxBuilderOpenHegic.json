{
  "address": "0x519225178c0751973CFE2783367039cf7AC1Ee61",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operationalTreasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_hegicErc721",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premuim",
          "type": "uint256"
        }
      ],
      "name": "OpenPositionByHegic",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "calculateAmount",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "name": "decodeFromHegic",
      "outputs": [
        {
          "internalType": "contract IHegicStrategy",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalCost",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "additional",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHegicStrategy",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalCost",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "additional",
          "type": "bytes[]"
        }
      ],
      "name": "encodeFromHegic",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hegicErc721",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operationalTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "parametersArray",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "processTx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe038a8d8e186d022ce2c5ed82e12b070bc45c0c702250dffd636bd049e93a1bc",
  "receipt": {
    "to": null,
    "from": "0x0641bc55DDAb3b9636e82CbF87EDE3c3c533039d",
    "contractAddress": "0x519225178c0751973CFE2783367039cf7AC1Ee61",
    "transactionIndex": 1,
    "gasUsed": "7097204",
    "logsBloom": "0x
    "blockHash": "0xb735c92d2242822cda5fa101674ef1d8b6632b0617af55e974b217a1ea516b2c",
    "transactionHash": "0xe038a8d8e186d022ce2c5ed82e12b070bc45c0c702250dffd636bd049e93a1bc",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 130090274,
        "transactionHash": "0xe038a8d8e186d022ce2c5ed82e12b070bc45c0c702250dffd636bd049e93a1bc",
        "address": "0x519225178c0751973CFE2783367039cf7AC1Ee61",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000641bc55ddab3b9636e82cbf87ede3c3c533039d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb735c92d2242822cda5fa101674ef1d8b6632b0617af55e974b217a1ea516b2c"
      }
    ],
    "blockNumber": 130090274,
    "cumulativeGasUsed": "7097204",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xec096ea6eB9aa5ea689b0CF00882366E92377371",
    "0x5Fe380D68fEe022d8acd42dc4D36FbfB249a76d5",
    "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8"
  ],
  "numDeployments": 2,
  "solcInputHash": "9020d27c0af171f5c892571046831cff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operationalTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hegicErc721\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premuim\",\"type\":\"uint256\"}],\"name\":\"OpenPositionByHegic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"calculateAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"name\":\"decodeFromHegic\",\"outputs\":[{\"internalType\":\"contract IHegicStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalCost\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"additional\",\"type\":\"bytes[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHegicStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalCost\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"additional\",\"type\":\"bytes[]\"}],\"name\":\"encodeFromHegic\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hegicErc721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationalTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"parametersArray\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"processTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/hegic/TxBuilderOpenHegic.sol\":\"TxBuilderOpenHegic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BaseTxBuilderOpen.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nabstract contract BaseTxBuilderOpen is Ownable {\\n\\n    function processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) external {\\n        _processTx(parametersArray, buildID, user);\\n    }\\n\\n    // Process a transaction\\n    function _processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) internal virtual {}\\n\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) public view virtual returns (\\n        address token,\\n        uint256 amount\\n    ) {}\\n\\n    function onERC721Received(\\n        address, \\n        address, \\n        uint256, \\n        bytes calldata\\n    ) external returns(bytes4) {\\n        return bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"));\\n    } \\n}\\n\",\"keccak256\":\"0x4776b9af05693b550053b7adc01241ade68e2de587696ce0e50437be512c756d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/hegic/IHegicStrategy.sol\":{\"content\":\"pragma solidity ^0.8.3;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2022 Hegic Protocol\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\ninterface IHegicStrategy {\\n    event SetLimit(uint256 limit);\\n\\n    event Acquired(\\n        uint256 indexed id,\\n        StrategyData data,\\n        uint256 negativepnl,\\n        uint256 positivepnl,\\n        uint256 period,\\n        bytes[] additional\\n    );\\n\\n    struct StrategyData {\\n        uint128 amount;\\n        uint128 strike;\\n    }\\n\\n    function strategyData(uint256 strategyID)\\n        external\\n        view\\n        returns (uint128 amount, uint128 strike);\\n\\n    function getLockedByStrategy() external view returns (uint256 amount);\\n\\n    function lockedLimit() external view returns (uint256 value);\\n\\n    function isPayoffAvailable(\\n        uint256 optID,\\n        address caller,\\n        address recipient\\n    ) external view returns (bool);\\n\\n    function getAvailableContracts(uint32 period, bytes[] calldata additional)\\n        external\\n        view\\n        returns (uint256 available);\\n\\n    function payOffAmount(uint256 optionID)\\n        external\\n        view\\n        returns (uint256 profit);\\n\\n    function calculateNegativepnlAndPositivepnl(\\n        uint256 amount,\\n        uint256 period,\\n        bytes[] calldata\\n    ) external view returns (uint128 negativepnl, uint128 positivepnl);\\n\\n    function create(\\n        uint256 id,\\n        address holder,\\n        uint256 amount,\\n        uint256 period,\\n        bytes[] calldata\\n    )\\n        external\\n        returns (\\n            uint32 expiration,\\n            uint256 positivePNL,\\n            uint256 negativePNL\\n        );\\n\\n    function connect() external;\\n\\n    function positionExpiration(uint256)\\n        external\\n        view\\n        returns (uint32 timestamp);\\n}\\n\",\"keccak256\":\"0x76560ef25ec8bcf9dc2170fcd555fbc42534b9de0b0b680afe49a4da62f0350c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/hegic/IOperationalTreasury.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\nimport \\\"./IHegicStrategy.sol\\\";\\n\\ninterface IOperationalTreasury {\\n    function buy(\\n        IHegicStrategy strategy,\\n        address holder,\\n        uint256 amount,\\n        uint256 period,\\n        bytes[] calldata additional\\n    ) external;\\n\\n    function payOff(uint256 positionID, address account) external;\\n}\\n\",\"keccak256\":\"0xd19bfff7bd434ccfeb9a03b88125168c86f5a9aacf46233fab387645998ff3e7\"},\"contracts/hegic/IPositionsManager.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IPositionsManager is IERC721 {\\n    function nextTokenId() external view returns (uint256);\\n}\",\"keccak256\":\"0x998a942f8a059ba1dec3ba08d32f0635ce08272983d516a8e0e2349fab4e3304\"},\"contracts/hegic/TxBuilderOpenHegic.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../BaseTxBuilderOpen.sol\\\";\\nimport \\\"./IHegicStrategy.sol\\\";\\nimport \\\"./IPositionsManager.sol\\\";\\nimport \\\"./IOperationalTreasury.sol\\\";\\n\\ncontract TxBuilderOpenHegic is BaseTxBuilderOpen {\\n\\n    address public operationalTreasury; // Address of operational treasury\\n    address public hegicErc721; // Address of Hegic ERC721 token contract\\n    address public usdc; // Address of USDC ERC20 token contract\\n\\n    // Constructor\\n    constructor(\\n        address _operationalTreasury,\\n        address _hegicErc721,\\n        address _usdc\\n    ) {\\n        operationalTreasury = _operationalTreasury;\\n        hegicErc721 = _hegicErc721;\\n        usdc = _usdc;\\n    }\\n\\n    // Event emitted when a position is opened using Hegic protocol\\n    event OpenPositionByHegic(\\n        uint256 indexed buildID,\\n        uint256 tokenID,\\n        address strategy,\\n        address holder,\\n        uint256 amount,\\n        uint256 period,\\n        uint256 premuim\\n    );\\n\\n    // Approve maximum spending limits for tokens used in the contract\\n    function allApprove() public {\\n        ERC20(usdc).approve(operationalTreasury, type(uint256).max);\\n    }   \\n\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) public view override returns (\\n        address token,\\n        uint256 amount\\n    ) {\\n        token = usdc;\\n        (\\n            IHegicStrategy strategy,\\n            ,\\n            uint256 amountHegic,\\n            uint256 period,\\n            uint256 maxTotalCost,\\n            bytes[] memory additional\\n        ) = decodeFromHegic(parameters);\\n        // Calculate the premium amount from positive pnl using the Hegic strategy\\n        (, uint128 positivepnl) = strategy.calculateNegativepnlAndPositivepnl(amountHegic, period, additional);\\n        require(uint256(positivepnl) <= maxTotalCost, \\\"maximum total value exceeded\\\");\\n        amount = uint256(positivepnl);\\n    }     \\n\\n    function _processTx(\\n        bytes memory parameters, \\n        uint256 buildID,\\n        address user\\n    ) internal override {\\n        (\\n            IHegicStrategy strategy,\\n            address holder,\\n            uint256 amount,\\n            uint256 period,\\n            ,\\n            bytes[] memory additional\\n        ) = decodeFromHegic(parameters);\\n        \\n        (, uint256 premium) = calculateAmount(parameters);\\n        \\n        // Get the next available ERC721 token ID\\n        uint256 id = IPositionsManager(hegicErc721).nextTokenId();\\n        \\n        // Buy the option using the operational treasury contract\\n        IOperationalTreasury(operationalTreasury).buy(\\n            strategy,\\n            holder,\\n            amount,\\n            period,\\n            additional\\n        );\\n        \\n        // Transfer ERC721 token representing the option to the sender\\n        IPositionsManager(hegicErc721).transferFrom(address(this), user, id);\\n        \\n        // Emit the OpenPositionByHegic event with relevant parameters\\n        emit OpenPositionByHegic(buildID, id, address(strategy), holder, amount, period, premium);\\n    }\\n\\n    // Encode Hegic parameters into bytes\\n    function encodeFromHegic(\\n        IHegicStrategy strategy,\\n        address holder,\\n        uint256 amount,\\n        uint256 period,\\n        uint256 maxTotalCost,\\n        bytes[] memory additional\\n    ) external pure returns (bytes memory paramData) {\\n        return abi.encode(strategy, holder, amount, period, maxTotalCost, additional);\\n    }\\n\\n    function decodeFromHegic(\\n        bytes memory paramData\\n    ) public pure returns (\\n        IHegicStrategy strategy,\\n        address holder,\\n        uint256 amount,\\n        uint256 period,\\n        uint256 maxTotalCost,\\n        bytes[] memory additional\\n    ) {\\n        (\\n            strategy,\\n            holder,\\n            amount,\\n            period,\\n            maxTotalCost,\\n            additional\\n        ) = abi.decode(paramData, (\\n            IHegicStrategy,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bytes[]\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x18d4ffb2c4f1ddaee737a58f19893eb378c9b997bf17c605326ed03d258858e8\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001ba338038062001ba3833981810160405281019062000037919062000259565b620000576200004b6200012360201b60201c565b6200012b60201b60201c565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620002b5565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022182620001f4565b9050919050565b620002338162000214565b81146200023f57600080fd5b50565b600081519050620002538162000228565b92915050565b600080600060608486031215620002755762000274620001ef565b5b6000620002858682870162000242565b9350506020620002988682870162000242565b9250506040620002ab8682870162000242565b9150509250925092565b6118de80620002c56000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80637531a64e116100715780637531a64e1461017b5780638da5cb5b146101ac578063ad4bb908146101ca578063d66aafa6146101d4578063f2b60d2a146101f2578063f2fde38b14610227576100b4565b806305395c20146100b9578063150b7a02146100d7578063169dc5d5146101075780633819137a146101375780633e413bee14610153578063715018a614610171575b600080fd5b6100c1610243565b6040516100ce9190610a36565b60405180910390f35b6100f160048036038101906100ec9190610b2c565b610269565b6040516100fe9190610bef565b60405180910390f35b610121600480360381019061011c9190610e6a565b610297565b60405161012e9190610f9b565b60405180910390f35b610151600480360381019061014c9190610fbd565b6102cf565b005b61015b6102df565b6040516101689190610a36565b60405180910390f35b610179610305565b005b6101956004803603810190610190919061102c565b610319565b6040516101a3929190611084565b60405180910390f35b6101b4610463565b6040516101c19190610a36565b60405180910390f35b6101d261048c565b005b6101dc610580565b6040516101e99190610a36565b60405180910390f35b61020c6004803603810190610207919061102c565b6105a6565b60405161021e96959493929190611218565b60405180910390f35b610241600480360381019061023c9190611280565b6105e5565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f150b7a023d4804d13e8c85fb27262cb750cf6ba9f9dd3bb30d90f482ceeb4b1f905095945050505050565b60608686868686866040516020016102b496959493929190611218565b60405160208183030381529060405290509695505050505050565b6102da838383610669565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61030d6108ab565b6103176000610929565b565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691506000806000806000610352886105a6565b955095509550955050945060008573ffffffffffffffffffffffffffffffffffffffff1663d666b4338686856040518463ffffffff1660e01b815260040161039c939291906112ad565b604080518083038186803b1580156103b357600080fd5b505afa1580156103c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103eb9190611333565b91505082816fffffffffffffffffffffffffffffffff161115610443576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043a906113d0565b60405180910390fd5b806fffffffffffffffffffffffffffffffff169650505050505050915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b815260040161052b929190611084565b602060405180830381600087803b15801561054557600080fd5b505af1158015610559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057d9190611428565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060006060868060200190518101906105c491906115e2565b809650819750829850839950849a50859b5050505050505091939550919395565b6105ed6108ab565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561065d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610654906116fd565b60405180910390fd5b61066681610929565b50565b600080600080600061067a886105a6565b9550509450945094509450600061069089610319565b9150506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375794a3c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106fd57600080fd5b505afa158015610711573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610735919061171d565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e5024d788888888886040518663ffffffff1660e01b815260040161079a95949392919061174a565b600060405180830381600087803b1580156107b457600080fd5b505af11580156107c8573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd308a846040518463ffffffff1660e01b815260040161082b939291906117a4565b600060405180830381600087803b15801561084557600080fd5b505af1158015610859573d6000803e3d6000fd5b50505050887fb58b8caf38f3a5fb1aa22a6ae38defcd6835d2efaf65952daa55d65c56ac4161828989898988604051610897969594939291906117db565b60405180910390a250505050505050505050565b6108b36109ed565b73ffffffffffffffffffffffffffffffffffffffff166108d1610463565b73ffffffffffffffffffffffffffffffffffffffff1614610927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091e90611888565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a20826109f5565b9050919050565b610a3081610a15565b82525050565b6000602082019050610a4b6000830184610a27565b92915050565b6000604051905090565b600080fd5b600080fd5b610a6e81610a15565b8114610a7957600080fd5b50565b600081359050610a8b81610a65565b92915050565b6000819050919050565b610aa481610a91565b8114610aaf57600080fd5b50565b600081359050610ac181610a9b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610aec57610aeb610ac7565b5b8235905067ffffffffffffffff811115610b0957610b08610acc565b5b602083019150836001820283011115610b2557610b24610ad1565b5b9250929050565b600080600080600060808688031215610b4857610b47610a5b565b5b6000610b5688828901610a7c565b9550506020610b6788828901610a7c565b9450506040610b7888828901610ab2565b935050606086013567ffffffffffffffff811115610b9957610b98610a60565b5b610ba588828901610ad6565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610be981610bb4565b82525050565b6000602082019050610c046000830184610be0565b92915050565b6000610c1582610a15565b9050919050565b610c2581610c0a565b8114610c3057600080fd5b50565b600081359050610c4281610c1c565b92915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c9182610c48565b810181811067ffffffffffffffff82111715610cb057610caf610c59565b5b80604052505050565b6000610cc3610a51565b9050610ccf8282610c88565b919050565b600067ffffffffffffffff821115610cef57610cee610c59565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff821115610d2057610d1f610c59565b5b610d2982610c48565b9050602081019050919050565b82818337600083830152505050565b6000610d58610d5384610d05565b610cb9565b905082815260208101848484011115610d7457610d73610d00565b5b610d7f848285610d36565b509392505050565b600082601f830112610d9c57610d9b610ac7565b5b8135610dac848260208601610d45565b91505092915050565b6000610dc8610dc384610cd4565b610cb9565b90508083825260208201905060208402830185811115610deb57610dea610ad1565b5b835b81811015610e3257803567ffffffffffffffff811115610e1057610e0f610ac7565b5b808601610e1d8982610d87565b85526020850194505050602081019050610ded565b5050509392505050565b600082601f830112610e5157610e50610ac7565b5b8135610e61848260208601610db5565b91505092915050565b60008060008060008060c08789031215610e8757610e86610a5b565b5b6000610e9589828a01610c33565b9650506020610ea689828a01610a7c565b9550506040610eb789828a01610ab2565b9450506060610ec889828a01610ab2565b9350506080610ed989828a01610ab2565b92505060a087013567ffffffffffffffff811115610efa57610ef9610a60565b5b610f0689828a01610e3c565b9150509295509295509295565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f4d578082015181840152602081019050610f32565b83811115610f5c576000848401525b50505050565b6000610f6d82610f13565b610f778185610f1e565b9350610f87818560208601610f2f565b610f9081610c48565b840191505092915050565b60006020820190508181036000830152610fb58184610f62565b905092915050565b600080600060608486031215610fd657610fd5610a5b565b5b600084013567ffffffffffffffff811115610ff457610ff3610a60565b5b61100086828701610d87565b935050602061101186828701610ab2565b925050604061102286828701610a7c565b9150509250925092565b60006020828403121561104257611041610a5b565b5b600082013567ffffffffffffffff8111156110605761105f610a60565b5b61106c84828501610d87565b91505092915050565b61107e81610a91565b82525050565b60006040820190506110996000830185610a27565b6110a66020830184611075565b9392505050565b6000819050919050565b60006110d26110cd6110c8846109f5565b6110ad565b6109f5565b9050919050565b60006110e4826110b7565b9050919050565b60006110f6826110d9565b9050919050565b611106816110eb565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061115482610f13565b61115e8185611138565b935061116e818560208601610f2f565b61117781610c48565b840191505092915050565b600061118e8383611149565b905092915050565b6000602082019050919050565b60006111ae8261110c565b6111b88185611117565b9350836020820285016111ca85611128565b8060005b8581101561120657848403895281516111e78582611182565b94506111f283611196565b925060208a019950506001810190506111ce565b50829750879550505050505092915050565b600060c08201905061122d60008301896110fd565b61123a6020830188610a27565b6112476040830187611075565b6112546060830186611075565b6112616080830185611075565b81810360a083015261127381846111a3565b9050979650505050505050565b60006020828403121561129657611295610a5b565b5b60006112a484828501610a7c565b91505092915050565b60006060820190506112c26000830186611075565b6112cf6020830185611075565b81810360408301526112e181846111a3565b9050949350505050565b60006fffffffffffffffffffffffffffffffff82169050919050565b611310816112eb565b811461131b57600080fd5b50565b60008151905061132d81611307565b92915050565b6000806040838503121561134a57611349610a5b565b5b60006113588582860161131e565b92505060206113698582860161131e565b9150509250929050565b600082825260208201905092915050565b7f6d6178696d756d20746f74616c2076616c756520657863656564656400000000600082015250565b60006113ba601c83611373565b91506113c582611384565b602082019050919050565b600060208201905081810360008301526113e9816113ad565b9050919050565b60008115159050919050565b611405816113f0565b811461141057600080fd5b50565b600081519050611422816113fc565b92915050565b60006020828403121561143e5761143d610a5b565b5b600061144c84828501611413565b91505092915050565b60008151905061146481610c1c565b92915050565b6000611475826109f5565b9050919050565b6114858161146a565b811461149057600080fd5b50565b6000815190506114a28161147c565b92915050565b6000815190506114b781610a9b565b92915050565b60006114d06114cb84610d05565b610cb9565b9050828152602081018484840111156114ec576114eb610d00565b5b6114f7848285610f2f565b509392505050565b600082601f83011261151457611513610ac7565b5b81516115248482602086016114bd565b91505092915050565b600061154061153b84610cd4565b610cb9565b9050808382526020820190506020840283018581111561156357611562610ad1565b5b835b818110156115aa57805167ffffffffffffffff81111561158857611587610ac7565b5b80860161159589826114ff565b85526020850194505050602081019050611565565b5050509392505050565b600082601f8301126115c9576115c8610ac7565b5b81516115d984826020860161152d565b91505092915050565b60008060008060008060c087890312156115ff576115fe610a5b565b5b600061160d89828a01611455565b965050602061161e89828a01611493565b955050604061162f89828a016114a8565b945050606061164089828a016114a8565b935050608061165189828a016114a8565b92505060a087015167ffffffffffffffff81111561167257611671610a60565b5b61167e89828a016115b4565b9150509295509295509295565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006116e7602683611373565b91506116f28261168b565b604082019050919050565b60006020820190508181036000830152611716816116da565b9050919050565b60006020828403121561173357611732610a5b565b5b6000611741848285016114a8565b91505092915050565b600060a08201905061175f60008301886110fd565b61176c6020830187610a27565b6117796040830186611075565b6117866060830185611075565b818103608083015261179881846111a3565b90509695505050505050565b60006060820190506117b96000830186610a27565b6117c66020830185610a27565b6117d36040830184611075565b949350505050565b600060c0820190506117f06000830189611075565b6117fd6020830188610a27565b61180a6040830187610a27565b6118176060830186611075565b6118246080830185611075565b61183160a0830184611075565b979650505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611872602083611373565b915061187d8261183c565b602082019050919050565b600060208201905081810360008301526118a181611865565b905091905056fea26469706673582212208e81baca818905331d6e79f3eec1cbd624941821e84740e699d9090dfdf86b0564736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80637531a64e116100715780637531a64e1461017b5780638da5cb5b146101ac578063ad4bb908146101ca578063d66aafa6146101d4578063f2b60d2a146101f2578063f2fde38b14610227576100b4565b806305395c20146100b9578063150b7a02146100d7578063169dc5d5146101075780633819137a146101375780633e413bee14610153578063715018a614610171575b600080fd5b6100c1610243565b6040516100ce9190610a36565b60405180910390f35b6100f160048036038101906100ec9190610b2c565b610269565b6040516100fe9190610bef565b60405180910390f35b610121600480360381019061011c9190610e6a565b610297565b60405161012e9190610f9b565b60405180910390f35b610151600480360381019061014c9190610fbd565b6102cf565b005b61015b6102df565b6040516101689190610a36565b60405180910390f35b610179610305565b005b6101956004803603810190610190919061102c565b610319565b6040516101a3929190611084565b60405180910390f35b6101b4610463565b6040516101c19190610a36565b60405180910390f35b6101d261048c565b005b6101dc610580565b6040516101e99190610a36565b60405180910390f35b61020c6004803603810190610207919061102c565b6105a6565b60405161021e96959493929190611218565b60405180910390f35b610241600480360381019061023c9190611280565b6105e5565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f150b7a023d4804d13e8c85fb27262cb750cf6ba9f9dd3bb30d90f482ceeb4b1f905095945050505050565b60608686868686866040516020016102b496959493929190611218565b60405160208183030381529060405290509695505050505050565b6102da838383610669565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61030d6108ab565b6103176000610929565b565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691506000806000806000610352886105a6565b955095509550955050945060008573ffffffffffffffffffffffffffffffffffffffff1663d666b4338686856040518463ffffffff1660e01b815260040161039c939291906112ad565b604080518083038186803b1580156103b357600080fd5b505afa1580156103c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103eb9190611333565b91505082816fffffffffffffffffffffffffffffffff161115610443576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043a906113d0565b60405180910390fd5b806fffffffffffffffffffffffffffffffff169650505050505050915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b815260040161052b929190611084565b602060405180830381600087803b15801561054557600080fd5b505af1158015610559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057d9190611428565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060006060868060200190518101906105c491906115e2565b809650819750829850839950849a50859b5050505050505091939550919395565b6105ed6108ab565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561065d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610654906116fd565b60405180910390fd5b61066681610929565b50565b600080600080600061067a886105a6565b9550509450945094509450600061069089610319565b9150506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375794a3c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106fd57600080fd5b505afa158015610711573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610735919061171d565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e5024d788888888886040518663ffffffff1660e01b815260040161079a95949392919061174a565b600060405180830381600087803b1580156107b457600080fd5b505af11580156107c8573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd308a846040518463ffffffff1660e01b815260040161082b939291906117a4565b600060405180830381600087803b15801561084557600080fd5b505af1158015610859573d6000803e3d6000fd5b50505050887fb58b8caf38f3a5fb1aa22a6ae38defcd6835d2efaf65952daa55d65c56ac4161828989898988604051610897969594939291906117db565b60405180910390a250505050505050505050565b6108b36109ed565b73ffffffffffffffffffffffffffffffffffffffff166108d1610463565b73ffffffffffffffffffffffffffffffffffffffff1614610927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091e90611888565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a20826109f5565b9050919050565b610a3081610a15565b82525050565b6000602082019050610a4b6000830184610a27565b92915050565b6000604051905090565b600080fd5b600080fd5b610a6e81610a15565b8114610a7957600080fd5b50565b600081359050610a8b81610a65565b92915050565b6000819050919050565b610aa481610a91565b8114610aaf57600080fd5b50565b600081359050610ac181610a9b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610aec57610aeb610ac7565b5b8235905067ffffffffffffffff811115610b0957610b08610acc565b5b602083019150836001820283011115610b2557610b24610ad1565b5b9250929050565b600080600080600060808688031215610b4857610b47610a5b565b5b6000610b5688828901610a7c565b9550506020610b6788828901610a7c565b9450506040610b7888828901610ab2565b935050606086013567ffffffffffffffff811115610b9957610b98610a60565b5b610ba588828901610ad6565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610be981610bb4565b82525050565b6000602082019050610c046000830184610be0565b92915050565b6000610c1582610a15565b9050919050565b610c2581610c0a565b8114610c3057600080fd5b50565b600081359050610c4281610c1c565b92915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c9182610c48565b810181811067ffffffffffffffff82111715610cb057610caf610c59565b5b80604052505050565b6000610cc3610a51565b9050610ccf8282610c88565b919050565b600067ffffffffffffffff821115610cef57610cee610c59565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff821115610d2057610d1f610c59565b5b610d2982610c48565b9050602081019050919050565b82818337600083830152505050565b6000610d58610d5384610d05565b610cb9565b905082815260208101848484011115610d7457610d73610d00565b5b610d7f848285610d36565b509392505050565b600082601f830112610d9c57610d9b610ac7565b5b8135610dac848260208601610d45565b91505092915050565b6000610dc8610dc384610cd4565b610cb9565b90508083825260208201905060208402830185811115610deb57610dea610ad1565b5b835b81811015610e3257803567ffffffffffffffff811115610e1057610e0f610ac7565b5b808601610e1d8982610d87565b85526020850194505050602081019050610ded565b5050509392505050565b600082601f830112610e5157610e50610ac7565b5b8135610e61848260208601610db5565b91505092915050565b60008060008060008060c08789031215610e8757610e86610a5b565b5b6000610e9589828a01610c33565b9650506020610ea689828a01610a7c565b9550506040610eb789828a01610ab2565b9450506060610ec889828a01610ab2565b9350506080610ed989828a01610ab2565b92505060a087013567ffffffffffffffff811115610efa57610ef9610a60565b5b610f0689828a01610e3c565b9150509295509295509295565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f4d578082015181840152602081019050610f32565b83811115610f5c576000848401525b50505050565b6000610f6d82610f13565b610f778185610f1e565b9350610f87818560208601610f2f565b610f9081610c48565b840191505092915050565b60006020820190508181036000830152610fb58184610f62565b905092915050565b600080600060608486031215610fd657610fd5610a5b565b5b600084013567ffffffffffffffff811115610ff457610ff3610a60565b5b61100086828701610d87565b935050602061101186828701610ab2565b925050604061102286828701610a7c565b9150509250925092565b60006020828403121561104257611041610a5b565b5b600082013567ffffffffffffffff8111156110605761105f610a60565b5b61106c84828501610d87565b91505092915050565b61107e81610a91565b82525050565b60006040820190506110996000830185610a27565b6110a66020830184611075565b9392505050565b6000819050919050565b60006110d26110cd6110c8846109f5565b6110ad565b6109f5565b9050919050565b60006110e4826110b7565b9050919050565b60006110f6826110d9565b9050919050565b611106816110eb565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061115482610f13565b61115e8185611138565b935061116e818560208601610f2f565b61117781610c48565b840191505092915050565b600061118e8383611149565b905092915050565b6000602082019050919050565b60006111ae8261110c565b6111b88185611117565b9350836020820285016111ca85611128565b8060005b8581101561120657848403895281516111e78582611182565b94506111f283611196565b925060208a019950506001810190506111ce565b50829750879550505050505092915050565b600060c08201905061122d60008301896110fd565b61123a6020830188610a27565b6112476040830187611075565b6112546060830186611075565b6112616080830185611075565b81810360a083015261127381846111a3565b9050979650505050505050565b60006020828403121561129657611295610a5b565b5b60006112a484828501610a7c565b91505092915050565b60006060820190506112c26000830186611075565b6112cf6020830185611075565b81810360408301526112e181846111a3565b9050949350505050565b60006fffffffffffffffffffffffffffffffff82169050919050565b611310816112eb565b811461131b57600080fd5b50565b60008151905061132d81611307565b92915050565b6000806040838503121561134a57611349610a5b565b5b60006113588582860161131e565b92505060206113698582860161131e565b9150509250929050565b600082825260208201905092915050565b7f6d6178696d756d20746f74616c2076616c756520657863656564656400000000600082015250565b60006113ba601c83611373565b91506113c582611384565b602082019050919050565b600060208201905081810360008301526113e9816113ad565b9050919050565b60008115159050919050565b611405816113f0565b811461141057600080fd5b50565b600081519050611422816113fc565b92915050565b60006020828403121561143e5761143d610a5b565b5b600061144c84828501611413565b91505092915050565b60008151905061146481610c1c565b92915050565b6000611475826109f5565b9050919050565b6114858161146a565b811461149057600080fd5b50565b6000815190506114a28161147c565b92915050565b6000815190506114b781610a9b565b92915050565b60006114d06114cb84610d05565b610cb9565b9050828152602081018484840111156114ec576114eb610d00565b5b6114f7848285610f2f565b509392505050565b600082601f83011261151457611513610ac7565b5b81516115248482602086016114bd565b91505092915050565b600061154061153b84610cd4565b610cb9565b9050808382526020820190506020840283018581111561156357611562610ad1565b5b835b818110156115aa57805167ffffffffffffffff81111561158857611587610ac7565b5b80860161159589826114ff565b85526020850194505050602081019050611565565b5050509392505050565b600082601f8301126115c9576115c8610ac7565b5b81516115d984826020860161152d565b91505092915050565b60008060008060008060c087890312156115ff576115fe610a5b565b5b600061160d89828a01611455565b965050602061161e89828a01611493565b955050604061162f89828a016114a8565b945050606061164089828a016114a8565b935050608061165189828a016114a8565b92505060a087015167ffffffffffffffff81111561167257611671610a60565b5b61167e89828a016115b4565b9150509295509295509295565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006116e7602683611373565b91506116f28261168b565b604082019050919050565b60006020820190508181036000830152611716816116da565b9050919050565b60006020828403121561173357611732610a5b565b5b6000611741848285016114a8565b91505092915050565b600060a08201905061175f60008301886110fd565b61176c6020830187610a27565b6117796040830186611075565b6117866060830185611075565b818103608083015261179881846111a3565b90509695505050505050565b60006060820190506117b96000830186610a27565b6117c66020830185610a27565b6117d36040830184611075565b949350505050565b600060c0820190506117f06000830189611075565b6117fd6020830188610a27565b61180a6040830187610a27565b6118176060830186611075565b6118246080830185611075565b61183160a0830184611075565b979650505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611872602083611373565b915061187d8261183c565b602082019050919050565b600060208201905081810360008301526118a181611865565b905091905056fea26469706673582212208e81baca818905331d6e79f3eec1cbd624941821e84740e699d9090dfdf86b0564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/hegic/TxBuilderOpenHegic.sol:TxBuilderOpenHegic",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1241,
        "contract": "contracts/hegic/TxBuilderOpenHegic.sol:TxBuilderOpenHegic",
        "label": "operationalTreasury",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1243,
        "contract": "contracts/hegic/TxBuilderOpenHegic.sol:TxBuilderOpenHegic",
        "label": "hegicErc721",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1245,
        "contract": "contracts/hegic/TxBuilderOpenHegic.sol:TxBuilderOpenHegic",
        "label": "usdc",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}