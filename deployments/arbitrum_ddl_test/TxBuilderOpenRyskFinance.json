{
  "address": "0x351dFcEEd372bA14E15BBB930B5d9045C056a94a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "_wbtc",
          "type": "address"
        },
        {
          "internalType": "contract IBeyondPricer",
          "name": "_pricer",
          "type": "address"
        },
        {
          "internalType": "contract IOptionExchange",
          "name": "_optionExchange",
          "type": "address"
        },
        {
          "internalType": "contract IAlphaPortfolioValuesFeed",
          "name": "_portfolioValuesFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum ICombinedActions.OperationType",
              "name": "operation",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "actionType",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "secondAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "vaultId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint64",
                      "name": "expiration",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint128",
                      "name": "strike",
                      "type": "uint128"
                    },
                    {
                      "internalType": "bool",
                      "name": "isPut",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "underlying",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "strikeAsset",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "collateral",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct ITypes.OptionSeries",
                  "name": "optionSeries",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "indexOrAcceptablePremium",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ICombinedActions.ActionArgs[]",
              "name": "operationQueue",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct ICombinedActions.OperationProcedures[]",
          "name": "operationProcedures",
          "type": "tuple[]"
        }
      ],
      "name": "OpenPositionByRyskFinance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "calculateAmount",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "name": "decodeFromRyskFinance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ICombinedActions.OperationType",
              "name": "operation",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "actionType",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "secondAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "vaultId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint64",
                      "name": "expiration",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint128",
                      "name": "strike",
                      "type": "uint128"
                    },
                    {
                      "internalType": "bool",
                      "name": "isPut",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "underlying",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "strikeAsset",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "collateral",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct ITypes.OptionSeries",
                  "name": "optionSeries",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "indexOrAcceptablePremium",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ICombinedActions.ActionArgs[]",
              "name": "operationQueue",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ICombinedActions.OperationProcedures[]",
          "name": "operationProcedures",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ICombinedActions.OperationType",
              "name": "operation",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "actionType",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "secondAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "vaultId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint64",
                      "name": "expiration",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint128",
                      "name": "strike",
                      "type": "uint128"
                    },
                    {
                      "internalType": "bool",
                      "name": "isPut",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "underlying",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "strikeAsset",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "collateral",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct ITypes.OptionSeries",
                  "name": "optionSeries",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "indexOrAcceptablePremium",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ICombinedActions.ActionArgs[]",
              "name": "operationQueue",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ICombinedActions.OperationProcedures[]",
          "name": "operationProcedures",
          "type": "tuple[]"
        }
      ],
      "name": "encodeFromRyskFinance",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionExchange",
      "outputs": [
        {
          "internalType": "contract IOptionExchange",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioValuesFeed",
      "outputs": [
        {
          "internalType": "contract IAlphaPortfolioValuesFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricer",
      "outputs": [
        {
          "internalType": "contract IBeyondPricer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "parametersArray",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "processTx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wbtc",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1966782cc21b5a95d924fa04a20cf043a863eed5fae320196180cc0b5be966e8",
  "receipt": {
    "to": null,
    "from": "0x0641bc55DDAb3b9636e82CbF87EDE3c3c533039d",
    "contractAddress": "0x351dFcEEd372bA14E15BBB930B5d9045C056a94a",
    "transactionIndex": 1,
    "gasUsed": "27931429",
    "logsBloom": "0x
    "blockHash": "0xa477dda7976db476749b6ad7d172c6d3343a49df8ccd7e94326b9b238df29d12",
    "transactionHash": "0x1966782cc21b5a95d924fa04a20cf043a863eed5fae320196180cc0b5be966e8",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 161224927,
        "transactionHash": "0x1966782cc21b5a95d924fa04a20cf043a863eed5fae320196180cc0b5be966e8",
        "address": "0x351dFcEEd372bA14E15BBB930B5d9045C056a94a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000641bc55ddab3b9636e82cbf87ede3c3c533039d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa477dda7976db476749b6ad7d172c6d3343a49df8ccd7e94326b9b238df29d12"
      }
    ],
    "blockNumber": 161224927,
    "cumulativeGasUsed": "27931429",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaf88d065e77c8cC2239327C5EDb3A432268e5831",
    "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
    "0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f",
    "0xeA5Fb118862876f249Ff0b3e7fb25fEb38158def",
    "0xC117bf3103bd09552F9a721F0B8Bce9843aaE1fa",
    "0xc7abaec336098cd0dcd98b67cb14d3b18e1c68a8"
  ],
  "numDeployments": 13,
  "solcInputHash": "c92f49ad8eb08c288ec34498e482d325",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_wbtc\",\"type\":\"address\"},{\"internalType\":\"contract IBeyondPricer\",\"name\":\"_pricer\",\"type\":\"address\"},{\"internalType\":\"contract IOptionExchange\",\"name\":\"_optionExchange\",\"type\":\"address\"},{\"internalType\":\"contract IAlphaPortfolioValuesFeed\",\"name\":\"_portfolioValuesFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ICombinedActions.OperationType\",\"name\":\"operation\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"strike\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"internalType\":\"struct ITypes.OptionSeries\",\"name\":\"optionSeries\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"indexOrAcceptablePremium\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICombinedActions.ActionArgs[]\",\"name\":\"operationQueue\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct ICombinedActions.OperationProcedures[]\",\"name\":\"operationProcedures\",\"type\":\"tuple[]\"}],\"name\":\"OpenPositionByRyskFinance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"calculateAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"name\":\"decodeFromRyskFinance\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ICombinedActions.OperationType\",\"name\":\"operation\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"strike\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"internalType\":\"struct ITypes.OptionSeries\",\"name\":\"optionSeries\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"indexOrAcceptablePremium\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICombinedActions.ActionArgs[]\",\"name\":\"operationQueue\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ICombinedActions.OperationProcedures[]\",\"name\":\"operationProcedures\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ICombinedActions.OperationType\",\"name\":\"operation\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"strike\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"internalType\":\"struct ITypes.OptionSeries\",\"name\":\"optionSeries\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"indexOrAcceptablePremium\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICombinedActions.ActionArgs[]\",\"name\":\"operationQueue\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ICombinedActions.OperationProcedures[]\",\"name\":\"operationProcedures\",\"type\":\"tuple[]\"}],\"name\":\"encodeFromRyskFinance\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionExchange\",\"outputs\":[{\"internalType\":\"contract IOptionExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioValuesFeed\",\"outputs\":[{\"internalType\":\"contract IAlphaPortfolioValuesFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricer\",\"outputs\":[{\"internalType\":\"contract IBeyondPricer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"parametersArray\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"processTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0nika0\",\"events\":{\"OpenPositionByRyskFinance(uint256,address,(uint8,(uint256,address,address,address,uint256,uint256,(uint64,uint128,bool,address,address,address),uint256,bytes)[])[])\":{\"details\":\"This event, `OpenPositionByRyskFinance`, provides information about the specific transaction build identified by `buildID`, the involved `token` in the position, and an array of `OperationProcedures` representing the steps taken in the process. This event is useful for tracking and monitoring transactions related to opening positions initiated by Rysk Finance.\",\"params\":{\"buildID\":\"The unique identifier for the transaction build associated with the opened position.\",\"operationProcedures\":\"An array of `OperationProcedures` representing the steps taken in the process of opening the position.\",\"token\":\"The address of the token involved in the opened position.\"}}},\"kind\":\"dev\",\"methods\":{\"allApprove()\":{\"details\":\"See {ITxBuilderOpenRyskFinance-allApprove}.\"},\"calculateAmount(bytes)\":{\"details\":\"This public view function `calculateAmount` takes encoded parameters from Rysk Finance and decodes them to determine the token and amount involved in the specified Rysk operations. The decoded parameters represent a series of actions (operation procedures) related to Rysk Finance.\",\"params\":{\"parameters\":\"Encoded parameters containing Rysk Finance operation details.\"},\"returns\":{\"amount\":\"The total amount associated with the specified Rysk operations.\",\"token\":\"The address of the token involved in the Rysk operations.\"}},\"decodeFromRyskFinance(bytes)\":{\"details\":\"See {ITxBuilderOpenRyskFinance-decodeFromRyskFinance}.\"},\"encodeFromRyskFinance((uint8,(uint256,address,address,address,uint256,uint256,(uint64,uint128,bool,address,address,address),uint256,bytes)[])[])\":{\"details\":\"See {ITxBuilderOpenRyskFinance-encodeFromRyskFinance}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"processTx(bytes,uint256,address)\":{\"details\":\"See {IBaseTxBuilderOpen-processTx}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Rysk Finance Transaction Builder - Open Position\",\"version\":1},\"userdoc\":{\"events\":{\"OpenPositionByRyskFinance(uint256,address,(uint8,(uint256,address,address,address,uint256,uint256,(uint64,uint128,bool,address,address,address),uint256,bytes)[])[])\":{\"notice\":\"Emitted to signal the successful opening of a position by Rysk Finance.\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"A contract facilitating the opening of positions on the Rysk Finance protocol.          It provides functions to calculate transaction amounts, process transactions, and manage approvals.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/risk_finance/TxBuilderOpenRyskFinance.sol\":\"TxBuilderOpenRyskFinance\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BaseTxBuilderOpen.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IBaseTxBuilderOpen} from \\\"./IBaseTxBuilderOpen.sol\\\";\\n\\n/**\\n * @title BaseTxBuilderOpen\\n * @author 0nika0\\n * @notice An abstract base contract for building and processing option transactions.\\n * @dev This contract provides the foundational structure for creating and processing option transactions. \\n * It includes functions to handle transaction processing and token amount calculation.\\n */\\nabstract contract BaseTxBuilderOpen is Ownable, IBaseTxBuilderOpen {\\n\\n    // PUBLIC FUNCTONS //\\n\\n    /**\\n     * @dev See {IBaseTxBuilderOpen-calculateAmount}.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) public view virtual returns (\\n        address token,\\n        uint256 amount\\n    ) {}\\n\\n    // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @dev See {IBaseTxBuilderOpen-processTx}.\\n     */\\n    function processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) external {\\n        _processTx(parametersArray, buildID, user);\\n    }\\n\\n    function onERC721Received(\\n        address, \\n        address, \\n        uint256, \\n        bytes calldata\\n    ) external returns(bytes4) {\\n        return bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"));\\n    } \\n\\n    // INTERNAL FUNCTIONS //\\n\\n    /**\\n     * @notice Internal function to process a transaction for opening an option position.\\n     * @dev This internal function processes a transaction for opening an option position based on the provided parameters.\\n     * @param parametersArray The encoded parameters for opening the option position.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param user The address of the user who is opening the option position.\\n     */\\n    function _processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0e2cc6f014638b522e38c7f8856199cde84665331d18a9947790b6ce6fb09313\",\"license\":\"GPL-3.0-or-later\"},\"contracts/IBaseTxBuilderOpen.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\n\\ninterface IBaseTxBuilderOpen {\\n    // PUBLIC FUNCTONS //\\n\\n    /**\\n     * @notice Calculate the amount of a token based on provided parameters.\\n     * @dev This function calculates the amount of a token based on a set of input parameters.\\n     * @param parameters The encoded parameters for the calculation.\\n     * @return token The address of the token to be calculated.\\n     * @return amount The calculated amount of the token.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) external view returns (\\n        address token,\\n        uint256 amount\\n    ); \\n\\n     // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @notice Process a transaction for opening an option position.\\n     * @dev This function processes a transaction for opening an option position based on the provided parameters.\\n     * @param parametersArray The encoded parameters for opening the option position.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param user The address of the user who is opening the option position.\\n     */\\n    function processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) external;\\n\\n\\n\\n}\\n\",\"keccak256\":\"0x73b18ed44e66dd7dfe5d1b58e946c8faf17727fcef6f5e389c130a80933369b5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/IAlphaPortfolioValuesFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\ninterface IAlphaPortfolioValuesFeed {\\n\\tfunction netDhvExposure(bytes32) external view returns(int256);\\n}\\n\",\"keccak256\":\"0x2a044eea0a08668bcffc5b3458640098fab730de91851f0405419a60504efc2c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/IBeyondPricer.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {ITypes} from \\\"./ITypes.sol\\\";\\n\\ninterface IBeyondPricer {\\n\\tfunction quoteOptionPrice(\\n\\t\\tITypes.OptionSeries memory _optionSeries,\\n\\t\\tuint256 _amount,\\n\\t\\tbool isSell,\\n\\t\\tint256 netDhvExposure\\n\\t) external view returns (uint256 totalPremium, int256 totalDelta, uint256 totalFees);\\n}\\n\",\"keccak256\":\"0xbb19fd170ac68193fa0c6c7c0e7d0e55027cd30734b1362f9c7ff1467bc06070\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/ICombinedActions.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {ITypes} from \\\"./ITypes.sol\\\";\\n\\ninterface ICombinedActions {\\n\\tenum OperationType {\\n\\t\\tOPYN,\\n\\t\\tRYSK\\n\\t}\\n\\n\\tstruct OperationProcedures {\\n\\t\\tOperationType operation;\\n\\t\\tActionArgs[] operationQueue;\\n\\t}\\n\\n    struct ActionArgs {\\n        // type of action that is being performed on the system\\n        uint256 actionType;\\n        // address of the account owner\\n        address owner;\\n        // address which we move assets from or to (depending on the action type)\\n        address secondAddress;\\n        // asset that is to be transfered\\n        address asset;\\n        // index of the vault that is to be modified (if any)\\n        uint256 vaultId;\\n        // amount of asset that is to be transfered\\n        uint256 amount;\\n        // option series (if any)\\n        ITypes.OptionSeries optionSeries;\\n        // each vault can hold multiple short / long / collateral assets but we are restricting the scope to only 1 of each in this version\\n        // OR for rysk actions it is the acceptable premium (if option is being sold to the dhv then the actual premium should be more than this number (i.e. max price),\\n        // if option is being bought from the dhv then the actual premium should be less than this number (i.e. max price))\\n        uint256 indexOrAcceptablePremium;\\n        // any other data that needs to be passed in for arbitrary function calls\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0x1ce69a16c49f6c4242d804c1ca7bf0868ddc201e98edb11b2575616f93f9120f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/IOptionExchange.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {ICombinedActions} from \\\"./ICombinedActions.sol\\\";\\nimport {ITypes} from \\\"./ITypes.sol\\\";\\n\\ninterface IOptionExchange {\\n\\t/**\\n\\t * @notice entry point to the contract for users, takes a queue of actions for both opyn and rysk and executes them sequentially\\n\\t * @param  _operationProcedures an array of actions to be executed sequentially\\n\\t */\\n\\tfunction operate(\\n\\t\\tICombinedActions.OperationProcedures[] memory _operationProcedures\\n\\t) external;\\n\\n\\tfunction checkHash(\\n\\t\\tITypes.OptionSeries memory optionSeries,\\n\\t\\tuint128 strikeDecimalConverted,\\n\\t\\tbool isSell\\n\\t) external view returns (bytes32 oHash);\\n\\n\\tfunction getOptionDetails(\\n\\t\\taddress seriesAddress,\\n\\t\\tITypes.OptionSeries memory optionSeries\\n\\t) external view returns (address, ITypes.OptionSeries memory, uint128);\\n}\\n\",\"keccak256\":\"0x9e6b7ddfb8e12cf929c5777ad1215c262f8d12ead6010426fa122d32359ea17f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/ITxBuilderOpenRyskFinance.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {ICombinedActions} from \\\"./ICombinedActions.sol\\\";\\n\\ninterface ITxBuilderOpenRyskFinance {\\n\\n    // EXTERNAL FUNCTIONS //  \\n\\n    /**\\n     * @dev This external function `allApprove` is designed to approve a maximum amount of tokens\\n     * required for trading on a specific exchange. In this case, the function approves the maximum amount\\n     * of USDC, WETH, and WBTC tokens for use in transactions on the options exchange specified in the `optionExchange` variable.\\n     * \\n     * Note: Approving tokens allows the contract to perform operations with these tokens on behalf of the contract owner,\\n     * in this context, on behalf of the contract containing this function.\\n     */\\n    function allApprove() external;\\n\\n    // PURE FUNCTIONS //\\n\\n    /**\\n     * @dev This external function `encodeFromRyskFinance` takes an array of Rysk Finance operation procedures\\n     * and encodes them into a byte array. This encoded data can be used to pass Rysk Finance operation details\\n     * between contracts or external systems.\\n     *\\n     * @param operationProcedures An array of Rysk Finance operation procedures to be encoded.\\n     * @return paramData The encoded byte array representing the Rysk Finance operation procedures.\\n     */\\n    function encodeFromRyskFinance(\\n        ICombinedActions.OperationProcedures[] memory operationProcedures\\n    ) external pure returns (bytes memory paramData);\\n\\n    /**\\n     * @dev This public function `decodeFromRyskFinance` takes an encoded byte array containing Rysk Finance operation details\\n     * and decodes it into an array of operation procedures. This allows contracts to interpret and use Rysk Finance operations\\n     * encoded in external systems or passed as data.\\n     *\\n     * @param paramData The encoded byte array containing Rysk Finance operation details.\\n     * @return operationProcedures An array of decoded Rysk Finance operation procedures.\\n     */\\n    function decodeFromRyskFinance(\\n        bytes memory paramData\\n    ) external pure returns (\\n        ICombinedActions.OperationProcedures[] memory operationProcedures\\n    );\\n\\n    // EVENTS //\\n\\n    /**\\n     * @notice Emitted to signal the successful opening of a position by Rysk Finance.\\n     * @dev This event, `OpenPositionByRyskFinance`, provides information about the specific transaction build\\n     * identified by `buildID`, the involved `token` in the position, and an array of `OperationProcedures`\\n     * representing the steps taken in the process. This event is useful for tracking and monitoring transactions\\n     * related to opening positions initiated by Rysk Finance.\\n     * @param buildID The unique identifier for the transaction build associated with the opened position.\\n     * @param token The address of the token involved in the opened position.\\n     * @param operationProcedures An array of `OperationProcedures` representing the steps taken in the process of opening the position.\\n     */\\n    event OpenPositionByRyskFinance(\\n        uint256 indexed buildID,\\n        address token,\\n        ICombinedActions.OperationProcedures[] operationProcedures\\n    );\\n}\",\"keccak256\":\"0xe903c2c1f0573e52d09fe88db52fa94b9ce1db08e2095d311c95286cd210400e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/ITypes.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\ninterface ITypes {\\n\\tstruct OptionSeries {\\n\\t\\tuint64 expiration;\\n\\t\\tuint128 strike;\\n\\t\\tbool isPut;\\n\\t\\taddress underlying;\\n\\t\\taddress strikeAsset;\\n\\t\\taddress collateral;\\n\\t}\\n}\\n\",\"keccak256\":\"0xde2e9b8ac460c67c9c3a5784be5d8488921d8d9465d8c69e57548058d65ad500\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/TxBuilderOpenRyskFinance.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {BaseTxBuilderOpen, ERC20} from \\\"../BaseTxBuilderOpen.sol\\\";\\nimport {IBeyondPricer} from \\\"./IBeyondPricer.sol\\\";\\nimport {IOptionExchange} from \\\"./IOptionExchange.sol\\\";\\nimport {IAlphaPortfolioValuesFeed} from \\\"./IAlphaPortfolioValuesFeed.sol\\\";\\nimport {ICombinedActions, ITxBuilderOpenRyskFinance} from \\\"./ITxBuilderOpenRyskFinance.sol\\\";\\nimport {ITypes} from \\\"./ITypes.sol\\\";\\n\\n/**\\n * @title Rysk Finance Transaction Builder - Open Position\\n * @author 0nika0\\n * @notice A contract facilitating the opening of positions on the Rysk Finance protocol. \\n *         It provides functions to calculate transaction amounts, process transactions, and manage approvals.\\n */\\ncontract TxBuilderOpenRyskFinance is BaseTxBuilderOpen, ITxBuilderOpenRyskFinance {\\n    ERC20 public usdc;\\n    ERC20 public weth; \\n    ERC20 public wbtc; \\n\\n    IBeyondPricer public pricer;\\n    IOptionExchange public optionExchange; \\n    IAlphaPortfolioValuesFeed public portfolioValuesFeed;\\n\\n    constructor(\\n        ERC20 _usdc,\\n        ERC20 _weth, \\n        ERC20 _wbtc,\\n        IBeyondPricer _pricer,\\n        IOptionExchange _optionExchange,\\n        IAlphaPortfolioValuesFeed _portfolioValuesFeed\\n    ) {\\n        usdc = _usdc;\\n        weth = _weth; \\n        wbtc = _wbtc;\\n        pricer = _pricer;\\n        optionExchange = _optionExchange;\\n        portfolioValuesFeed = _portfolioValuesFeed;\\n    }\\n\\n    // EXTERNAL FUNCTIONS //  \\n\\n    /**\\n     * @dev See {ITxBuilderOpenRyskFinance-allApprove}.\\n     */\\n    function allApprove() external {\\n        usdc.approve(address(optionExchange), type(uint256).max);\\n        weth.approve(address(optionExchange), type(uint256).max);\\n        wbtc.approve(address(optionExchange), type(uint256).max);\\n    }   \\n\\n    // PUBLIC FUNCTIONS //  \\n\\n    /**\\n     * @dev This public view function `calculateAmount` takes encoded parameters from Rysk Finance and decodes them\\n     * to determine the token and amount involved in the specified Rysk operations. The decoded parameters represent\\n     * a series of actions (operation procedures) related to Rysk Finance.\\n     *\\n     * @param parameters Encoded parameters containing Rysk Finance operation details.\\n     * @return token The address of the token involved in the Rysk operations.\\n     * @return amount The total amount associated with the specified Rysk operations.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) public view override returns (\\n        address token,\\n        uint256 amount\\n    ) {\\n        (\\n            ICombinedActions.OperationProcedures[] memory operationProcedures\\n        ) = decodeFromRyskFinance(parameters);\\n\\n        address verificationAddress;\\n\\n        uint256 lenRyskActionArgs;\\n\\n        for (uint256 i; i < operationProcedures.length; i++) {\\n            if (operationProcedures[i].operation == ICombinedActions.OperationType.RYSK) {\\n                    lenRyskActionArgs++;\\n            }\\n        }\\n        \\n        ICombinedActions.ActionArgs[] memory ryskActionArgs = new ICombinedActions.ActionArgs[](lenRyskActionArgs);\\n\\n        for (uint256 i; i < lenRyskActionArgs; i++) {\\n            if (operationProcedures[i].operation == ICombinedActions.OperationType.RYSK) {\\n                for (uint256 index; index < operationProcedures[i].operationQueue.length; index++) {\\n                    ryskActionArgs[i] = operationProcedures[i].operationQueue[index];\\n                }\\n            }\\n        }\\n\\n        for (uint256 i; i < lenRyskActionArgs; i++) {\\n            if (ryskActionArgs[i].actionType == 1 || ryskActionArgs[i].actionType == 2) {\\n                address collateral = ryskActionArgs[i].optionSeries.collateral;\\n\\n                if (verificationAddress == address(0)) {\\n                    verificationAddress = collateral;\\n                }\\n\\n                require(collateral == verificationAddress, \\\"different collateral tokens\\\");\\n                token = collateral;\\n\\n                amount += ryskActionArgs[i].indexOrAcceptablePremium;\\n            }\\n        }\\n    }    \\n\\n    // INTERNAL FUNCTIONS //    \\n\\n    /**\\n     * @dev This internal function `_processTx` is responsible for processing a transaction based on Rysk Finance parameters.\\n     * It decodes the provided parameters, calculates the involved token and amount, performs operations on the options exchange,\\n     * transfers any remaining USDC, WETH, and WBTC balances back to the user, and emits an event to signal the opening of a position\\n     * by Rysk Finance.\\n     *\\n     * @param parameters Encoded parameters containing Rysk Finance operation details.\\n     * @param buildID Identifier for the build associated with the transaction.\\n     * @param user The address of the user initiating the transaction.\\n     */\\n    function _processTx(\\n        bytes memory parameters, \\n        uint256 buildID,\\n        address user\\n    ) internal override {\\n        (\\n            ICombinedActions.OperationProcedures[] memory operationProcedures\\n        ) = decodeFromRyskFinance(parameters);\\n        \\n        (address token, ) = calculateAmount(parameters);\\n        \\n        optionExchange.operate(operationProcedures);\\n\\n        uint256 balanceUSDC = ERC20(usdc).balanceOf(address(this));\\n        if (balanceUSDC != 0) {\\n            ERC20(usdc).transfer(user, balanceUSDC);\\n        }\\n\\n        uint256 balanceWETH = ERC20(weth).balanceOf(address(this));\\n        if (balanceWETH != 0) {\\n            ERC20(weth).transfer(user, balanceWETH);\\n        }\\n\\n        uint256 balanceWBTC = ERC20(wbtc).balanceOf(address(this));\\n        if (balanceWBTC != 0) {\\n            ERC20(wbtc).transfer(user, balanceWBTC);\\n        }\\n        \\n        emit OpenPositionByRyskFinance(buildID, token, operationProcedures);\\n    }\\n\\n    // PURE FUNCTIONS //\\n\\n    /**\\n     * @dev See {ITxBuilderOpenRyskFinance-encodeFromRyskFinance}.\\n     */\\n    function encodeFromRyskFinance(\\n        ICombinedActions.OperationProcedures[] memory operationProcedures\\n    ) external pure returns (bytes memory paramData) {\\n        return abi.encode(operationProcedures);\\n    }\\n\\n    /**\\n     * @dev See {ITxBuilderOpenRyskFinance-decodeFromRyskFinance}.\\n     */\\n    function decodeFromRyskFinance(\\n        bytes memory paramData\\n    ) public pure returns (\\n        ICombinedActions.OperationProcedures[] memory operationProcedures\\n    ) {\\n        (\\n            operationProcedures\\n        ) = abi.decode(paramData, (\\n            ICombinedActions.OperationProcedures[]\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x58e436e27975350943ffc61531ddc1f507c9c45ede455168cb169b4e1ad4e76f\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080346200013157601f620018af38819003918201601f19168301916001600160401b03831184841017620001365780849260c09460405283398101031262000131576200004d816200014c565b906200005c602082016200014c565b916200006b604083016200014c565b60608301519092906001600160a01b03808216918290036200013157608083015192818416809403620001315760a0015194818616809603620001315781600054978160018060a01b03199733898c16176000556040519a823391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3168760015416176001551685600254161760025516836003541617600355826004541617600455816005541617600555600654161760065561174d9081620001628239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001315756fe60808060405260048036101561001457600080fd5b600091823560e01c908163150b7a0214610ca2575080631b116e95146109605780633819137a1461053d5780633cdc5389146105145780633e413bee146104eb5780633fc8cef3146104c2578063532785c7146104995780635fb480c914610470578063715018a6146104165780637294eb40146103c75780637531a64e1461036e5780638da5cb5b14610347578063a6138ed914610320578063ad4bb908146101955763f2fde38b146100c757600080fd5b34610191576020366003190112610191576100e0610d1c565b6100e8611030565b6001600160a01b0390811691821561013e5750600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60849060206040519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b5080fd5b50346101915781600319360112610191578160018060a01b0381816001541693826005541660405163095ea7b360e01b918282528382015260001996876024830152816044816020998a945af18015610315576102dd575b5082858560025416604487600554166040519788938492888452898401528c60248401525af19384156102d0578694610292575b50846044939495600354169060055416976040519889968795865285015260248401525af1801561028757610254578280f35b81813d8311610280575b6102688183610dae565b810103126101915761027990611088565b5038808280f35b503d61025e565b6040513d85823e3d90fd5b929383813d83116102c9575b6102a88183610dae565b810103126102c65785946102bd604494611088565b50949392610221565b80fd5b503d61029e565b50604051903d90823e3d90fd5b8581813d831161030e575b6102f28183610dae565b8101031261030a5761030390611088565b50386101ed565b8380fd5b503d6102e8565b6040513d86823e3d90fd5b5034610191578160031936011261019157546040516001600160a01b039091168152602090f35b82346102c657806003193601126102c657546040516001600160a01b039091168152602090f35b5090346102c65760203660031901126102c6578135906001600160401b0382116102c6576103a66103a136848601610e01565b6110f1565b604080516001600160a01b03939093168352602083019190915290f35b0390f35b5090346102c65760203660031901126102c6578135906001600160401b0382116102c6576103c36104026103fd36858701610e01565b6113e7565b604051918291602083526020830190610e90565b82346102c657806003193601126102c65761042f611030565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b82346102c657806003193601126102c6576006546040516001600160a01b039091168152602090f35b82346102c657806003193601126102c6576005546040516001600160a01b039091168152602090f35b82346102c657806003193601126102c6576002546040516001600160a01b039091168152602090f35b82346102c657806003193601126102c6576001546040516001600160a01b039091168152602090f35b82346102c657806003193601126102c6576003546040516001600160a01b039091168152602090f35b5034610191576060366003190112610191576001600160401b03813581811161030a5761056d9036908401610e01565b916001600160a01b039060443590828216820361095c57610596610590866113e7565b956110f1565b5091836005541691823b1561095857869560405190630a5b626360e11b8252898260209687868301528183816105d160249e8f830190610e90565b03925af1801561084357610932575b5050846001541691886040516370a0823160e01b94858252308583015286828b81845afa90811561028757879284926108fd575b5081610883575b505050866002541660405190858252308583015286828b81845afa908115610287578792849261084e575b50816107c5575b505050866003541692604051948552308186015285858a81875afa9485156107ba578295610782575b50846106c7575b50505050507feb749712d2654f72d79433c37e4c3049c7de50f55000ee9d6b9f951656301b6f9360406106c192815195869516855284015235946040830190610e90565b0390a280f35b6040805163a9059cbb60e01b81526001600160a01b039490941691840191825260208201959095529193859385938490039091019183915af1801561077757610714575b8080888161067d565b938185813d8311610770575b61072a8183610dae565b8101031261076c5760406106c1926107627feb749712d2654f72d79433c37e4c3049c7de50f55000ee9d6b9f951656301b6f97611088565b509250509361070b565b8680fd5b503d610720565b6040513d89823e3d90fd5b86809296508193503d83116107b3575b61079c8183610dae565b810103126107ae578990519338610676565b600080fd5b503d610792565b6040513d84823e3d90fd5b6040805163a9059cbb60e01b81526001600160a01b0387168882019081526020810194909452948593849283910103925af180156108435761080b575b84818b9261064d565b8481813d831161083c575b6108208183610dae565b810103126108385761083190611088565b5038610802565b8980fd5b503d610816565b6040513d8c823e3d90fd5b92839194508092503d831161087c575b6108688183610dae565b810103126107ae578a918691519038610646565b503d61085e565b6040805163a9059cbb60e01b81526001600160a01b0387168882019081526020810194909452948593849283910103925af18015610843576108c9575b84818b9261061b565b8481813d83116108f6575b6108de8183610dae565b81010312610838576108ef90611088565b50386108c0565b503d6108d4565b92839194508092503d831161092b575b6109178183610dae565b810103126107ae578a918691519038610614565b503d61090d565b8199929911610946576040529638806105e0565b634e487b7160e01b8252604189528682fd5b8780fd5b8580fd5b5090346102c65760203660031901126102c6576001600160401b038235116102c65736602383350112156102c657813582013561099c81610dcf565b926109aa6040519485610dae565b81845260208401903660248460051b833501011161030a576024813501915b60248460051b833501018310610a1b576103c36109f9610a07886040519283916020808401526040830190610e90565b03601f198101835282610dae565b604051918291602083526020830190610e6b565b82356001600160401b03811161095c578235016040602319823603011261095c5760405190610a4982610d46565b602481013560028110156109585782526044810135906001600160401b038211610958573660438383010112156109585760248282010135610a8a81610dcf565b92610a986040519485610dae565b81845260208401923660448460051b848401010111610c9e57604482820101935b60448460051b84840101018510610ae557505050506020808401929092525090825292830192016109c9565b84356001600160401b038111610c9a576101c0838501820136036043190112610c9a5760405190610b1582610d77565b838501810160448101358352610b2d90606401610d32565b6020830152610b426084828787010101610d32565b6040830152610b5760a4828787010101610d32565b6060830152838501810160c4810135608084015260e481013560a084015260c03691909103610103190112610c8e57604051610b9281610d93565b610104828787010101356001600160401b0381168103610c96578152848601820161012401356001600160801b0381169003610c92578486018201610124810135602083015261014401358015159003610c925784860182016101448101356040830152610c039061016401610d32565b6060820152610c19610184838888010101610d32565b6080820152610c2f6101a4838888010101610d32565b60a082015260c083015283850181016101c481013560e08401526001600160401b036101e49091013511610c8e5760209283929091610c7d903690878901016101e481013501604401610e01565b610100820152815201940193610ab9565b8d80fd5b8e80fd5b8f80fd5b8c80fd5b8a80fd5b91905034610d18576080366003190112610d1857610cbe610d1c565b506024356001600160a01b03811603610d1857606435906001600160401b0390818311610d145736602384011215610d145782013590811161030a573691016024011161019157630a85bd0160e11b8152602090f35b8480fd5b8280fd5b600435906001600160a01b03821682036107ae57565b35906001600160a01b03821682036107ae57565b604081019081106001600160401b03821117610d6157604052565b634e487b7160e01b600052604160045260246000fd5b61012081019081106001600160401b03821117610d6157604052565b60c081019081106001600160401b03821117610d6157604052565b90601f801991011681019081106001600160401b03821117610d6157604052565b6001600160401b038111610d615760051b60200190565b6001600160401b038111610d6157601f01601f191660200190565b81601f820112156107ae57803590610e1882610de6565b92610e266040519485610dae565b828452602083830101116107ae57816000926020809301838601378301015290565b60005b838110610e5b5750506000910152565b8181015183820152602001610e4b565b90602091610e8481518092818552858086019101610e48565b601f01601f1916010190565b9080825190818152602080910192600593828085871b8401019601946000925b858410610ec1575050505050505090565b90919293949596601f19828203018452875160409081830190805190600282101561101a578994929391908591845201519281858401528351809152606092838101928685848b1b8401019601946000915b848310610f3757505050505050509080600192990194019401929594939190610eb0565b9193959780611006600193959799605f19898203018b52868c518051835287878060a01b038087840151168786015280828401511682860152808484015116848601526080808401518187015260a09081850151828801528260c09182870151926001600160401b03845116908a0152816001600160801b038c850151169660e097888c0152840151151598610100998a8c0152840151166101208a0152820151166101408801520151166101608501528101516101808401520151906101c090816101a08201520190610e6b565b99019701930190918c979695939492610f13565b634e487b7160e01b600052602160045260246000fd5b6000546001600160a01b0316330361104457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b519081151582036107ae57565b60001981146110a45760010190565b634e487b7160e01b600052601160045260246000fd5b80518210156110ce5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b51600281101561101a5790565b60009160009261110184936113e7565b9084938593865b845181101561116c5761112461111e82876110ba565b516110e4565b600281101561115857600114611143575b61113e90611095565b611108565b9461115061113e91611095565b959050611135565b634e487b7160e01b89526021600452602489fd5b5093919592909461117c83610dcf565b9160409061118c82519485610dae565b848452601f1961119b86610dcf565b01865b818110611360575050855b8581106112b3575050845b8481106111c357505050505050565b60016111cf82866110ba565b515114801561129e575b6111ec575b6111e790611095565b6111b4565b9697506001600160a01b038060a060c06112068b886110ba565b5101510151169080841615611295575b83168103611251579760e061122b89866110ba565b510151810180911161123d57966111de565b634e487b7160e01b86526011600452602486fd5b815162461bcd60e51b815260206004820152601b60248201527f646966666572656e7420636f6c6c61746572616c20746f6b656e7300000000006044820152606490fd5b92508092611216565b5060026112ab82866110ba565b5151146111d9565b6112c061111e82846110ba565b600281101561134c5760018091146112e2575b506112dd90611095565b6111a9565b87815b6112f0575b506112d3565b6020806112fd85876110ba565b51015151821015611346578161132484936113409361131c888a6110ba565b5101516110ba565b5161132f868b6110ba565b5261133a858a6110ba565b50611095565b906112e5565b506112ea565b634e487b7160e01b88526021600452602488fd5b602090845161136e81610d77565b898152828a818301528a8783015260608b8184015260808c818501528c60a08181870152818b519361139f85610d93565b8185528187860152818d860152818686015284015282015260c08401528b60e084015261010083015282890101520161119e565b51906001600160a01b03821682036107ae57565b805181016020828203126107ae5760208201516001600160401b0381116107ae5760208201603f8285010112156107ae57602081840101519061142982610dcf565b936114376040519586610dae565b82855260208501916020850160408560051b8385010101116107ae57604081830101925b60408560051b838501010184106114755750505050505090565b83516001600160401b0381116107ae57838301016040818803601f1901126107ae57604051906114a482610d46565b604081015160028110156107ae57825260608101516001600160401b0381116107ae5760208901605f8284010112156107ae57604081830101516114e781610dcf565b926114f56040519485610dae565b818452602084019060208c0160608460051b8684010101116107ae57606084820101915b60608460051b86840101018310611545575050505060208084019290925250908252938401930161145b565b8251906001600160401b0382116107ae576101c083870183018f03603f1901126107ae576040519060c08f61157984610d77565b858901850160608101518552611591906080016113d3565b60208501526115a660a0868b890101016113d3565b60408501526115ba82868b890101016113d3565b6060850152858901850160e0810151608086015261010081015160a0860152900360ff1901126107ae576040516115f081610d93565b610120848987010101516001600160401b03811681036107ae578152610140848987010101516001600160801b03811681036107ae57602082015261163c610160858a88010101611088565b6040820152611652610180858a880101016113d3565b60608201526116686101a0858a880101016113d3565b608082015261167e6101c0858a880101016113d3565b60a082015260c083015283870183016101e081015160e08401526102000151926001600160401b0384116107ae578f9360209189870101019301607f840112156107ae576060830151918f60206116d485610de6565b916116e26040519384610dae565b85835201608085870101116107ae5761170660209594869560808785019101610e48565b61010082015281520192019161151956fea2646970667358221220453d3c2ab0043b85a39cf7d78ee4a094ee0b42616b1ed7be9b8ff3a12de692a264736f6c63430008130033",
  "deployedBytecode": "0x60808060405260048036101561001457600080fd5b600091823560e01c908163150b7a0214610ca2575080631b116e95146109605780633819137a1461053d5780633cdc5389146105145780633e413bee146104eb5780633fc8cef3146104c2578063532785c7146104995780635fb480c914610470578063715018a6146104165780637294eb40146103c75780637531a64e1461036e5780638da5cb5b14610347578063a6138ed914610320578063ad4bb908146101955763f2fde38b146100c757600080fd5b34610191576020366003190112610191576100e0610d1c565b6100e8611030565b6001600160a01b0390811691821561013e5750600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60849060206040519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b5080fd5b50346101915781600319360112610191578160018060a01b0381816001541693826005541660405163095ea7b360e01b918282528382015260001996876024830152816044816020998a945af18015610315576102dd575b5082858560025416604487600554166040519788938492888452898401528c60248401525af19384156102d0578694610292575b50846044939495600354169060055416976040519889968795865285015260248401525af1801561028757610254578280f35b81813d8311610280575b6102688183610dae565b810103126101915761027990611088565b5038808280f35b503d61025e565b6040513d85823e3d90fd5b929383813d83116102c9575b6102a88183610dae565b810103126102c65785946102bd604494611088565b50949392610221565b80fd5b503d61029e565b50604051903d90823e3d90fd5b8581813d831161030e575b6102f28183610dae565b8101031261030a5761030390611088565b50386101ed565b8380fd5b503d6102e8565b6040513d86823e3d90fd5b5034610191578160031936011261019157546040516001600160a01b039091168152602090f35b82346102c657806003193601126102c657546040516001600160a01b039091168152602090f35b5090346102c65760203660031901126102c6578135906001600160401b0382116102c6576103a66103a136848601610e01565b6110f1565b604080516001600160a01b03939093168352602083019190915290f35b0390f35b5090346102c65760203660031901126102c6578135906001600160401b0382116102c6576103c36104026103fd36858701610e01565b6113e7565b604051918291602083526020830190610e90565b82346102c657806003193601126102c65761042f611030565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b82346102c657806003193601126102c6576006546040516001600160a01b039091168152602090f35b82346102c657806003193601126102c6576005546040516001600160a01b039091168152602090f35b82346102c657806003193601126102c6576002546040516001600160a01b039091168152602090f35b82346102c657806003193601126102c6576001546040516001600160a01b039091168152602090f35b82346102c657806003193601126102c6576003546040516001600160a01b039091168152602090f35b5034610191576060366003190112610191576001600160401b03813581811161030a5761056d9036908401610e01565b916001600160a01b039060443590828216820361095c57610596610590866113e7565b956110f1565b5091836005541691823b1561095857869560405190630a5b626360e11b8252898260209687868301528183816105d160249e8f830190610e90565b03925af1801561084357610932575b5050846001541691886040516370a0823160e01b94858252308583015286828b81845afa90811561028757879284926108fd575b5081610883575b505050866002541660405190858252308583015286828b81845afa908115610287578792849261084e575b50816107c5575b505050866003541692604051948552308186015285858a81875afa9485156107ba578295610782575b50846106c7575b50505050507feb749712d2654f72d79433c37e4c3049c7de50f55000ee9d6b9f951656301b6f9360406106c192815195869516855284015235946040830190610e90565b0390a280f35b6040805163a9059cbb60e01b81526001600160a01b039490941691840191825260208201959095529193859385938490039091019183915af1801561077757610714575b8080888161067d565b938185813d8311610770575b61072a8183610dae565b8101031261076c5760406106c1926107627feb749712d2654f72d79433c37e4c3049c7de50f55000ee9d6b9f951656301b6f97611088565b509250509361070b565b8680fd5b503d610720565b6040513d89823e3d90fd5b86809296508193503d83116107b3575b61079c8183610dae565b810103126107ae578990519338610676565b600080fd5b503d610792565b6040513d84823e3d90fd5b6040805163a9059cbb60e01b81526001600160a01b0387168882019081526020810194909452948593849283910103925af180156108435761080b575b84818b9261064d565b8481813d831161083c575b6108208183610dae565b810103126108385761083190611088565b5038610802565b8980fd5b503d610816565b6040513d8c823e3d90fd5b92839194508092503d831161087c575b6108688183610dae565b810103126107ae578a918691519038610646565b503d61085e565b6040805163a9059cbb60e01b81526001600160a01b0387168882019081526020810194909452948593849283910103925af18015610843576108c9575b84818b9261061b565b8481813d83116108f6575b6108de8183610dae565b81010312610838576108ef90611088565b50386108c0565b503d6108d4565b92839194508092503d831161092b575b6109178183610dae565b810103126107ae578a918691519038610614565b503d61090d565b8199929911610946576040529638806105e0565b634e487b7160e01b8252604189528682fd5b8780fd5b8580fd5b5090346102c65760203660031901126102c6576001600160401b038235116102c65736602383350112156102c657813582013561099c81610dcf565b926109aa6040519485610dae565b81845260208401903660248460051b833501011161030a576024813501915b60248460051b833501018310610a1b576103c36109f9610a07886040519283916020808401526040830190610e90565b03601f198101835282610dae565b604051918291602083526020830190610e6b565b82356001600160401b03811161095c578235016040602319823603011261095c5760405190610a4982610d46565b602481013560028110156109585782526044810135906001600160401b038211610958573660438383010112156109585760248282010135610a8a81610dcf565b92610a986040519485610dae565b81845260208401923660448460051b848401010111610c9e57604482820101935b60448460051b84840101018510610ae557505050506020808401929092525090825292830192016109c9565b84356001600160401b038111610c9a576101c0838501820136036043190112610c9a5760405190610b1582610d77565b838501810160448101358352610b2d90606401610d32565b6020830152610b426084828787010101610d32565b6040830152610b5760a4828787010101610d32565b6060830152838501810160c4810135608084015260e481013560a084015260c03691909103610103190112610c8e57604051610b9281610d93565b610104828787010101356001600160401b0381168103610c96578152848601820161012401356001600160801b0381169003610c92578486018201610124810135602083015261014401358015159003610c925784860182016101448101356040830152610c039061016401610d32565b6060820152610c19610184838888010101610d32565b6080820152610c2f6101a4838888010101610d32565b60a082015260c083015283850181016101c481013560e08401526001600160401b036101e49091013511610c8e5760209283929091610c7d903690878901016101e481013501604401610e01565b610100820152815201940193610ab9565b8d80fd5b8e80fd5b8f80fd5b8c80fd5b8a80fd5b91905034610d18576080366003190112610d1857610cbe610d1c565b506024356001600160a01b03811603610d1857606435906001600160401b0390818311610d145736602384011215610d145782013590811161030a573691016024011161019157630a85bd0160e11b8152602090f35b8480fd5b8280fd5b600435906001600160a01b03821682036107ae57565b35906001600160a01b03821682036107ae57565b604081019081106001600160401b03821117610d6157604052565b634e487b7160e01b600052604160045260246000fd5b61012081019081106001600160401b03821117610d6157604052565b60c081019081106001600160401b03821117610d6157604052565b90601f801991011681019081106001600160401b03821117610d6157604052565b6001600160401b038111610d615760051b60200190565b6001600160401b038111610d6157601f01601f191660200190565b81601f820112156107ae57803590610e1882610de6565b92610e266040519485610dae565b828452602083830101116107ae57816000926020809301838601378301015290565b60005b838110610e5b5750506000910152565b8181015183820152602001610e4b565b90602091610e8481518092818552858086019101610e48565b601f01601f1916010190565b9080825190818152602080910192600593828085871b8401019601946000925b858410610ec1575050505050505090565b90919293949596601f19828203018452875160409081830190805190600282101561101a578994929391908591845201519281858401528351809152606092838101928685848b1b8401019601946000915b848310610f3757505050505050509080600192990194019401929594939190610eb0565b9193959780611006600193959799605f19898203018b52868c518051835287878060a01b038087840151168786015280828401511682860152808484015116848601526080808401518187015260a09081850151828801528260c09182870151926001600160401b03845116908a0152816001600160801b038c850151169660e097888c0152840151151598610100998a8c0152840151166101208a0152820151166101408801520151166101608501528101516101808401520151906101c090816101a08201520190610e6b565b99019701930190918c979695939492610f13565b634e487b7160e01b600052602160045260246000fd5b6000546001600160a01b0316330361104457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b519081151582036107ae57565b60001981146110a45760010190565b634e487b7160e01b600052601160045260246000fd5b80518210156110ce5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b51600281101561101a5790565b60009160009261110184936113e7565b9084938593865b845181101561116c5761112461111e82876110ba565b516110e4565b600281101561115857600114611143575b61113e90611095565b611108565b9461115061113e91611095565b959050611135565b634e487b7160e01b89526021600452602489fd5b5093919592909461117c83610dcf565b9160409061118c82519485610dae565b848452601f1961119b86610dcf565b01865b818110611360575050855b8581106112b3575050845b8481106111c357505050505050565b60016111cf82866110ba565b515114801561129e575b6111ec575b6111e790611095565b6111b4565b9697506001600160a01b038060a060c06112068b886110ba565b5101510151169080841615611295575b83168103611251579760e061122b89866110ba565b510151810180911161123d57966111de565b634e487b7160e01b86526011600452602486fd5b815162461bcd60e51b815260206004820152601b60248201527f646966666572656e7420636f6c6c61746572616c20746f6b656e7300000000006044820152606490fd5b92508092611216565b5060026112ab82866110ba565b5151146111d9565b6112c061111e82846110ba565b600281101561134c5760018091146112e2575b506112dd90611095565b6111a9565b87815b6112f0575b506112d3565b6020806112fd85876110ba565b51015151821015611346578161132484936113409361131c888a6110ba565b5101516110ba565b5161132f868b6110ba565b5261133a858a6110ba565b50611095565b906112e5565b506112ea565b634e487b7160e01b88526021600452602488fd5b602090845161136e81610d77565b898152828a818301528a8783015260608b8184015260808c818501528c60a08181870152818b519361139f85610d93565b8185528187860152818d860152818686015284015282015260c08401528b60e084015261010083015282890101520161119e565b51906001600160a01b03821682036107ae57565b805181016020828203126107ae5760208201516001600160401b0381116107ae5760208201603f8285010112156107ae57602081840101519061142982610dcf565b936114376040519586610dae565b82855260208501916020850160408560051b8385010101116107ae57604081830101925b60408560051b838501010184106114755750505050505090565b83516001600160401b0381116107ae57838301016040818803601f1901126107ae57604051906114a482610d46565b604081015160028110156107ae57825260608101516001600160401b0381116107ae5760208901605f8284010112156107ae57604081830101516114e781610dcf565b926114f56040519485610dae565b818452602084019060208c0160608460051b8684010101116107ae57606084820101915b60608460051b86840101018310611545575050505060208084019290925250908252938401930161145b565b8251906001600160401b0382116107ae576101c083870183018f03603f1901126107ae576040519060c08f61157984610d77565b858901850160608101518552611591906080016113d3565b60208501526115a660a0868b890101016113d3565b60408501526115ba82868b890101016113d3565b6060850152858901850160e0810151608086015261010081015160a0860152900360ff1901126107ae576040516115f081610d93565b610120848987010101516001600160401b03811681036107ae578152610140848987010101516001600160801b03811681036107ae57602082015261163c610160858a88010101611088565b6040820152611652610180858a880101016113d3565b60608201526116686101a0858a880101016113d3565b608082015261167e6101c0858a880101016113d3565b60a082015260c083015283870183016101e081015160e08401526102000151926001600160401b0384116107ae578f9360209189870101019301607f840112156107ae576060830151918f60206116d485610de6565b916116e26040519384610dae565b85835201608085870101116107ae5761170660209594869560808785019101610e48565b61010082015281520192019161151956fea2646970667358221220453d3c2ab0043b85a39cf7d78ee4a094ee0b42616b1ed7be9b8ff3a12de692a264736f6c63430008130033",
  "devdoc": {
    "author": "0nika0",
    "events": {
      "OpenPositionByRyskFinance(uint256,address,(uint8,(uint256,address,address,address,uint256,uint256,(uint64,uint128,bool,address,address,address),uint256,bytes)[])[])": {
        "details": "This event, `OpenPositionByRyskFinance`, provides information about the specific transaction build identified by `buildID`, the involved `token` in the position, and an array of `OperationProcedures` representing the steps taken in the process. This event is useful for tracking and monitoring transactions related to opening positions initiated by Rysk Finance.",
        "params": {
          "buildID": "The unique identifier for the transaction build associated with the opened position.",
          "operationProcedures": "An array of `OperationProcedures` representing the steps taken in the process of opening the position.",
          "token": "The address of the token involved in the opened position."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allApprove()": {
        "details": "See {ITxBuilderOpenRyskFinance-allApprove}."
      },
      "calculateAmount(bytes)": {
        "details": "This public view function `calculateAmount` takes encoded parameters from Rysk Finance and decodes them to determine the token and amount involved in the specified Rysk operations. The decoded parameters represent a series of actions (operation procedures) related to Rysk Finance.",
        "params": {
          "parameters": "Encoded parameters containing Rysk Finance operation details."
        },
        "returns": {
          "amount": "The total amount associated with the specified Rysk operations.",
          "token": "The address of the token involved in the Rysk operations."
        }
      },
      "decodeFromRyskFinance(bytes)": {
        "details": "See {ITxBuilderOpenRyskFinance-decodeFromRyskFinance}."
      },
      "encodeFromRyskFinance((uint8,(uint256,address,address,address,uint256,uint256,(uint64,uint128,bool,address,address,address),uint256,bytes)[])[])": {
        "details": "See {ITxBuilderOpenRyskFinance-encodeFromRyskFinance}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "processTx(bytes,uint256,address)": {
        "details": "See {IBaseTxBuilderOpen-processTx}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Rysk Finance Transaction Builder - Open Position",
    "version": 1
  },
  "userdoc": {
    "events": {
      "OpenPositionByRyskFinance(uint256,address,(uint8,(uint256,address,address,address,uint256,uint256,(uint64,uint128,bool,address,address,address),uint256,bytes)[])[])": {
        "notice": "Emitted to signal the successful opening of a position by Rysk Finance."
      }
    },
    "kind": "user",
    "methods": {},
    "notice": "A contract facilitating the opening of positions on the Rysk Finance protocol.          It provides functions to calculate transaction amounts, process transactions, and manage approvals.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4028,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "usdc",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ERC20)2185"
      },
      {
        "astId": 4031,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "weth",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ERC20)2185"
      },
      {
        "astId": 4034,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "wbtc",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ERC20)2185"
      },
      {
        "astId": 4037,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "pricer",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IBeyondPricer)3869"
      },
      {
        "astId": 4040,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "optionExchange",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IOptionExchange)3947"
      },
      {
        "astId": 4043,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "portfolioValuesFeed",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IAlphaPortfolioValuesFeed)3846"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20)2185": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IAlphaPortfolioValuesFeed)3846": {
        "encoding": "inplace",
        "label": "contract IAlphaPortfolioValuesFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IBeyondPricer)3869": {
        "encoding": "inplace",
        "label": "contract IBeyondPricer",
        "numberOfBytes": "20"
      },
      "t_contract(IOptionExchange)3947": {
        "encoding": "inplace",
        "label": "contract IOptionExchange",
        "numberOfBytes": "20"
      }
    }
  }
}