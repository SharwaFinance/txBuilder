{
  "address": "0xdC168b1c8fbd29BcA1953e177b8A05Ed78251216",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "_wbtc",
          "type": "address"
        },
        {
          "internalType": "contract IBeyondPricer",
          "name": "_pricer",
          "type": "address"
        },
        {
          "internalType": "contract IOptionExchange",
          "name": "_optionExchange",
          "type": "address"
        },
        {
          "internalType": "contract IAlphaPortfolioValuesFeed",
          "name": "_portfolioValuesFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum ICombinedActions.OperationType",
              "name": "operation",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "actionType",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "secondAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "vaultId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint64",
                      "name": "expiration",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint128",
                      "name": "strike",
                      "type": "uint128"
                    },
                    {
                      "internalType": "bool",
                      "name": "isPut",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "underlying",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "strikeAsset",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "collateral",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct ITypes.OptionSeries",
                  "name": "optionSeries",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "indexOrAcceptablePremium",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ICombinedActions.ActionArgs[]",
              "name": "operationQueue",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct ICombinedActions.OperationProcedures[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "name": "OpenPositionByRyskFinance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "calculateAmount",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "name": "decodeFromRyskFinance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ICombinedActions.OperationType",
              "name": "operation",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "actionType",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "secondAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "vaultId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint64",
                      "name": "expiration",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint128",
                      "name": "strike",
                      "type": "uint128"
                    },
                    {
                      "internalType": "bool",
                      "name": "isPut",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "underlying",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "strikeAsset",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "collateral",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct ITypes.OptionSeries",
                  "name": "optionSeries",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "indexOrAcceptablePremium",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ICombinedActions.ActionArgs[]",
              "name": "operationQueue",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ICombinedActions.OperationProcedures[]",
          "name": "operationProcedures",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ICombinedActions.OperationType",
              "name": "operation",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "actionType",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "secondAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "vaultId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint64",
                      "name": "expiration",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint128",
                      "name": "strike",
                      "type": "uint128"
                    },
                    {
                      "internalType": "bool",
                      "name": "isPut",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "underlying",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "strikeAsset",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "collateral",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct ITypes.OptionSeries",
                  "name": "optionSeries",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "indexOrAcceptablePremium",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ICombinedActions.ActionArgs[]",
              "name": "operationQueue",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ICombinedActions.OperationProcedures[]",
          "name": "operationProcedures",
          "type": "tuple[]"
        }
      ],
      "name": "encodeFromRyskFinance",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ICombinedActions.OperationType",
              "name": "operation",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "actionType",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "secondAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "vaultId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint64",
                      "name": "expiration",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint128",
                      "name": "strike",
                      "type": "uint128"
                    },
                    {
                      "internalType": "bool",
                      "name": "isPut",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "underlying",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "strikeAsset",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "collateral",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct ITypes.OptionSeries",
                  "name": "optionSeries",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "indexOrAcceptablePremium",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ICombinedActions.ActionArgs[]",
              "name": "operationQueue",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ICombinedActions.OperationProcedures[]",
          "name": "operationProcedures",
          "type": "tuple[]"
        }
      ],
      "name": "getOtokensAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionExchange",
      "outputs": [
        {
          "internalType": "contract IOptionExchange",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioValuesFeed",
      "outputs": [
        {
          "internalType": "contract IAlphaPortfolioValuesFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricer",
      "outputs": [
        {
          "internalType": "contract IBeyondPricer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "parametersArray",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "processTx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wbtc",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x55899c6cf723495b38505e359fe7227e8388a8c60a53e4e30abcf7b408305f35",
  "receipt": {
    "to": null,
    "from": "0x0641bc55DDAb3b9636e82CbF87EDE3c3c533039d",
    "contractAddress": "0xdC168b1c8fbd29BcA1953e177b8A05Ed78251216",
    "transactionIndex": 2,
    "gasUsed": "25055356",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000001000000000200000000000000000000000000020000000040000000000800000000000000000000000000000000400000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xf01c93c32ec248c0b07923dacbc5702b77e05a8a1b63938702187fbe474142d2",
    "transactionHash": "0x55899c6cf723495b38505e359fe7227e8388a8c60a53e4e30abcf7b408305f35",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 154535506,
        "transactionHash": "0x55899c6cf723495b38505e359fe7227e8388a8c60a53e4e30abcf7b408305f35",
        "address": "0xdC168b1c8fbd29BcA1953e177b8A05Ed78251216",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000641bc55ddab3b9636e82cbf87ede3c3c533039d"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xf01c93c32ec248c0b07923dacbc5702b77e05a8a1b63938702187fbe474142d2"
      }
    ],
    "blockNumber": 154535506,
    "cumulativeGasUsed": "27110044",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaf88d065e77c8cC2239327C5EDb3A432268e5831",
    "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
    "0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f",
    "0xeA5Fb118862876f249Ff0b3e7fb25fEb38158def",
    "0xC117bf3103bd09552F9a721F0B8Bce9843aaE1fa",
    "0xc7abaec336098cd0dcd98b67cb14d3b18e1c68a8"
  ],
  "numDeployments": 10,
  "solcInputHash": "aafa5d52e38ce27c4668d67dbdd2663c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_wbtc\",\"type\":\"address\"},{\"internalType\":\"contract IBeyondPricer\",\"name\":\"_pricer\",\"type\":\"address\"},{\"internalType\":\"contract IOptionExchange\",\"name\":\"_optionExchange\",\"type\":\"address\"},{\"internalType\":\"contract IAlphaPortfolioValuesFeed\",\"name\":\"_portfolioValuesFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ICombinedActions.OperationType\",\"name\":\"operation\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"strike\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"internalType\":\"struct ITypes.OptionSeries\",\"name\":\"optionSeries\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"indexOrAcceptablePremium\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICombinedActions.ActionArgs[]\",\"name\":\"operationQueue\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct ICombinedActions.OperationProcedures[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"name\":\"OpenPositionByRyskFinance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"calculateAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"name\":\"decodeFromRyskFinance\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ICombinedActions.OperationType\",\"name\":\"operation\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"strike\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"internalType\":\"struct ITypes.OptionSeries\",\"name\":\"optionSeries\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"indexOrAcceptablePremium\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICombinedActions.ActionArgs[]\",\"name\":\"operationQueue\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ICombinedActions.OperationProcedures[]\",\"name\":\"operationProcedures\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ICombinedActions.OperationType\",\"name\":\"operation\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"strike\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"internalType\":\"struct ITypes.OptionSeries\",\"name\":\"optionSeries\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"indexOrAcceptablePremium\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICombinedActions.ActionArgs[]\",\"name\":\"operationQueue\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ICombinedActions.OperationProcedures[]\",\"name\":\"operationProcedures\",\"type\":\"tuple[]\"}],\"name\":\"encodeFromRyskFinance\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ICombinedActions.OperationType\",\"name\":\"operation\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"strike\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"internalType\":\"struct ITypes.OptionSeries\",\"name\":\"optionSeries\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"indexOrAcceptablePremium\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICombinedActions.ActionArgs[]\",\"name\":\"operationQueue\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ICombinedActions.OperationProcedures[]\",\"name\":\"operationProcedures\",\"type\":\"tuple[]\"}],\"name\":\"getOtokensAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionExchange\",\"outputs\":[{\"internalType\":\"contract IOptionExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioValuesFeed\",\"outputs\":[{\"internalType\":\"contract IAlphaPortfolioValuesFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricer\",\"outputs\":[{\"internalType\":\"contract IBeyondPricer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"parametersArray\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"processTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateAmount(bytes)\":{\"details\":\"See {IBaseTxBuilderOpen-calculateAmount}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"processTx(bytes,uint256,address)\":{\"details\":\"See {IBaseTxBuilderOpen-processTx}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/risk_finance/TxBuilderOpenRyskFinance.sol\":\"TxBuilderOpenRyskFinance\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BaseTxBuilderOpen.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IBaseTxBuilderOpen} from \\\"./IBaseTxBuilderOpen.sol\\\";\\n\\n/**\\n * @title BaseTxBuilderOpen\\n * @author 0nika0\\n * @notice An abstract base contract for building and processing option transactions.\\n * @dev This contract provides the foundational structure for creating and processing option transactions. \\n * It includes functions to handle transaction processing and token amount calculation.\\n */\\nabstract contract BaseTxBuilderOpen is Ownable, IBaseTxBuilderOpen {\\n\\n    // PUBLIC FUNCTONS //\\n\\n    /**\\n     * @dev See {IBaseTxBuilderOpen-calculateAmount}.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) public view virtual returns (\\n        address token,\\n        uint256 amount\\n    ) {}\\n\\n    // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @dev See {IBaseTxBuilderOpen-processTx}.\\n     */\\n    function processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) external {\\n        _processTx(parametersArray, buildID, user);\\n    }\\n\\n    function onERC721Received(\\n        address, \\n        address, \\n        uint256, \\n        bytes calldata\\n    ) external returns(bytes4) {\\n        return bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"));\\n    } \\n\\n    // INTERNAL FUNCTIONS //\\n\\n    /**\\n     * @notice Internal function to process a transaction for opening an option position.\\n     * @dev This internal function processes a transaction for opening an option position based on the provided parameters.\\n     * @param parametersArray The encoded parameters for opening the option position.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param user The address of the user who is opening the option position.\\n     */\\n    function _processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd63444fe003c4e60eb5224e3b3f4913e27778ac54bd275286bb7fca05f53d583\",\"license\":\"GPL-3.0-or-later\"},\"contracts/IBaseTxBuilderOpen.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\n\\ninterface IBaseTxBuilderOpen {\\n    // PUBLIC FUNCTONS //\\n\\n    /**\\n     * @notice Calculate the amount of a token based on provided parameters.\\n     * @dev This function calculates the amount of a token based on a set of input parameters.\\n     * @param parameters The encoded parameters for the calculation.\\n     * @return token The address of the token to be calculated.\\n     * @return amount The calculated amount of the token.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) external view returns (\\n        address token,\\n        uint256 amount\\n    ); \\n\\n     // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @notice Process a transaction for opening an option position.\\n     * @dev This function processes a transaction for opening an option position based on the provided parameters.\\n     * @param parametersArray The encoded parameters for opening the option position.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param user The address of the user who is opening the option position.\\n     */\\n    function processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) external;\\n\\n\\n\\n}\\n\",\"keccak256\":\"0xe97c16dcf0d4746277867ab4ead00665161b2535fde4a2cbb31a51e691780302\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/IAlphaPortfolioValuesFeed.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\ninterface IAlphaPortfolioValuesFeed {\\n\\tfunction netDhvExposure(bytes32) external view returns(int256);\\n}\\n\",\"keccak256\":\"0x3aa69f31a2f2f5326083ccd52d6d4d7419720023d84aa4bc77a38035e52a2cc0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/IBeyondPricer.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {ITypes} from \\\"./ITypes.sol\\\";\\n\\ninterface IBeyondPricer {\\n\\tfunction quoteOptionPrice(\\n\\t\\tITypes.OptionSeries memory _optionSeries,\\n\\t\\tuint256 _amount,\\n\\t\\tbool isSell,\\n\\t\\tint256 netDhvExposure\\n\\t) external view returns (uint256 totalPremium, int256 totalDelta, uint256 totalFees);\\n}\\n\",\"keccak256\":\"0x7674fade1a4ef9fa55e651aa880e57ae6dc48db64199752245ab687b397bdd45\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/ICombinedActions.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {ITypes} from \\\"./ITypes.sol\\\";\\n\\ninterface ICombinedActions {\\n\\tenum OperationType {\\n\\t\\tOPYN,\\n\\t\\tRYSK\\n\\t}\\n\\n\\tstruct OperationProcedures {\\n\\t\\tOperationType operation;\\n\\t\\tActionArgs[] operationQueue;\\n\\t}\\n\\n    struct ActionArgs {\\n        // type of action that is being performed on the system\\n        uint256 actionType;\\n        // address of the account owner\\n        address owner;\\n        // address which we move assets from or to (depending on the action type)\\n        address secondAddress;\\n        // asset that is to be transfered\\n        address asset;\\n        // index of the vault that is to be modified (if any)\\n        uint256 vaultId;\\n        // amount of asset that is to be transfered\\n        uint256 amount;\\n        // option series (if any)\\n        ITypes.OptionSeries optionSeries;\\n        // each vault can hold multiple short / long / collateral assets but we are restricting the scope to only 1 of each in this version\\n        // OR for rysk actions it is the acceptable premium (if option is being sold to the dhv then the actual premium should be more than this number (i.e. max price),\\n        // if option is being bought from the dhv then the actual premium should be less than this number (i.e. max price))\\n        uint256 indexOrAcceptablePremium;\\n        // any other data that needs to be passed in for arbitrary function calls\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0x91bb5ca59e1d7956c973fdf7e1052bc9cc521bd4a4f05647331426806e6bc89f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/IOptionExchange.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {ICombinedActions} from \\\"./ICombinedActions.sol\\\";\\nimport {ITypes} from \\\"./ITypes.sol\\\";\\n\\ninterface IOptionExchange {\\n\\t/**\\n\\t * @notice entry point to the contract for users, takes a queue of actions for both opyn and rysk and executes them sequentially\\n\\t * @param  _operationProcedures an array of actions to be executed sequentially\\n\\t */\\n\\tfunction operate(\\n\\t\\tICombinedActions.OperationProcedures[] memory _operationProcedures\\n\\t) external;\\n\\n\\tfunction checkHash(\\n\\t\\tITypes.OptionSeries memory optionSeries,\\n\\t\\tuint128 strikeDecimalConverted,\\n\\t\\tbool isSell\\n\\t) external view returns (bytes32 oHash);\\n\\n\\tfunction getOptionDetails(\\n\\t\\taddress seriesAddress,\\n\\t\\tITypes.OptionSeries memory optionSeries\\n\\t) external view returns (address, ITypes.OptionSeries memory, uint128);\\n}\\n\",\"keccak256\":\"0xa122c6f9f5c4c611e46b67761d99d069fb08b7e9adee41190c3cf4c26fb1cb4f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/ITxBuilderOpenRyskFinance.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {ICombinedActions} from \\\"./ICombinedActions.sol\\\";\\n\\ninterface ITxBuilderOpenRyskFinance {\\n\\n    // EXTERNAL FUNCTIONS //  \\n\\n    function allApprove() external;\\n\\n    // PURE FUNCTIONS //\\n\\n    function encodeFromRyskFinance(\\n        ICombinedActions.OperationProcedures[] memory operationProcedures\\n    ) external pure returns (bytes memory paramData);\\n\\n    function decodeFromRyskFinance(\\n        bytes memory paramData\\n    ) external pure returns (\\n        ICombinedActions.OperationProcedures[] memory operationProcedures\\n    );\\n\\n    // EVENTS //\\n\\n    event OpenPositionByRyskFinance(\\n        uint256 indexed buildID,\\n        address token,\\n        ICombinedActions.OperationProcedures[]\\n    );\\n}\",\"keccak256\":\"0x41f99431156c4c17f3c4124c86fae7b80c948814b0af5a086f25458be617e978\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/ITypes.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\ninterface ITypes {\\n\\tstruct OptionSeries {\\n\\t\\tuint64 expiration;\\n\\t\\tuint128 strike;\\n\\t\\tbool isPut;\\n\\t\\taddress underlying;\\n\\t\\taddress strikeAsset;\\n\\t\\taddress collateral;\\n\\t}\\n}\\n\",\"keccak256\":\"0x144c021d8a227952f379029ebb85134460ab92dc451a9caf6de6bf0892c46047\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/TxBuilderOpenRyskFinance.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {BaseTxBuilderOpen, ERC20} from \\\"../BaseTxBuilderOpen.sol\\\";\\nimport {IBeyondPricer} from \\\"./IBeyondPricer.sol\\\";\\nimport {IOptionExchange} from \\\"./IOptionExchange.sol\\\";\\nimport {IAlphaPortfolioValuesFeed} from \\\"./IAlphaPortfolioValuesFeed.sol\\\";\\nimport {ICombinedActions, ITxBuilderOpenRyskFinance} from \\\"./ITxBuilderOpenRyskFinance.sol\\\";\\nimport {ITypes} from \\\"./ITypes.sol\\\";\\n\\ncontract TxBuilderOpenRyskFinance is BaseTxBuilderOpen, ITxBuilderOpenRyskFinance {\\n    ERC20 public usdc;\\n    ERC20 public weth; \\n    ERC20 public wbtc; \\n\\n    IBeyondPricer public pricer;\\n    IOptionExchange public optionExchange; \\n    IAlphaPortfolioValuesFeed public portfolioValuesFeed;\\n\\n    constructor(\\n        ERC20 _usdc,\\n        ERC20 _weth, \\n        ERC20 _wbtc,\\n        IBeyondPricer _pricer,\\n        IOptionExchange _optionExchange,\\n        IAlphaPortfolioValuesFeed _portfolioValuesFeed\\n    ) {\\n        usdc = _usdc;\\n        weth = _weth; \\n        wbtc = _wbtc;\\n        pricer = _pricer;\\n        optionExchange = _optionExchange;\\n        portfolioValuesFeed = _portfolioValuesFeed;\\n    }\\n\\n    // EXTERNAL FUNCTIONS //  \\n\\n    function allApprove() external {\\n        usdc.approve(address(optionExchange), type(uint256).max);\\n        weth.approve(address(optionExchange), type(uint256).max);\\n        wbtc.approve(address(optionExchange), type(uint256).max);\\n    }   \\n\\n    // PUBLIC FUNCTIONS //  \\n\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) public view override returns (\\n        address token,\\n        uint256 amount\\n    ) {\\n        (\\n            ICombinedActions.OperationProcedures[] memory operationProcedures\\n        ) = decodeFromRyskFinance(parameters);\\n\\n        address verificationAddress;\\n\\n        uint256 lenRyskActionArgs;\\n\\n        for (uint256 i; i < operationProcedures.length; i++) {\\n            if (operationProcedures[i].operation == ICombinedActions.OperationType.RYSK) {\\n                    lenRyskActionArgs++;\\n            }\\n        }\\n        \\n        ICombinedActions.ActionArgs[] memory ryskActionArgs = new ICombinedActions.ActionArgs[](lenRyskActionArgs);\\n\\n        for (uint256 i; i < lenRyskActionArgs; i++) {\\n            if (operationProcedures[i].operation == ICombinedActions.OperationType.RYSK) {\\n                for (uint256 index; index < operationProcedures[i].operationQueue.length; index++) {\\n                    ryskActionArgs[i] = operationProcedures[i].operationQueue[index];\\n                }\\n            }\\n        }\\n\\n        for (uint256 i; i < lenRyskActionArgs; i++) {\\n            if (ryskActionArgs[i].actionType == 1 || ryskActionArgs[i].actionType == 2) {\\n                address collateral = ryskActionArgs[i].optionSeries.collateral;\\n\\n                if (verificationAddress == address(0)) {\\n                    verificationAddress = collateral;\\n                }\\n\\n                require(collateral == verificationAddress, \\\"different collateral tokens\\\");\\n                token = collateral;\\n\\n                amount += ryskActionArgs[i].indexOrAcceptablePremium;\\n            }\\n        }\\n    }    \\n\\n    function getOtokensAddresses(ICombinedActions.OperationProcedures[] memory operationProcedures) public view returns (address[] memory) {\\n        uint256 lenRyskActionArgs;\\n\\n        for (uint256 i; i < operationProcedures.length; i++) {\\n            if (operationProcedures[i].operation == ICombinedActions.OperationType.RYSK) {\\n                    lenRyskActionArgs++;\\n            }\\n        }\\n        \\n        ICombinedActions.ActionArgs[] memory ryskActionArgs = new ICombinedActions.ActionArgs[](lenRyskActionArgs);\\n\\n        for (uint256 i; i < lenRyskActionArgs; i++) {\\n            if (operationProcedures[i].operation == ICombinedActions.OperationType.RYSK) {\\n                for (uint256 index; index < operationProcedures[i].operationQueue.length; index++) {\\n                    ryskActionArgs[i] = operationProcedures[i].operationQueue[index];\\n                }\\n            }\\n        }\\n\\n        uint256 indexArrOtokens = 0;\\n        address[] memory arrOtokens = new address[](lenRyskActionArgs);\\n        \\n        for (uint256 i; i < lenRyskActionArgs; i++) {\\n            if (ryskActionArgs[i].actionType == 1 || ryskActionArgs[i].actionType == 2) {\\n                (address seriesAddress,,) = optionExchange.getOptionDetails(address(0), ryskActionArgs[i].optionSeries);\\n                arrOtokens[indexArrOtokens] = seriesAddress;\\n                indexArrOtokens++;\\n            }\\n\\n        }\\n        return arrOtokens;\\n    }\\n\\n    // INTERNAL FUNCTIONS //    \\n\\n    function _processTx(\\n        bytes memory parameters, \\n        uint256 buildID,\\n        address user\\n    ) internal override {\\n        (\\n            ICombinedActions.OperationProcedures[] memory operationProcedures\\n        ) = decodeFromRyskFinance(parameters);\\n        \\n        (address token, ) = calculateAmount(parameters);\\n        \\n        optionExchange.operate(operationProcedures);\\n\\n        address[] memory oTokens = getOtokensAddresses(operationProcedures);\\n        \\n        for (uint256 i; i < oTokens.length; i++) {\\n            ERC20(oTokens[i]).transfer(user, ERC20(oTokens[i]).balanceOf(address(this)));\\n        }\\n\\n        uint256 balanceUSDC = ERC20(usdc).balanceOf(address(this));\\n        if (balanceUSDC != 0) {\\n            ERC20(usdc).transfer(user, balanceUSDC);\\n        }\\n\\n        uint256 balanceWETH = ERC20(weth).balanceOf(address(this));\\n        if (balanceWETH != 0) {\\n            ERC20(weth).transfer(user, balanceWETH);\\n        }\\n\\n        uint256 balanceWBTC = ERC20(wbtc).balanceOf(address(this));\\n        if (balanceWBTC != 0) {\\n            ERC20(wbtc).transfer(user, balanceWBTC);\\n        }\\n        \\n        emit OpenPositionByRyskFinance(buildID, token, operationProcedures);\\n    }\\n\\n    // PURE FUNCTIONS //\\n\\n    function encodeFromRyskFinance(\\n        ICombinedActions.OperationProcedures[] memory operationProcedures\\n    ) external pure returns (bytes memory paramData) {\\n        return abi.encode(operationProcedures);\\n    }\\n\\n    function decodeFromRyskFinance(\\n        bytes memory paramData\\n    ) public pure returns (\\n        ICombinedActions.OperationProcedures[] memory operationProcedures\\n    ) {\\n        (\\n            operationProcedures\\n        ) = abi.decode(paramData, (\\n            ICombinedActions.OperationProcedures[]\\n        ));\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xe84cc278433716cfcb8887ab284e1d0dfdcb0d50447f6f13661d3e798ab9e05d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063a6138ed911610066578063a6138ed9146102a0578063ad4bb908146102be578063dfea90c1146102c8578063f2fde38b146102f857610100565b8063715018a6146102175780637294eb40146102215780637531a64e146102515780638da5cb5b1461028257610100565b80633e413bee116100d35780633e413bee1461019f5780633fc8cef3146101bd578063532785c7146101db5780635fb480c9146101f957610100565b8063150b7a02146101055780631b116e95146101355780633819137a146101655780633cdc538914610181575b600080fd5b61011f600480360381019061011a9190611959565b610314565b60405161012c9190611a1c565b60405180910390f35b61014f600480360381019061014a9190612032565b610342565b60405161015c9190612103565b60405180910390f35b61017f600480360381019061017a9190612125565b61036b565b005b61018961037b565b60405161019691906121f3565b60405180910390f35b6101a76103a1565b6040516101b491906121f3565b60405180910390f35b6101c56103c7565b6040516101d291906121f3565b60405180910390f35b6101e36103ed565b6040516101f0919061222f565b60405180910390f35b610201610413565b60405161020e919061226b565b60405180910390f35b61021f610439565b005b61023b60048036038101906102369190612286565b61044d565b60405161024891906126dd565b60405180910390f35b61026b60048036038101906102669190612286565b61046a565b60405161027992919061271d565b60405180910390f35b61028a6107c4565b6040516102979190612746565b60405180910390f35b6102a86107ed565b6040516102b59190612782565b60405180910390f35b6102c6610813565b005b6102e260048036038101906102dd9190612032565b610aeb565b6040516102ef919061284c565b60405180910390f35b610312600480360381019061030d919061286e565b610eb8565b005b60007f150b7a023d4804d13e8c85fb27262cb750cf6ba9f9dd3bb30d90f482ceeb4b1f905095945050505050565b60608160405160200161035591906126dd565b6040516020818303038152906040529050919050565b610376838383610f3c565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104416115d8565b61044b6000611656565b565b6060818060200190518101906104639190612cfc565b9050919050565b60008060006104788461044d565b905060008060005b83518110156104f55760018081111561049c5761049b6122fb565b5b8482815181106104af576104ae612d45565b5b60200260200101516000015160018111156104cd576104cc6122fb565b5b14156104e25781806104de90612da3565b9250505b80806104ed90612da3565b915050610480565b5060008167ffffffffffffffff81111561051257610511611a48565b5b60405190808252806020026020018201604052801561054b57816020015b610538611722565b8152602001906001900390816105305790505b50905060005b8281101561064c5760018081111561056c5761056b6122fb565b5b85828151811061057f5761057e612d45565b5b602002602001015160000151600181111561059d5761059c6122fb565b5b14156106395760005b8582815181106105b9576105b8612d45565b5b60200260200101516020015151811015610637578582815181106105e0576105df612d45565b5b60200260200101516020015181815181106105fe576105fd612d45565b5b602002602001015183838151811061061957610618612d45565b5b6020026020010181905250808061062f90612da3565b9150506105a6565b505b808061064490612da3565b915050610551565b5060005b828110156107ba57600182828151811061066d5761066c612d45565b5b60200260200101516000015114806106a35750600282828151811061069557610694612d45565b5b602002602001015160000151145b156107a75760008282815181106106bd576106bc612d45565b5b602002602001015160c0015160a001519050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610708578094505b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076d90612e49565b60405180910390fd5b80975082828151811061078c5761078b612d45565b5b602002602001015160e00151876107a39190612e69565b9650505b80806107b290612da3565b915050610650565b5050505050915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016108b292919061271d565b602060405180830381600087803b1580156108cc57600080fd5b505af11580156108e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109049190612ebf565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016109a492919061271d565b602060405180830381600087803b1580156109be57600080fd5b505af11580156109d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f69190612ebf565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610a9692919061271d565b602060405180830381600087803b158015610ab057600080fd5b505af1158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae89190612ebf565b50565b60606000805b8351811015610b6657600180811115610b0d57610b0c6122fb565b5b848281518110610b2057610b1f612d45565b5b6020026020010151600001516001811115610b3e57610b3d6122fb565b5b1415610b53578180610b4f90612da3565b9250505b8080610b5e90612da3565b915050610af1565b5060008167ffffffffffffffff811115610b8357610b82611a48565b5b604051908082528060200260200182016040528015610bbc57816020015b610ba9611722565b815260200190600190039081610ba15790505b50905060005b82811015610cbd57600180811115610bdd57610bdc6122fb565b5b858281518110610bf057610bef612d45565b5b6020026020010151600001516001811115610c0e57610c0d6122fb565b5b1415610caa5760005b858281518110610c2a57610c29612d45565b5b60200260200101516020015151811015610ca857858281518110610c5157610c50612d45565b5b6020026020010151602001518181518110610c6f57610c6e612d45565b5b6020026020010151838381518110610c8a57610c89612d45565b5b60200260200101819052508080610ca090612da3565b915050610c17565b505b8080610cb590612da3565b915050610bc2565b506000808367ffffffffffffffff811115610cdb57610cda611a48565b5b604051908082528060200260200182016040528015610d095781602001602082028036833780820191505090505b50905060005b84811015610eab576001848281518110610d2c57610d2b612d45565b5b6020026020010151600001511480610d6257506002848281518110610d5457610d53612d45565b5b602002602001015160000151145b15610e98576000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2476f3d6000878581518110610dbc57610dbb612d45565b5b602002602001015160c001516040518363ffffffff1660e01b8152600401610de5929190612f67565b6101006040518083038186803b158015610dfe57600080fd5b505afa158015610e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e369190612f90565b5050905080838581518110610e4e57610e4d612d45565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508380610e9390612da3565b945050505b8080610ea390612da3565b915050610d0f565b5080945050505050919050565b610ec06115d8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2790613056565b60405180910390fd5b610f3981611656565b50565b6000610f478461044d565b90506000610f548561046a565b509050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166314b6c4c6836040518263ffffffff1660e01b8152600401610fb291906126dd565b600060405180830381600087803b158015610fcc57600080fd5b505af1158015610fe0573d6000803e3d6000fd5b505050506000610fef83610aeb565b905060005b815181101561115a578181815181106110105761100f612d45565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8684848151811061104757611046612d45565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110879190612746565b60206040518083038186803b15801561109f57600080fd5b505afa1580156110b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d79190613076565b6040518363ffffffff1660e01b81526004016110f492919061271d565b602060405180830381600087803b15801561110e57600080fd5b505af1158015611122573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111469190612ebf565b50808061115290612da3565b915050610ff4565b506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111b89190612746565b60206040518083038186803b1580156111d057600080fd5b505afa1580156111e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112089190613076565b9050600081146112c357600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86836040518363ffffffff1660e01b815260040161126f92919061271d565b602060405180830381600087803b15801561128957600080fd5b505af115801561129d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c19190612ebf565b505b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113209190612746565b60206040518083038186803b15801561133857600080fd5b505afa15801561134c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113709190613076565b90506000811461142b57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb87836040518363ffffffff1660e01b81526004016113d792919061271d565b602060405180830381600087803b1580156113f157600080fd5b505af1158015611405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114299190612ebf565b505b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114889190612746565b60206040518083038186803b1580156114a057600080fd5b505afa1580156114b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d89190613076565b90506000811461159357600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88836040518363ffffffff1660e01b815260040161153f92919061271d565b602060405180830381600087803b15801561155957600080fd5b505af115801561156d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115919190612ebf565b505b877feb749712d2654f72d79433c37e4c3049c7de50f55000ee9d6b9f951656301b6f86886040516115c59291906130a3565b60405180910390a2505050505050505050565b6115e061171a565b73ffffffffffffffffffffffffffffffffffffffff166115fe6107c4565b73ffffffffffffffffffffffffffffffffffffffff1614611654576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164b9061311f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60405180610120016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016117a26117b6565b815260200160008152602001606081525090565b6040518060c00160405280600067ffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061188b82611860565b9050919050565b61189b81611880565b81146118a657600080fd5b50565b6000813590506118b881611892565b92915050565b6000819050919050565b6118d1816118be565b81146118dc57600080fd5b50565b6000813590506118ee816118c8565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611919576119186118f4565b5b8235905067ffffffffffffffff811115611936576119356118f9565b5b602083019150836001820283011115611952576119516118fe565b5b9250929050565b60008060008060006080868803121561197557611974611856565b5b6000611983888289016118a9565b9550506020611994888289016118a9565b94505060406119a5888289016118df565b935050606086013567ffffffffffffffff8111156119c6576119c561185b565b5b6119d288828901611903565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611a16816119e1565b82525050565b6000602082019050611a316000830184611a0d565b92915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611a8082611a37565b810181811067ffffffffffffffff82111715611a9f57611a9e611a48565b5b80604052505050565b6000611ab261184c565b9050611abe8282611a77565b919050565b600067ffffffffffffffff821115611ade57611add611a48565b5b602082029050602081019050919050565b600080fd5b600080fd5b60028110611b0657600080fd5b50565b600081359050611b1881611af9565b92915050565b600067ffffffffffffffff821115611b3957611b38611a48565b5b602082029050602081019050919050565b600067ffffffffffffffff82169050919050565b611b6781611b4a565b8114611b7257600080fd5b50565b600081359050611b8481611b5e565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b611baf81611b8a565b8114611bba57600080fd5b50565b600081359050611bcc81611ba6565b92915050565b60008115159050919050565b611be781611bd2565b8114611bf257600080fd5b50565b600081359050611c0481611bde565b92915050565b600060c08284031215611c2057611c1f611aef565b5b611c2a60c0611aa8565b90506000611c3a84828501611b75565b6000830152506020611c4e84828501611bbd565b6020830152506040611c6284828501611bf5565b6040830152506060611c76848285016118a9565b6060830152506080611c8a848285016118a9565b60808301525060a0611c9e848285016118a9565b60a08301525092915050565b600080fd5b600067ffffffffffffffff821115611cca57611cc9611a48565b5b611cd382611a37565b9050602081019050919050565b82818337600083830152505050565b6000611d02611cfd84611caf565b611aa8565b905082815260208101848484011115611d1e57611d1d611caa565b5b611d29848285611ce0565b509392505050565b600082601f830112611d4657611d456118f4565b5b8135611d56848260208601611cef565b91505092915050565b60006101c08284031215611d7657611d75611aef565b5b611d81610120611aa8565b90506000611d91848285016118df565b6000830152506020611da5848285016118a9565b6020830152506040611db9848285016118a9565b6040830152506060611dcd848285016118a9565b6060830152506080611de1848285016118df565b60808301525060a0611df5848285016118df565b60a08301525060c0611e0984828501611c0a565b60c083015250610180611e1e848285016118df565b60e0830152506101a082013567ffffffffffffffff811115611e4357611e42611af4565b5b611e4f84828501611d31565b6101008301525092915050565b6000611e6f611e6a84611b1e565b611aa8565b90508083825260208201905060208402830185811115611e9257611e916118fe565b5b835b81811015611ed957803567ffffffffffffffff811115611eb757611eb66118f4565b5b808601611ec48982611d5f565b85526020850194505050602081019050611e94565b5050509392505050565b600082601f830112611ef857611ef76118f4565b5b8135611f08848260208601611e5c565b91505092915050565b600060408284031215611f2757611f26611aef565b5b611f316040611aa8565b90506000611f4184828501611b09565b600083015250602082013567ffffffffffffffff811115611f6557611f64611af4565b5b611f7184828501611ee3565b60208301525092915050565b6000611f90611f8b84611ac3565b611aa8565b90508083825260208201905060208402830185811115611fb357611fb26118fe565b5b835b81811015611ffa57803567ffffffffffffffff811115611fd857611fd76118f4565b5b808601611fe58982611f11565b85526020850194505050602081019050611fb5565b5050509392505050565b600082601f830112612019576120186118f4565b5b8135612029848260208601611f7d565b91505092915050565b60006020828403121561204857612047611856565b5b600082013567ffffffffffffffff8111156120665761206561185b565b5b61207284828501612004565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156120b557808201518184015260208101905061209a565b838111156120c4576000848401525b50505050565b60006120d58261207b565b6120df8185612086565b93506120ef818560208601612097565b6120f881611a37565b840191505092915050565b6000602082019050818103600083015261211d81846120ca565b905092915050565b60008060006060848603121561213e5761213d611856565b5b600084013567ffffffffffffffff81111561215c5761215b61185b565b5b61216886828701611d31565b9350506020612179868287016118df565b925050604061218a868287016118a9565b9150509250925092565b6000819050919050565b60006121b96121b46121af84611860565b612194565b611860565b9050919050565b60006121cb8261219e565b9050919050565b60006121dd826121c0565b9050919050565b6121ed816121d2565b82525050565b600060208201905061220860008301846121e4565b92915050565b6000612219826121c0565b9050919050565b6122298161220e565b82525050565b60006020820190506122446000830184612220565b92915050565b6000612255826121c0565b9050919050565b6122658161224a565b82525050565b6000602082019050612280600083018461225c565b92915050565b60006020828403121561229c5761229b611856565b5b600082013567ffffffffffffffff8111156122ba576122b961185b565b5b6122c684828501611d31565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061233b5761233a6122fb565b5b50565b600081905061234c8261232a565b919050565b600061235c8261233e565b9050919050565b61236c81612351565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6123a7816118be565b82525050565b6123b681611880565b82525050565b6123c581611b4a565b82525050565b6123d481611b8a565b82525050565b6123e381611bd2565b82525050565b60c0820160008201516123ff60008501826123bc565b50602082015161241260208501826123cb565b50604082015161242560408501826123da565b50606082015161243860608501826123ad565b50608082015161244b60808501826123ad565b5060a082015161245e60a08501826123ad565b50505050565b600082825260208201905092915050565b60006124808261207b565b61248a8185612464565b935061249a818560208601612097565b6124a381611a37565b840191505092915050565b60006101c0830160008301516124c7600086018261239e565b5060208301516124da60208601826123ad565b5060408301516124ed60408601826123ad565b50606083015161250060608601826123ad565b506080830151612513608086018261239e565b5060a083015161252660a086018261239e565b5060c083015161253960c08601826123e9565b5060e083015161254d61018086018261239e565b506101008301518482036101a08601526125678282612475565b9150508091505092915050565b600061258083836124ae565b905092915050565b6000602082019050919050565b60006125a082612372565b6125aa818561237d565b9350836020820285016125bc8561238e565b8060005b858110156125f857848403895281516125d98582612574565b94506125e483612588565b925060208a019950506001810190506125c0565b50829750879550505050505092915050565b60006040830160008301516126226000860182612363565b506020830151848203602086015261263a8282612595565b9150508091505092915050565b6000612653838361260a565b905092915050565b6000602082019050919050565b6000612673826122cf565b61267d81856122da565b93508360208202850161268f856122eb565b8060005b858110156126cb57848403895281516126ac8582612647565b94506126b78361265b565b925060208a01995050600181019050612693565b50829750879550505050505092915050565b600060208201905081810360008301526126f78184612668565b905092915050565b61270881611880565b82525050565b612717816118be565b82525050565b600060408201905061273260008301856126ff565b61273f602083018461270e565b9392505050565b600060208201905061275b60008301846126ff565b92915050565b600061276c826121c0565b9050919050565b61277c81612761565b82525050565b60006020820190506127976000830184612773565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006127d583836123ad565b60208301905092915050565b6000602082019050919050565b60006127f98261279d565b61280381856127a8565b935061280e836127b9565b8060005b8381101561283f57815161282688826127c9565b9750612831836127e1565b925050600181019050612812565b5085935050505092915050565b6000602082019050818103600083015261286681846127ee565b905092915050565b60006020828403121561288457612883611856565b5b6000612892848285016118a9565b91505092915050565b6000815190506128aa81611af9565b92915050565b6000815190506128bf816118c8565b92915050565b6000815190506128d481611892565b92915050565b6000815190506128e981611b5e565b92915050565b6000815190506128fe81611ba6565b92915050565b60008151905061291381611bde565b92915050565b600060c0828403121561292f5761292e611aef565b5b61293960c0611aa8565b90506000612949848285016128da565b600083015250602061295d848285016128ef565b602083015250604061297184828501612904565b6040830152506060612985848285016128c5565b6060830152506080612999848285016128c5565b60808301525060a06129ad848285016128c5565b60a08301525092915050565b60006129cc6129c784611caf565b611aa8565b9050828152602081018484840111156129e8576129e7611caa565b5b6129f3848285612097565b509392505050565b600082601f830112612a1057612a0f6118f4565b5b8151612a208482602086016129b9565b91505092915050565b60006101c08284031215612a4057612a3f611aef565b5b612a4b610120611aa8565b90506000612a5b848285016128b0565b6000830152506020612a6f848285016128c5565b6020830152506040612a83848285016128c5565b6040830152506060612a97848285016128c5565b6060830152506080612aab848285016128b0565b60808301525060a0612abf848285016128b0565b60a08301525060c0612ad384828501612919565b60c083015250610180612ae8848285016128b0565b60e0830152506101a082015167ffffffffffffffff811115612b0d57612b0c611af4565b5b612b19848285016129fb565b6101008301525092915050565b6000612b39612b3484611b1e565b611aa8565b90508083825260208201905060208402830185811115612b5c57612b5b6118fe565b5b835b81811015612ba357805167ffffffffffffffff811115612b8157612b806118f4565b5b808601612b8e8982612a29565b85526020850194505050602081019050612b5e565b5050509392505050565b600082601f830112612bc257612bc16118f4565b5b8151612bd2848260208601612b26565b91505092915050565b600060408284031215612bf157612bf0611aef565b5b612bfb6040611aa8565b90506000612c0b8482850161289b565b600083015250602082015167ffffffffffffffff811115612c2f57612c2e611af4565b5b612c3b84828501612bad565b60208301525092915050565b6000612c5a612c5584611ac3565b611aa8565b90508083825260208201905060208402830185811115612c7d57612c7c6118fe565b5b835b81811015612cc457805167ffffffffffffffff811115612ca257612ca16118f4565b5b808601612caf8982612bdb565b85526020850194505050602081019050612c7f565b5050509392505050565b600082601f830112612ce357612ce26118f4565b5b8151612cf3848260208601612c47565b91505092915050565b600060208284031215612d1257612d11611856565b5b600082015167ffffffffffffffff811115612d3057612d2f61185b565b5b612d3c84828501612cce565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612dae826118be565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612de157612de0612d74565b5b600182019050919050565b600082825260208201905092915050565b7f646966666572656e7420636f6c6c61746572616c20746f6b656e730000000000600082015250565b6000612e33601b83612dec565b9150612e3e82612dfd565b602082019050919050565b60006020820190508181036000830152612e6281612e26565b9050919050565b6000612e74826118be565b9150612e7f836118be565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612eb457612eb3612d74565b5b828201905092915050565b600060208284031215612ed557612ed4611856565b5b6000612ee384828501612904565b91505092915050565b60c082016000820151612f0260008501826123bc565b506020820151612f1560208501826123cb565b506040820151612f2860408501826123da565b506060820151612f3b60608501826123ad565b506080820151612f4e60808501826123ad565b5060a0820151612f6160a08501826123ad565b50505050565b600060e082019050612f7c60008301856126ff565b612f896020830184612eec565b9392505050565b60008060006101008486031215612faa57612fa9611856565b5b6000612fb8868287016128c5565b9350506020612fc986828701612919565b92505060e0612fda868287016128ef565b9150509250925092565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613040602683612dec565b915061304b82612fe4565b604082019050919050565b6000602082019050818103600083015261306f81613033565b9050919050565b60006020828403121561308c5761308b611856565b5b600061309a848285016128b0565b91505092915050565b60006040820190506130b860008301856126ff565b81810360208301526130ca8184612668565b90509392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613109602083612dec565b9150613114826130d3565b602082019050919050565b60006020820190508181036000830152613138816130fc565b905091905056fea2646970667358221220df280601908d03d5a5d6cd6e303a5ca46f0a91f44c33fd07ce6031b481a3f01664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateAmount(bytes)": {
        "details": "See {IBaseTxBuilderOpen-calculateAmount}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "processTx(bytes,uint256,address)": {
        "details": "See {IBaseTxBuilderOpen-processTx}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1110,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "usdc",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ERC20)699"
      },
      {
        "astId": 1113,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "weth",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ERC20)699"
      },
      {
        "astId": 1116,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "wbtc",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ERC20)699"
      },
      {
        "astId": 1119,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "pricer",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IBeyondPricer)956"
      },
      {
        "astId": 1122,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "optionExchange",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IOptionExchange)1034"
      },
      {
        "astId": 1125,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "portfolioValuesFeed",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IAlphaPortfolioValuesFeed)933"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20)699": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IAlphaPortfolioValuesFeed)933": {
        "encoding": "inplace",
        "label": "contract IAlphaPortfolioValuesFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IBeyondPricer)956": {
        "encoding": "inplace",
        "label": "contract IBeyondPricer",
        "numberOfBytes": "20"
      },
      "t_contract(IOptionExchange)1034": {
        "encoding": "inplace",
        "label": "contract IOptionExchange",
        "numberOfBytes": "20"
      }
    }
  }
}