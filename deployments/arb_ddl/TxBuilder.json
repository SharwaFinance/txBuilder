{
  "address": "0x9C22123ffecAf575F93e5FA21DEeb43696A10ad3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchanger",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "productType",
          "type": "uint256"
        }
      ],
      "name": "CreateBuild",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "allApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "moduleAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct ITxBuilder.Module[]",
          "name": "moduleArray",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes[]",
          "name": "parametersArray",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "swapDataArray",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "productType",
          "type": "uint256"
        }
      ],
      "name": "consolidationOfTransactions",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchanger",
      "outputs": [
        {
          "internalType": "contract Exchanger",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "module",
      "outputs": [
        {
          "internalType": "address",
          "name": "moduleAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextBuildID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exchangerAddress",
          "type": "address"
        }
      ],
      "name": "setExchanger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "moduleAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct ITxBuilder.Module",
          "name": "modData",
          "type": "tuple"
        }
      ],
      "name": "setModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x06ccd3150f8668b37bdeb3b1d7a78ddebc75c881a83fcc9c75bba7b4370ad84c",
  "receipt": {
    "to": null,
    "from": "0x8B57f3a9bDf2cfdBF9B2627ff8bEa86fB5641a50",
    "contractAddress": "0x9C22123ffecAf575F93e5FA21DEeb43696A10ad3",
    "transactionIndex": 1,
    "gasUsed": "7867763",
    "logsBloom": "0x
    "blockHash": "0x3cf1587f5bdff8d8063f5b06fcfc0f6bad11bbb8ad97bed687385ea9a36eb957",
    "transactionHash": "0x06ccd3150f8668b37bdeb3b1d7a78ddebc75c881a83fcc9c75bba7b4370ad84c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 143163185,
        "transactionHash": "0x06ccd3150f8668b37bdeb3b1d7a78ddebc75c881a83fcc9c75bba7b4370ad84c",
        "address": "0x9C22123ffecAf575F93e5FA21DEeb43696A10ad3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b57f3a9bdf2cfdbf9b2627ff8bea86fb5641a50"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3cf1587f5bdff8d8063f5b06fcfc0f6bad11bbb8ad97bed687385ea9a36eb957"
      }
    ],
    "blockNumber": 143163185,
    "cumulativeGasUsed": "7867763",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb5a9a964E4bE759FF06D18BD5BB5060B3F65087c"
  ],
  "numDeployments": 1,
  "solcInputHash": "bbe1494aa8cb1ccf942a0a0e74d3ef7f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchanger\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productType\",\"type\":\"uint256\"}],\"name\":\"CreateBuild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct ITxBuilder.Module[]\",\"name\":\"moduleArray\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"parametersArray\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"swapDataArray\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"productType\",\"type\":\"uint256\"}],\"name\":\"consolidationOfTransactions\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchanger\",\"outputs\":[{\"internalType\":\"contract Exchanger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"module\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBuildID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchangerAddress\",\"type\":\"address\"}],\"name\":\"setExchanger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct ITxBuilder.Module\",\"name\":\"modData\",\"type\":\"tuple\"}],\"name\":\"setModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0nika0\",\"details\":\"This contract manages the consolidation of transactions and products, allowing users to create and interact with modules. It enables users to consolidate multiple transactions into one and create products through modules.\",\"kind\":\"dev\",\"methods\":{\"allApprove(address,address,uint256)\":{\"details\":\"See {ITxBuilder-allApprove}.\"},\"consolidationOfTransactions((address,string)[],bytes[],bytes[],uint256)\":{\"details\":\"See {ITxBuilder-consolidationOfTransactions}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setExchanger(address)\":{\"details\":\"See {ITxBuilder-setExchanger}.\"},\"setModule(uint256,(address,string))\":{\"details\":\"See {ITxBuilder-setModule}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawERC20(address,address,uint256)\":{\"details\":\"See {ITxBuilder-withdrawERC20}.\"},\"withdrawETH(address,uint256)\":{\"details\":\"See {ITxBuilder-withdrawETH}.\"}},\"title\":\"TxBuilder\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TxBuilder.sol\":\"TxBuilder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/IBaseTxBuilderOpen.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\n\\ninterface IBaseTxBuilderOpen {\\n    // PUBLIC FUNCTONS //\\n\\n    /**\\n     * @notice Calculate the amount of a token based on provided parameters.\\n     * @dev This function calculates the amount of a token based on a set of input parameters.\\n     * @param parameters The encoded parameters for the calculation.\\n     * @return token The address of the token to be calculated.\\n     * @return amount The calculated amount of the token.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) external view returns (\\n        address token,\\n        uint256 amount\\n    ); \\n\\n     // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @notice Process a transaction for opening an option position.\\n     * @dev This function processes a transaction for opening an option position based on the provided parameters.\\n     * @param parametersArray The encoded parameters for opening the option position.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param user The address of the user who is opening the option position.\\n     */\\n    function processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) external;\\n\\n\\n\\n}\\n\",\"keccak256\":\"0xe97c16dcf0d4746277867ab4ead00665161b2535fde4a2cbb31a51e691780302\",\"license\":\"GPL-3.0-or-later\"},\"contracts/ITxBuilder.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\ninterface ITxBuilder {\\n    // STRUCTS //\\n\\n    /**\\n     * @title Module\\n     * @dev A structure representing a modular component.\\n     * \\n     * This structure is used to store information about a modular component, including its address and a human-readable name.\\n     */\\n    struct Module {\\n        address moduleAddress; // The address of the module component.\\n        string name;           // A human-readable name for the module.\\n    }\\n\\n    // OWNER FUNCTIONS //\\n\\n    /**\\n     * @notice Set the address of the Exchanger contract.\\n     * @dev This external function allows the contract owner to set the address of the Exchanger contract.\\n     * @param exchangerAddress The address of the Exchanger contract.\\n     */\\n    function setExchanger(address exchangerAddress) external;\\n\\n    /**\\n     * @notice Set a module at a specific index.\\n     * @dev This external function allows the contract owner to set a module's data at a specific index.\\n     * @param index The index at which to set the module.\\n     * @param modData The module data to set.\\n     */\\n    function setModule(uint256 index, Module calldata modData) external;\\n\\n    /**\\n     * @notice Approve the spending of a specified amount of tokens by a given address.\\n     * @dev This external function allows the contract owner to approve the spending of a specified amount of tokens by a specific address.\\n     * @param token The address of the token contract.\\n     * @param to The address that will be approved to spend the tokens.\\n     * @param amount The amount of tokens to approve for spending.\\n     */\\n    function allApprove(address token, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraw Ether (ETH) to a specified user address.\\n     * @dev This external function allows the contract owner to withdraw Ether (ETH) to a specified user address.\\n     * @param user The address of the user to receive the ETH.\\n     * @param amount The amount of ETH to withdraw.\\n     */\\n    function withdrawETH(address user, uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraw ERC20 tokens to a specified user address.\\n     * @dev This external function allows the contract owner to withdraw ERC20 tokens to a specified user address.\\n     * @param token The address of the ERC20 token contract.\\n     * @param user The address of the user to receive the tokens.\\n     * @param amount The amount of tokens to withdraw.\\n     */\\n    function withdrawERC20(address token, address user, uint256 amount) external;\\n\\n    // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @notice Consolidate and execute multiple transactions in a single call.\\n     * @dev This external function allows users to consolidate and execute multiple transactions across different modules in a single call. \\n     * It takes an array of modules, parameters, and swap data, and executes the transactions sequentially. \\n     * The function ensures that the lengths of the arrays are equal and validates the required message value for each swap.\\n     * @param moduleArray An array of Module structs representing the modules to interact with.\\n     * @param parametersArray An array of encoded parameters for each module's transaction.\\n     * @param swapDataArray An array of encoded swap data for each module's transaction.\\n     * @param productType The type of product or operation being performed.\\n     */\\n    function consolidationOfTransactions(\\n        Module[] memory moduleArray, \\n        bytes[] memory parametersArray,\\n        bytes[] memory swapDataArray,  \\n        uint256 productType\\n    ) external payable;\\n\\n    // EVENTS //\\n\\n    /**\\n     * @dev An event emitted when a build or product is created.\\n     * \\n     * This event is triggered when a user creates a new build or product, and it provides information about the build ID,\\n     * the user who created it, and the product type associated with the build.\\n     * \\n     * @param buildID The unique identifier for the created build.\\n     * @param user The address of the user who created the build.\\n     * @param productType The type of product associated with the build.\\n     */\\n    event CreateBuild(\\n        uint256 buildID,\\n        address indexed user,\\n        uint256 productType\\n    );\\n\\n}\",\"keccak256\":\"0x2786d5b5f0e37fce63e96e3882bd0b8b57eaea53219b38b12d24a66bf9f97a90\",\"license\":\"GPL-3.0-or-later\"},\"contracts/RoleManager.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract RoleManager is Ownable, AccessControl {\\n    bytes32 public constant TRADER_ROLE = keccak256(\\\"TRADER_ROLE\\\");\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setRoleAdmin(TRADER_ROLE, DEFAULT_ADMIN_ROLE);\\n    }\\n\\n    // EXTERNAL\\n\\n    function changeRole(address value, bytes32 role, bool state) external {\\n        if (state) {\\n            grantRole(role, value);\\n        } else {\\n            revokeRole(role, value);\\n        }\\n    }\\n\\n    // DEFAULT_ADMIN_ROLE\\n\\n    function changeAdminRole(bytes32 role, bytes32 adminRole) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"msg.sender does not own the role\\\");\\n        _setRoleAdmin(role, adminRole);\\n    }\\n\\n    function renounceAdminRole(bytes32 role) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"msg.sender does not own the role\\\");\\n        require(getRoleAdmin(role) == DEFAULT_ADMIN_ROLE, \\\"non-default admin role\\\");\\n        _setRoleAdmin(role, role);\\n    }\\n}\",\"keccak256\":\"0x7739502dbb2ab15e51b671b30ffca337065feb84556fdc15e09fbe020993fe01\",\"license\":\"GPL-3.0-or-later\"},\"contracts/TxBuilder.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IBaseTxBuilderOpen} from \\\"./IBaseTxBuilderOpen.sol\\\";\\nimport {Exchanger} from \\\"./exchanger/Exchanger.sol\\\";\\nimport {ITxBuilder} from \\\"./ITxBuilder.sol\\\";\\n\\n/**\\n * @title TxBuilder\\n * @author 0nika0\\n * @dev This contract manages the consolidation of transactions and products, allowing users to create and interact with modules.\\n * It enables users to consolidate multiple transactions into one and create products through modules.\\n */\\ncontract TxBuilder is Ownable, ITxBuilder {\\n\\n    Exchanger public exchanger;\\n\\n    mapping(uint256 => Module) public module;\\n\\n    uint256 public nextBuildID = 1;\\n\\n    constructor(\\n        address _exchanger\\n    ) {\\n        exchanger = Exchanger(_exchanger);\\n    }\\n\\n    // OWNER FUNCTIONS //\\n\\n    /**\\n     * @dev See {ITxBuilder-setExchanger}.\\n     */\\n    function setExchanger(address exchangerAddress) external onlyOwner {\\n        exchanger = Exchanger(exchangerAddress);\\n    }\\n\\n    /**\\n     * @dev See {ITxBuilder-setModule}.\\n     */\\n    function setModule(uint256 index, Module calldata modData) external onlyOwner {\\n        module[index] = modData;\\n    }\\n\\n    /**\\n     * @dev See {ITxBuilder-allApprove}.\\n     */\\n    function allApprove(address token, address to, uint256 amount) external onlyOwner {\\n        ERC20(token).approve(to, amount);\\n    }   \\n\\n    /**\\n     * @dev See {ITxBuilder-withdrawETH}.\\n     */\\n    function withdrawETH(address user, uint256 amount) external onlyOwner {\\n        payable(user).transfer(amount);\\n    }\\n\\n    /**\\n     * @dev See {ITxBuilder-withdrawERC20}.\\n     */\\n    function withdrawERC20(address token, address user, uint256 amount) external onlyOwner {\\n        ERC20(token).transfer(user, amount);\\n    }\\n\\n    // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @dev See {ITxBuilder-consolidationOfTransactions}.\\n     */\\n    function consolidationOfTransactions(\\n        Module[] memory moduleArray, \\n        bytes[] memory parametersArray,\\n        bytes[] memory swapDataArray,  \\n        uint256 productType\\n    ) external payable {\\n        require(moduleArray.length == parametersArray.length && parametersArray.length == swapDataArray.length, \\\"arrays not equal\\\");\\n        \\n        exchanger.checkMsgValue(swapDataArray, msg.value);\\n\\n        for (uint i = 0; i < moduleArray.length; i++) {\\n            uint256 msgValue = exchanger.calculateMsgValue(swapDataArray[i]);\\n\\n            if (msgValue == 0) {\\n                exchanger.swap(swapDataArray[i], msg.sender, moduleArray[i].moduleAddress);\\n            } else {\\n                exchanger.swap{ value: msgValue }(swapDataArray[i], msg.sender, moduleArray[i].moduleAddress);\\n            }    \\n\\n            IBaseTxBuilderOpen(moduleArray[i].moduleAddress).processTx(parametersArray[i], nextBuildID, msg.sender);\\n        }\\n\\n        emit CreateBuild(nextBuildID, msg.sender, productType);\\n        nextBuildID++;\\n    }\\n}\\n\",\"keccak256\":\"0x54345ecbf52e241af2e51f1a00a69eec8f7850068300b3b18bd79cfd0d3eb6ba\",\"license\":\"GPL-3.0-or-later\"},\"contracts/exchanger/Exchanger.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {TransferHelper} from \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport {ISwapRouter} from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {RoleManager, Ownable} from \\\"../RoleManager.sol\\\";\\nimport {IExchanger} from \\\"./IExchanger.sol\\\";\\n\\n/**\\n * @title Exchanger\\n * @author 0nika0\\n * @dev A smart contract for executing token swaps and managing roles for traders.\\n * \\n * This contract allows users with the TRADER_ROLE to perform token swaps and enforces checks on the validity of swaps.\\n */\\ncontract Exchanger is Ownable, IExchanger {\\n\\n    ISwapRouter public swapRouter;\\n    RoleManager public roleManager;\\n\\n    constructor(\\n        address _swapRouter,\\n        address _roleManager\\n    ) {\\n        swapRouter = ISwapRouter(_swapRouter);\\n        roleManager = RoleManager(_roleManager);\\n    }\\n\\n    // EXTERNAL FUNCTIONS // \\n\\n    /**\\n     * @dev See {IExchanger-swap}.\\n     */\\n    function swap(bytes memory data, address from, address to) external payable {\\n        require(roleManager.hasRole(roleManager.TRADER_ROLE(), msg.sender), \\\"msg.sender not have TRADER_ROLE\\\");\\n        ExchangeData memory exchangeData = decodeFromExchange(data);\\n\\n        if (exchangeData.swap) {\\n            uint256 msgValue;\\n\\n            if (exchangeData.isETH) {\\n                msgValue = exchangeData.amountIn;\\n            } else {\\n                TransferHelper.safeTransferFrom(exchangeData.tokenIn, from, address(this), exchangeData.amountIn);\\n                TransferHelper.safeApprove(exchangeData.tokenIn, address(swapRouter), exchangeData.amountIn);\\n            }\\n\\n            ISwapRouter.ExactInputParams memory params =\\n                ISwapRouter.ExactInputParams({\\n                    path: exchangeData.path,\\n                    recipient: address(this),\\n                    deadline: block.timestamp,\\n                    amountIn: exchangeData.amountIn,\\n                    amountOutMinimum: exchangeData.amountOutMinimum\\n                });\\n\\n            uint256 amountOut = swapRouter.exactInput{value: msgValue}(params);\\n            ERC20(exchangeData.tokenOut).transfer(to, exchangeData.amountOutMinimum);\\n            require(amountOut >= exchangeData.amountOutMinimum, \\\"invalid swap\\\");\\n            ERC20(exchangeData.tokenOut).transfer(from, amountOut - exchangeData.amountOutMinimum);\\n            \\n            if (exchangeData.isETH && address(this).balance != 0) payable(to).transfer(address(this).balance);\\n        } else {\\n            ERC20(exchangeData.tokenIn).transferFrom(from, to, exchangeData.amountIn);\\n        }\\n    }\\n\\n    // PURE FUNCTIONS //\\n    \\n    /**\\n     * @dev See {IExchanger-checkMsgValue}.\\n     */\\n    function checkMsgValue(bytes[] memory swapDataArray, uint256 msgValue) external pure {\\n        uint256 msgValueCalc;\\n        for (uint i = 0; i < swapDataArray.length; i++) {\\n            ExchangeData memory exchangeData = decodeFromExchange(swapDataArray[i]);\\n            if (exchangeData.isETH && exchangeData.swap) {\\n                msgValueCalc += exchangeData.amountIn;\\n            }\\n        }\\n        require(msgValue == msgValueCalc, \\\"invalid msg.value\\\");\\n    }\\n\\n    /**\\n     * @dev See {IExchanger-calculateMsgValue}.\\n     */\\n    function calculateMsgValue(bytes memory swapData) external pure returns (uint256 value) {\\n        ExchangeData memory exchangeData = decodeFromExchange(swapData);\\n        if (exchangeData.isETH && exchangeData.swap) value = exchangeData.amountIn; \\n    }\\n\\n    /**\\n     * @dev See {IExchanger-encodeFromExchange}.\\n     */\\n    function encodeFromExchange(ExchangeData memory data) external pure returns (bytes memory paramData) {\\n        return abi.encode(data);\\n    }\\n\\n    /**\\n     * @dev See {IExchanger-decodeFromExchange}.\\n     */\\n    function decodeFromExchange(bytes memory paramData) public pure returns (ExchangeData memory data) {\\n        (\\n            data\\n        ) = abi.decode(paramData, (\\n            ExchangeData\\n        ));\\n    }\\n}\",\"keccak256\":\"0x6f8d36768def32343e7630b508b290d613ec663ba5b639e54d363abd4acf56d9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/exchanger/IExchanger.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\ninterface IExchanger {\\n    // STRUCTS //\\n    \\n    /**\\n     * @dev A struct representing data related to token swaps.\\n     * \\n     * This struct encapsulates information necessary for token swaps, including the token path, input and output tokens,\\n     * input amount, minimum expected output amount, flags to indicate whether tokens are ETH and if the swap should be executed.\\n     * \\n     * @param path The path of tokens to follow in the swap.\\n     * @param tokenIn The address of the input token.\\n     * @param tokenOut The address of the output token.\\n     * @param amountIn The amount of input tokens to swap.\\n     * @param amountOutMinimum The minimum amount of output tokens expected from the swap.\\n     * @param isETH A boolean indicating whether the input token is ETH (true if it is).\\n     * @param swap A boolean indicating whether the swap should be executed (true if it should).\\n     */\\n    struct ExchangeData {\\n        bytes path;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        bool isETH;\\n        bool swap;\\n    }\\n    \\n    // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @dev Allows a trader to perform a swap operation or a direct token transfer between addresses.\\n     * \\n     * This function can be used by traders to perform token swaps through a decentralized exchange or directly transfer tokens between addresses.\\n     * If the 'swap' flag in the provided data is set to true, a token swap is executed with specific details such as input and output tokens,\\n     * minimum expected output, and other swap-related parameters. If the 'swap' flag is set to false, a direct token transfer is performed between 'from' and 'to'.\\n     * \\n     * @param data The encoded swap or transfer data that includes information about the operation.\\n     * @param from The address from which tokens are transferred or swapped.\\n     * @param to The address that receives the tokens in the transfer or swap operation.\\n     * \\n     * Requirements:\\n     * - The caller must have the 'TRADER_ROLE'.\\n     */\\n    function swap(bytes memory data, address from, address to) external payable;\\n\\n    // PURE FUNCTIONS //\\n\\n    /**\\n     * @dev Verifies if the provided `msg.value` matches the calculated value based on a series of swap operations.\\n     * \\n     * This function checks if the provided `msg.value` matches the calculated value obtained by summing the input amounts of ETH for each swap operation.\\n     * It is used to ensure the correctness of `msg.value` when performing multiple swaps, preventing errors or discrepancies.\\n     * \\n     * @param swapDataArray An array of encoded swap data, each containing information about swap or transfer operations.\\n     * @param msgValue The expected `msg.value` to be validated against the calculated value.\\n     * \\n     * Requirements:\\n     * - The `msg.value` must match the calculated value based on the provided `swapDataArray`.\\n     */\\n    function checkMsgValue(bytes[] memory swapDataArray, uint256 msgValue) external pure;\\n    \\n    /**\\n     * @dev Calculates the expected `msg.value` for a given swap operation encoded in swapData.\\n     * \\n     * This function calculates the expected `msg.value` based on the information provided in the swapData.\\n     * It checks if the swap operation involves ETH and is indeed a swap (not just a transfer).\\n     * If these conditions are met, it returns the calculated `msg.value`.\\n     * \\n     * @param swapData The encoded swap data that describes the swap operation.\\n     * \\n     * @return value The calculated `msg.value` for the swap operation. If it's not a swap involving ETH, the value is 0.\\n     */\\n    function calculateMsgValue(bytes memory swapData) external pure returns (uint256 value);\\n    \\n    /**\\n     * @dev Encodes the ExchangeData struct into a bytes array.\\n     * \\n     * This function takes the ExchangeData struct as input and encodes it into a bytes array using ABI encoding.\\n     * The resulting bytes array, `paramData`, can be used to store or transmit the struct's data.\\n     * \\n     * @param data The ExchangeData struct to be encoded.\\n     * \\n     * @return paramData The encoded data in the form of a bytes array.\\n     */\\n    function encodeFromExchange(ExchangeData memory data) external pure returns (bytes memory paramData);\\n    \\n    /**\\n     * @dev Decodes the ExchangeData struct from a bytes array.\\n     * \\n     * This function decodes the ExchangeData struct from a given bytes array (`paramData`) using ABI decoding.\\n     * The decoded struct, `data`, is returned for further use and processing.\\n     * \\n     * @param paramData The bytes array containing the encoded ExchangeData struct.\\n     * \\n     * @return data The decoded ExchangeData struct.\\n     */\\n    function decodeFromExchange(bytes memory paramData) external pure returns (ExchangeData memory data);\\n}\",\"keccak256\":\"0xf2d20af1a002244cccf0c5801e7a3893bf3c3890fcdc25e5648e17e579c184bd\"}},\"version\":1}",
  "bytecode": "0x608060405260016003553480156200001657600080fd5b506040516200206f3803806200206f83398181016040528101906200003c9190620001da565b6200005c62000050620000a460201b60201c565b620000ac60201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200020c565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001a28262000175565b9050919050565b620001b48162000195565b8114620001c057600080fd5b50565b600081519050620001d481620001a9565b92915050565b600060208284031215620001f357620001f262000170565b5b60006200020384828501620001c3565b91505092915050565b611e53806200021c6000396000f3fe6080604052600436106100a75760003560e01c8063715018a611610064578063715018a6146101ac578063868ccfb3146101c35780638da5cb5b146101ec578063d7819cd114610217578063da909b0914610242578063f2fde38b1461026b576100a7565b80632ad4cd18146100ac578063302d2ef6146100d5578063430f75da146100f157806344004cc11461012f5780634782f779146101585780634d12fca414610181575b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce9190610cc6565b610294565b005b6100ef60048036038101906100ea919061113d565b61032f565b005b3480156100fd57600080fd5b50610118600480360381019061011391906111f8565b6107b2565b6040516101269291906112bc565b60405180910390f35b34801561013b57600080fd5b5061015660048036038101906101519190610cc6565b61087e565b005b34801561016457600080fd5b5061017f600480360381019061017a91906112ec565b610919565b005b34801561018d57600080fd5b5061019661096c565b6040516101a3919061138b565b60405180910390f35b3480156101b857600080fd5b506101c1610992565b005b3480156101cf57600080fd5b506101ea60048036038101906101e591906113ca565b6109a6565b005b3480156101f857600080fd5b506102016109d5565b60405161020e9190611426565b60405180910390f35b34801561022357600080fd5b5061022c6109fe565b6040516102399190611450565b60405180910390f35b34801561024e57600080fd5b506102696004803603810190610264919061146b565b610a04565b005b34801561027757600080fd5b50610292600480360381019061028d919061146b565b610a50565b005b61029c610ad4565b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b81526004016102d7929190611498565b602060405180830381600087803b1580156102f157600080fd5b505af1158015610305573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032991906114f9565b50505050565b82518451148015610341575081518351145b610380576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037790611572565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638a4c2a0e83346040518363ffffffff1660e01b81526004016103dd9291906116a9565b60006040518083038186803b1580156103f557600080fd5b505afa158015610409573d6000803e3d6000fd5b5050505060005b8451811015610741576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bcc4bffd85848151811061046c5761046b6116d9565b5b60200260200101516040518263ffffffff1660e01b81526004016104909190611752565b60206040518083038186803b1580156104a857600080fd5b505afa1580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e09190611789565b905060008114156105b957600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166378a820a785848151811061053c5761053b6116d9565b5b602002602001015133898681518110610558576105576116d9565b5b6020026020010151600001516040518463ffffffff1660e01b8152600401610582939291906117b6565b600060405180830381600087803b15801561059c57600080fd5b505af11580156105b0573d6000803e3d6000fd5b50505050610684565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166378a820a78286858151811061060b5761060a6116d9565b5b6020026020010151338a8781518110610627576106266116d9565b5b6020026020010151600001516040518563ffffffff1660e01b8152600401610651939291906117b6565b6000604051808303818588803b15801561066a57600080fd5b505af115801561067e573d6000803e3d6000fd5b50505050505b858281518110610697576106966116d9565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16633819137a8684815181106106d1576106d06116d9565b5b6020026020010151600354336040518463ffffffff1660e01b81526004016106fb939291906117f4565b600060405180830381600087803b15801561071557600080fd5b505af1158015610729573d6000803e3d6000fd5b5050505050808061073990611861565b915050610410565b503373ffffffffffffffffffffffffffffffffffffffff167fdf35236315d79f749febbbe30af46d136cadd5dc4f8006c5668c7bd2fac5da726003548360405161078c9291906118aa565b60405180910390a2600360008154809291906107a790611861565b919050555050505050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546107fb90611902565b80601f016020809104026020016040519081016040528092919081815260200182805461082790611902565b80156108745780601f1061084957610100808354040283529160200191610874565b820191906000526020600020905b81548152906001019060200180831161085757829003601f168201915b5050505050905082565b610886610ad4565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016108c1929190611498565b602060405180830381600087803b1580156108db57600080fd5b505af11580156108ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091391906114f9565b50505050565b610921610ad4565b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610967573d6000803e3d6000fd5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61099a610ad4565b6109a46000610b52565b565b6109ae610ad4565b806002600084815260200190815260200160002081816109ce9190611d11565b9050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60035481565b610a0c610ad4565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610a58610ad4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ac8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abf90611d91565b60405180910390fd5b610ad181610b52565b50565b610adc610c16565b73ffffffffffffffffffffffffffffffffffffffff16610afa6109d5565b73ffffffffffffffffffffffffffffffffffffffff1614610b50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4790611dfd565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c5d82610c32565b9050919050565b610c6d81610c52565b8114610c7857600080fd5b50565b600081359050610c8a81610c64565b92915050565b6000819050919050565b610ca381610c90565b8114610cae57600080fd5b50565b600081359050610cc081610c9a565b92915050565b600080600060608486031215610cdf57610cde610c28565b5b6000610ced86828701610c7b565b9350506020610cfe86828701610c7b565b9250506040610d0f86828701610cb1565b9150509250925092565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d6782610d1e565b810181811067ffffffffffffffff82111715610d8657610d85610d2f565b5b80604052505050565b6000610d99610c1e565b9050610da58282610d5e565b919050565b600067ffffffffffffffff821115610dc557610dc4610d2f565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115610e0557610e04610d2f565b5b610e0e82610d1e565b9050602081019050919050565b82818337600083830152505050565b6000610e3d610e3884610dea565b610d8f565b905082815260208101848484011115610e5957610e58610de5565b5b610e64848285610e1b565b509392505050565b600082601f830112610e8157610e80610d19565b5b8135610e91848260208601610e2a565b91505092915050565b600060408284031215610eb057610eaf610ddb565b5b610eba6040610d8f565b90506000610eca84828501610c7b565b600083015250602082013567ffffffffffffffff811115610eee57610eed610de0565b5b610efa84828501610e6c565b60208301525092915050565b6000610f19610f1484610daa565b610d8f565b90508083825260208201905060208402830185811115610f3c57610f3b610dd6565b5b835b81811015610f8357803567ffffffffffffffff811115610f6157610f60610d19565b5b808601610f6e8982610e9a565b85526020850194505050602081019050610f3e565b5050509392505050565b600082601f830112610fa257610fa1610d19565b5b8135610fb2848260208601610f06565b91505092915050565b600067ffffffffffffffff821115610fd657610fd5610d2f565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561100257611001610d2f565b5b61100b82610d1e565b9050602081019050919050565b600061102b61102684610fe7565b610d8f565b90508281526020810184848401111561104757611046610de5565b5b611052848285610e1b565b509392505050565b600082601f83011261106f5761106e610d19565b5b813561107f848260208601611018565b91505092915050565b600061109b61109684610fbb565b610d8f565b905080838252602082019050602084028301858111156110be576110bd610dd6565b5b835b8181101561110557803567ffffffffffffffff8111156110e3576110e2610d19565b5b8086016110f0898261105a565b855260208501945050506020810190506110c0565b5050509392505050565b600082601f83011261112457611123610d19565b5b8135611134848260208601611088565b91505092915050565b6000806000806080858703121561115757611156610c28565b5b600085013567ffffffffffffffff81111561117557611174610c2d565b5b61118187828801610f8d565b945050602085013567ffffffffffffffff8111156111a2576111a1610c2d565b5b6111ae8782880161110f565b935050604085013567ffffffffffffffff8111156111cf576111ce610c2d565b5b6111db8782880161110f565b92505060606111ec87828801610cb1565b91505092959194509250565b60006020828403121561120e5761120d610c28565b5b600061121c84828501610cb1565b91505092915050565b61122e81610c52565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561126e578082015181840152602081019050611253565b8381111561127d576000848401525b50505050565b600061128e82611234565b611298818561123f565b93506112a8818560208601611250565b6112b181610d1e565b840191505092915050565b60006040820190506112d16000830185611225565b81810360208301526112e38184611283565b90509392505050565b6000806040838503121561130357611302610c28565b5b600061131185828601610c7b565b925050602061132285828601610cb1565b9150509250929050565b6000819050919050565b600061135161134c61134784610c32565b61132c565b610c32565b9050919050565b600061136382611336565b9050919050565b600061137582611358565b9050919050565b6113858161136a565b82525050565b60006020820190506113a0600083018461137c565b92915050565b600080fd5b6000604082840312156113c1576113c06113a6565b5b81905092915050565b600080604083850312156113e1576113e0610c28565b5b60006113ef85828601610cb1565b925050602083013567ffffffffffffffff8111156114105761140f610c2d565b5b61141c858286016113ab565b9150509250929050565b600060208201905061143b6000830184611225565b92915050565b61144a81610c90565b82525050565b60006020820190506114656000830184611441565b92915050565b60006020828403121561148157611480610c28565b5b600061148f84828501610c7b565b91505092915050565b60006040820190506114ad6000830185611225565b6114ba6020830184611441565b9392505050565b60008115159050919050565b6114d6816114c1565b81146114e157600080fd5b50565b6000815190506114f3816114cd565b92915050565b60006020828403121561150f5761150e610c28565b5b600061151d848285016114e4565b91505092915050565b7f617272617973206e6f7420657175616c00000000000000000000000000000000600082015250565b600061155c60108361123f565b915061156782611526565b602082019050919050565b6000602082019050818103600083015261158b8161154f565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60006115e5826115be565b6115ef81856115c9565b93506115ff818560208601611250565b61160881610d1e565b840191505092915050565b600061161f83836115da565b905092915050565b6000602082019050919050565b600061163f82611592565b611649818561159d565b93508360208202850161165b856115ae565b8060005b8581101561169757848403895281516116788582611613565b945061168383611627565b925060208a0199505060018101905061165f565b50829750879550505050505092915050565b600060408201905081810360008301526116c38185611634565b90506116d26020830184611441565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b6000611724826115be565b61172e8185611708565b935061173e818560208601611250565b61174781610d1e565b840191505092915050565b6000602082019050818103600083015261176c8184611719565b905092915050565b60008151905061178381610c9a565b92915050565b60006020828403121561179f5761179e610c28565b5b60006117ad84828501611774565b91505092915050565b600060608201905081810360008301526117d08186611719565b90506117df6020830185611225565b6117ec6040830184611225565b949350505050565b6000606082019050818103600083015261180e8186611719565b905061181d6020830185611441565b61182a6040830184611225565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061186c82610c90565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561189f5761189e611832565b5b600182019050919050565b60006040820190506118bf6000830185611441565b6118cc6020830184611441565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061191a57607f821691505b6020821081141561192e5761192d6118d3565b5b50919050565b6000813561194181610c64565b80915050919050565b60008160001b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff6119778461194a565b9350801983169250808416831791505092915050565b600061199882611358565b9050919050565b6000819050919050565b6119b28261198d565b6119c56119be8261199f565b8354611957565b8255505050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126119f8576119f76119cc565b5b80840192508235915067ffffffffffffffff821115611a1a57611a196119d1565b5b602083019250600182023603831315611a3657611a356119d6565b5b509250929050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611aab7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611a6e565b611ab58683611a6e565b95508019841693508086168417925050509392505050565b6000611ae8611ae3611ade84610c90565b61132c565b610c90565b9050919050565b6000819050919050565b611b0283611acd565b611b16611b0e82611aef565b848454611a7b565b825550505050565b600090565b611b2b611b1e565b611b36818484611af9565b505050565b5b81811015611b5a57611b4f600082611b23565b600181019050611b3c565b5050565b601f821115611b9f57611b7081611a49565b611b7984611a5e565b81016020851015611b88578190505b611b9c611b9485611a5e565b830182611b3b565b50505b505050565b600082821c905092915050565b6000611bc260001984600802611ba4565b1980831691505092915050565b6000611bdb8383611bb1565b9150826002028217905092915050565b611bf58383611a3e565b67ffffffffffffffff811115611c0e57611c0d610d2f565b5b611c188254611902565b611c23828285611b5e565b6000601f831160018114611c525760008415611c40578287013590505b611c4a8582611bcf565b865550611cb2565b601f198416611c6086611a49565b60005b82811015611c8857848901358255600182019150602085019450602081019050611c63565b86831015611ca55784890135611ca1601f891682611bb1565b8355505b6001600288020188555050505b50505050505050565b611cc6838383611beb565b505050565b600081016000830180611cdd81611934565b9050611ce981846119a9565b5050506001810160208301611cfe81856119db565b611d09818386611cbb565b505050505050565b611d1b8282611ccb565b5050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611d7b60268361123f565b9150611d8682611d1f565b604082019050919050565b60006020820190508181036000830152611daa81611d6e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611de760208361123f565b9150611df282611db1565b602082019050919050565b60006020820190508181036000830152611e1681611dda565b905091905056fea2646970667358221220a026d4d060c60cd8ac4eacada44c209e60892d9a22d4729dcb4c104dd094ef8064736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c8063715018a611610064578063715018a6146101ac578063868ccfb3146101c35780638da5cb5b146101ec578063d7819cd114610217578063da909b0914610242578063f2fde38b1461026b576100a7565b80632ad4cd18146100ac578063302d2ef6146100d5578063430f75da146100f157806344004cc11461012f5780634782f779146101585780634d12fca414610181575b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce9190610cc6565b610294565b005b6100ef60048036038101906100ea919061113d565b61032f565b005b3480156100fd57600080fd5b50610118600480360381019061011391906111f8565b6107b2565b6040516101269291906112bc565b60405180910390f35b34801561013b57600080fd5b5061015660048036038101906101519190610cc6565b61087e565b005b34801561016457600080fd5b5061017f600480360381019061017a91906112ec565b610919565b005b34801561018d57600080fd5b5061019661096c565b6040516101a3919061138b565b60405180910390f35b3480156101b857600080fd5b506101c1610992565b005b3480156101cf57600080fd5b506101ea60048036038101906101e591906113ca565b6109a6565b005b3480156101f857600080fd5b506102016109d5565b60405161020e9190611426565b60405180910390f35b34801561022357600080fd5b5061022c6109fe565b6040516102399190611450565b60405180910390f35b34801561024e57600080fd5b506102696004803603810190610264919061146b565b610a04565b005b34801561027757600080fd5b50610292600480360381019061028d919061146b565b610a50565b005b61029c610ad4565b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b81526004016102d7929190611498565b602060405180830381600087803b1580156102f157600080fd5b505af1158015610305573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032991906114f9565b50505050565b82518451148015610341575081518351145b610380576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037790611572565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638a4c2a0e83346040518363ffffffff1660e01b81526004016103dd9291906116a9565b60006040518083038186803b1580156103f557600080fd5b505afa158015610409573d6000803e3d6000fd5b5050505060005b8451811015610741576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bcc4bffd85848151811061046c5761046b6116d9565b5b60200260200101516040518263ffffffff1660e01b81526004016104909190611752565b60206040518083038186803b1580156104a857600080fd5b505afa1580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e09190611789565b905060008114156105b957600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166378a820a785848151811061053c5761053b6116d9565b5b602002602001015133898681518110610558576105576116d9565b5b6020026020010151600001516040518463ffffffff1660e01b8152600401610582939291906117b6565b600060405180830381600087803b15801561059c57600080fd5b505af11580156105b0573d6000803e3d6000fd5b50505050610684565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166378a820a78286858151811061060b5761060a6116d9565b5b6020026020010151338a8781518110610627576106266116d9565b5b6020026020010151600001516040518563ffffffff1660e01b8152600401610651939291906117b6565b6000604051808303818588803b15801561066a57600080fd5b505af115801561067e573d6000803e3d6000fd5b50505050505b858281518110610697576106966116d9565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16633819137a8684815181106106d1576106d06116d9565b5b6020026020010151600354336040518463ffffffff1660e01b81526004016106fb939291906117f4565b600060405180830381600087803b15801561071557600080fd5b505af1158015610729573d6000803e3d6000fd5b5050505050808061073990611861565b915050610410565b503373ffffffffffffffffffffffffffffffffffffffff167fdf35236315d79f749febbbe30af46d136cadd5dc4f8006c5668c7bd2fac5da726003548360405161078c9291906118aa565b60405180910390a2600360008154809291906107a790611861565b919050555050505050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546107fb90611902565b80601f016020809104026020016040519081016040528092919081815260200182805461082790611902565b80156108745780601f1061084957610100808354040283529160200191610874565b820191906000526020600020905b81548152906001019060200180831161085757829003601f168201915b5050505050905082565b610886610ad4565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016108c1929190611498565b602060405180830381600087803b1580156108db57600080fd5b505af11580156108ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091391906114f9565b50505050565b610921610ad4565b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610967573d6000803e3d6000fd5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61099a610ad4565b6109a46000610b52565b565b6109ae610ad4565b806002600084815260200190815260200160002081816109ce9190611d11565b9050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60035481565b610a0c610ad4565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610a58610ad4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ac8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abf90611d91565b60405180910390fd5b610ad181610b52565b50565b610adc610c16565b73ffffffffffffffffffffffffffffffffffffffff16610afa6109d5565b73ffffffffffffffffffffffffffffffffffffffff1614610b50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4790611dfd565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c5d82610c32565b9050919050565b610c6d81610c52565b8114610c7857600080fd5b50565b600081359050610c8a81610c64565b92915050565b6000819050919050565b610ca381610c90565b8114610cae57600080fd5b50565b600081359050610cc081610c9a565b92915050565b600080600060608486031215610cdf57610cde610c28565b5b6000610ced86828701610c7b565b9350506020610cfe86828701610c7b565b9250506040610d0f86828701610cb1565b9150509250925092565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d6782610d1e565b810181811067ffffffffffffffff82111715610d8657610d85610d2f565b5b80604052505050565b6000610d99610c1e565b9050610da58282610d5e565b919050565b600067ffffffffffffffff821115610dc557610dc4610d2f565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115610e0557610e04610d2f565b5b610e0e82610d1e565b9050602081019050919050565b82818337600083830152505050565b6000610e3d610e3884610dea565b610d8f565b905082815260208101848484011115610e5957610e58610de5565b5b610e64848285610e1b565b509392505050565b600082601f830112610e8157610e80610d19565b5b8135610e91848260208601610e2a565b91505092915050565b600060408284031215610eb057610eaf610ddb565b5b610eba6040610d8f565b90506000610eca84828501610c7b565b600083015250602082013567ffffffffffffffff811115610eee57610eed610de0565b5b610efa84828501610e6c565b60208301525092915050565b6000610f19610f1484610daa565b610d8f565b90508083825260208201905060208402830185811115610f3c57610f3b610dd6565b5b835b81811015610f8357803567ffffffffffffffff811115610f6157610f60610d19565b5b808601610f6e8982610e9a565b85526020850194505050602081019050610f3e565b5050509392505050565b600082601f830112610fa257610fa1610d19565b5b8135610fb2848260208601610f06565b91505092915050565b600067ffffffffffffffff821115610fd657610fd5610d2f565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561100257611001610d2f565b5b61100b82610d1e565b9050602081019050919050565b600061102b61102684610fe7565b610d8f565b90508281526020810184848401111561104757611046610de5565b5b611052848285610e1b565b509392505050565b600082601f83011261106f5761106e610d19565b5b813561107f848260208601611018565b91505092915050565b600061109b61109684610fbb565b610d8f565b905080838252602082019050602084028301858111156110be576110bd610dd6565b5b835b8181101561110557803567ffffffffffffffff8111156110e3576110e2610d19565b5b8086016110f0898261105a565b855260208501945050506020810190506110c0565b5050509392505050565b600082601f83011261112457611123610d19565b5b8135611134848260208601611088565b91505092915050565b6000806000806080858703121561115757611156610c28565b5b600085013567ffffffffffffffff81111561117557611174610c2d565b5b61118187828801610f8d565b945050602085013567ffffffffffffffff8111156111a2576111a1610c2d565b5b6111ae8782880161110f565b935050604085013567ffffffffffffffff8111156111cf576111ce610c2d565b5b6111db8782880161110f565b92505060606111ec87828801610cb1565b91505092959194509250565b60006020828403121561120e5761120d610c28565b5b600061121c84828501610cb1565b91505092915050565b61122e81610c52565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561126e578082015181840152602081019050611253565b8381111561127d576000848401525b50505050565b600061128e82611234565b611298818561123f565b93506112a8818560208601611250565b6112b181610d1e565b840191505092915050565b60006040820190506112d16000830185611225565b81810360208301526112e38184611283565b90509392505050565b6000806040838503121561130357611302610c28565b5b600061131185828601610c7b565b925050602061132285828601610cb1565b9150509250929050565b6000819050919050565b600061135161134c61134784610c32565b61132c565b610c32565b9050919050565b600061136382611336565b9050919050565b600061137582611358565b9050919050565b6113858161136a565b82525050565b60006020820190506113a0600083018461137c565b92915050565b600080fd5b6000604082840312156113c1576113c06113a6565b5b81905092915050565b600080604083850312156113e1576113e0610c28565b5b60006113ef85828601610cb1565b925050602083013567ffffffffffffffff8111156114105761140f610c2d565b5b61141c858286016113ab565b9150509250929050565b600060208201905061143b6000830184611225565b92915050565b61144a81610c90565b82525050565b60006020820190506114656000830184611441565b92915050565b60006020828403121561148157611480610c28565b5b600061148f84828501610c7b565b91505092915050565b60006040820190506114ad6000830185611225565b6114ba6020830184611441565b9392505050565b60008115159050919050565b6114d6816114c1565b81146114e157600080fd5b50565b6000815190506114f3816114cd565b92915050565b60006020828403121561150f5761150e610c28565b5b600061151d848285016114e4565b91505092915050565b7f617272617973206e6f7420657175616c00000000000000000000000000000000600082015250565b600061155c60108361123f565b915061156782611526565b602082019050919050565b6000602082019050818103600083015261158b8161154f565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60006115e5826115be565b6115ef81856115c9565b93506115ff818560208601611250565b61160881610d1e565b840191505092915050565b600061161f83836115da565b905092915050565b6000602082019050919050565b600061163f82611592565b611649818561159d565b93508360208202850161165b856115ae565b8060005b8581101561169757848403895281516116788582611613565b945061168383611627565b925060208a0199505060018101905061165f565b50829750879550505050505092915050565b600060408201905081810360008301526116c38185611634565b90506116d26020830184611441565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b6000611724826115be565b61172e8185611708565b935061173e818560208601611250565b61174781610d1e565b840191505092915050565b6000602082019050818103600083015261176c8184611719565b905092915050565b60008151905061178381610c9a565b92915050565b60006020828403121561179f5761179e610c28565b5b60006117ad84828501611774565b91505092915050565b600060608201905081810360008301526117d08186611719565b90506117df6020830185611225565b6117ec6040830184611225565b949350505050565b6000606082019050818103600083015261180e8186611719565b905061181d6020830185611441565b61182a6040830184611225565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061186c82610c90565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561189f5761189e611832565b5b600182019050919050565b60006040820190506118bf6000830185611441565b6118cc6020830184611441565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061191a57607f821691505b6020821081141561192e5761192d6118d3565b5b50919050565b6000813561194181610c64565b80915050919050565b60008160001b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff6119778461194a565b9350801983169250808416831791505092915050565b600061199882611358565b9050919050565b6000819050919050565b6119b28261198d565b6119c56119be8261199f565b8354611957565b8255505050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126119f8576119f76119cc565b5b80840192508235915067ffffffffffffffff821115611a1a57611a196119d1565b5b602083019250600182023603831315611a3657611a356119d6565b5b509250929050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611aab7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611a6e565b611ab58683611a6e565b95508019841693508086168417925050509392505050565b6000611ae8611ae3611ade84610c90565b61132c565b610c90565b9050919050565b6000819050919050565b611b0283611acd565b611b16611b0e82611aef565b848454611a7b565b825550505050565b600090565b611b2b611b1e565b611b36818484611af9565b505050565b5b81811015611b5a57611b4f600082611b23565b600181019050611b3c565b5050565b601f821115611b9f57611b7081611a49565b611b7984611a5e565b81016020851015611b88578190505b611b9c611b9485611a5e565b830182611b3b565b50505b505050565b600082821c905092915050565b6000611bc260001984600802611ba4565b1980831691505092915050565b6000611bdb8383611bb1565b9150826002028217905092915050565b611bf58383611a3e565b67ffffffffffffffff811115611c0e57611c0d610d2f565b5b611c188254611902565b611c23828285611b5e565b6000601f831160018114611c525760008415611c40578287013590505b611c4a8582611bcf565b865550611cb2565b601f198416611c6086611a49565b60005b82811015611c8857848901358255600182019150602085019450602081019050611c63565b86831015611ca55784890135611ca1601f891682611bb1565b8355505b6001600288020188555050505b50505050505050565b611cc6838383611beb565b505050565b600081016000830180611cdd81611934565b9050611ce981846119a9565b5050506001810160208301611cfe81856119db565b611d09818386611cbb565b505050505050565b611d1b8282611ccb565b5050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611d7b60268361123f565b9150611d8682611d1f565b604082019050919050565b60006020820190508181036000830152611daa81611d6e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611de760208361123f565b9150611df282611db1565b602082019050919050565b60006020820190508181036000830152611e1681611dda565b905091905056fea2646970667358221220a026d4d060c60cd8ac4eacada44c209e60892d9a22d4729dcb4c104dd094ef8064736f6c63430008090033",
  "devdoc": {
    "author": "0nika0",
    "details": "This contract manages the consolidation of transactions and products, allowing users to create and interact with modules. It enables users to consolidate multiple transactions into one and create products through modules.",
    "kind": "dev",
    "methods": {
      "allApprove(address,address,uint256)": {
        "details": "See {ITxBuilder-allApprove}."
      },
      "consolidationOfTransactions((address,string)[],bytes[],bytes[],uint256)": {
        "details": "See {ITxBuilder-consolidationOfTransactions}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setExchanger(address)": {
        "details": "See {ITxBuilder-setExchanger}."
      },
      "setModule(uint256,(address,string))": {
        "details": "See {ITxBuilder-setModule}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawERC20(address,address,uint256)": {
        "details": "See {ITxBuilder-withdrawERC20}."
      },
      "withdrawETH(address,uint256)": {
        "details": "See {ITxBuilder-withdrawETH}."
      }
    },
    "title": "TxBuilder",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/TxBuilder.sol:TxBuilder",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3151,
        "contract": "contracts/TxBuilder.sol:TxBuilder",
        "label": "exchanger",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Exchanger)3719"
      },
      {
        "astId": 3156,
        "contract": "contracts/TxBuilder.sol:TxBuilder",
        "label": "module",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Module)2956_storage)"
      },
      {
        "astId": 3159,
        "contract": "contracts/TxBuilder.sol:TxBuilder",
        "label": "nextBuildID",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Exchanger)3719": {
        "encoding": "inplace",
        "label": "contract Exchanger",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Module)2956_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ITxBuilder.Module)",
        "numberOfBytes": "32",
        "value": "t_struct(Module)2956_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Module)2956_storage": {
        "encoding": "inplace",
        "label": "struct ITxBuilder.Module",
        "members": [
          {
            "astId": 2953,
            "contract": "contracts/TxBuilder.sol:TxBuilder",
            "label": "moduleAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2955,
            "contract": "contracts/TxBuilder.sol:TxBuilder",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}