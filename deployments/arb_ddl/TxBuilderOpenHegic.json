{
  "address": "0xaE393DFE9d1A3C59B8d35502F0377c946766B298",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxySeller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_hegicErc721",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        }
      ],
      "name": "OpenPositionByHegic",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "calculateAmount",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "name": "decodeFromHegic",
      "outputs": [
        {
          "internalType": "contract IHegicStrategy",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalCost",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "additional",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHegicStrategy",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalCost",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "additional",
          "type": "bytes[]"
        }
      ],
      "name": "encodeFromHegic",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hegicErc721",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "parametersArray",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "processTx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxySeller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referrer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newReferrer",
          "type": "address"
        }
      ],
      "name": "setReferrer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc8755d5c72185b226f68d82446eecbbe44678534dafc49d6b7a7c93291e6f515",
  "receipt": {
    "to": null,
    "from": "0x8B57f3a9bDf2cfdBF9B2627ff8bEa86fB5641a50",
    "contractAddress": "0xaE393DFE9d1A3C59B8d35502F0377c946766B298",
    "transactionIndex": 1,
    "gasUsed": "6924121",
    "logsBloom": "0x
    "blockHash": "0x7fcbe674a1db9c7b456c5cb8872ef20ea1a86a15a16ac0ba68fa6ac31a7d6bf6",
    "transactionHash": "0xc8755d5c72185b226f68d82446eecbbe44678534dafc49d6b7a7c93291e6f515",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 143163319,
        "transactionHash": "0xc8755d5c72185b226f68d82446eecbbe44678534dafc49d6b7a7c93291e6f515",
        "address": "0xaE393DFE9d1A3C59B8d35502F0377c946766B298",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b57f3a9bdf2cfdbf9b2627ff8bea86fb5641a50"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7fcbe674a1db9c7b456c5cb8872ef20ea1a86a15a16ac0ba68fa6ac31a7d6bf6"
      }
    ],
    "blockNumber": 143163319,
    "cumulativeGasUsed": "6924121",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xec096ea6eB9aa5ea689b0CF00882366E92377371",
    "0x5Fe380D68fEe022d8acd42dc4D36FbfB249a76d5",
    "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
    "0x683ad8b899cd14d8e077c9a623e8b3fed65a8c09"
  ],
  "numDeployments": 1,
  "solcInputHash": "bbe1494aa8cb1ccf942a0a0e74d3ef7f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxySeller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hegicErc721\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"name\":\"OpenPositionByHegic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"calculateAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"name\":\"decodeFromHegic\",\"outputs\":[{\"internalType\":\"contract IHegicStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalCost\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"additional\",\"type\":\"bytes[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHegicStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalCost\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"additional\",\"type\":\"bytes[]\"}],\"name\":\"encodeFromHegic\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hegicErc721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"parametersArray\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"processTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxySeller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReferrer\",\"type\":\"address\"}],\"name\":\"setReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0nika0\",\"kind\":\"dev\",\"methods\":{\"allApprove()\":{\"details\":\"See {ITxBuilderOpenHegic-allApprove}.\"},\"calculateAmount(bytes)\":{\"details\":\"This public view function calculates the amount of a token based on a set of input parameters.  It decodes the parameters, retrieves the necessary information from a Hegic strategy,  calculates the premium amount from positive PNL (Profit and Loss),  and ensures it does not exceed the maximum total cost.\",\"params\":{\"parameters\":\"The encoded parameters for the calculation.\"},\"returns\":{\"amount\":\"The calculated amount of the token.\",\"token\":\"The address of the token to be calculated.\"}},\"decodeFromHegic(bytes)\":{\"details\":\"See {ITxBuilderOpenHegic-decodeFromHegic}.\"},\"encodeFromHegic(address,uint256,uint256,uint256,bytes[])\":{\"details\":\"See {ITxBuilderOpenHegic-encodeFromHegic}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"processTx(bytes,uint256,address)\":{\"details\":\"See {IBaseTxBuilderOpen-processTx}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setReferrer(address)\":{\"details\":\"See {ITxBuilderOpenHegic-setReferrer}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Transaction Builder for Opening Hegic Option Positions\",\"version\":1},\"userdoc\":{\"events\":{\"OpenPositionByHegic(uint256,uint256,address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when a Hegic option position is opened.\"}},\"kind\":\"user\",\"methods\":{\"calculateAmount(bytes)\":{\"notice\":\"Calculate the amount of a token based on provided parameters.\"}},\"notice\":\"This contract facilitates the opening of Hegic option positions using predefined parameters.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/hegic/TxBuilderOpenHegic.sol\":\"TxBuilderOpenHegic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BaseTxBuilderOpen.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IBaseTxBuilderOpen} from \\\"./IBaseTxBuilderOpen.sol\\\";\\n\\n/**\\n * @title BaseTxBuilderOpen\\n * @author 0nika0\\n * @notice An abstract base contract for building and processing option transactions.\\n * @dev This contract provides the foundational structure for creating and processing option transactions. \\n * It includes functions to handle transaction processing and token amount calculation.\\n */\\nabstract contract BaseTxBuilderOpen is Ownable, IBaseTxBuilderOpen {\\n\\n    // PUBLIC FUNCTONS //\\n\\n    /**\\n     * @dev See {IBaseTxBuilderOpen-calculateAmount}.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) public view virtual returns (\\n        address token,\\n        uint256 amount\\n    ) {}\\n\\n    // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @dev See {IBaseTxBuilderOpen-processTx}.\\n     */\\n    function processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) external {\\n        _processTx(parametersArray, buildID, user);\\n    }\\n\\n    function onERC721Received(\\n        address, \\n        address, \\n        uint256, \\n        bytes calldata\\n    ) external returns(bytes4) {\\n        return bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"));\\n    } \\n\\n    // INTERNAL FUNCTIONS //\\n\\n    /**\\n     * @notice Internal function to process a transaction for opening an option position.\\n     * @dev This internal function processes a transaction for opening an option position based on the provided parameters.\\n     * @param parametersArray The encoded parameters for opening the option position.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param user The address of the user who is opening the option position.\\n     */\\n    function _processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd63444fe003c4e60eb5224e3b3f4913e27778ac54bd275286bb7fca05f53d583\",\"license\":\"GPL-3.0-or-later\"},\"contracts/IBaseTxBuilderOpen.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\n\\ninterface IBaseTxBuilderOpen {\\n    // PUBLIC FUNCTONS //\\n\\n    /**\\n     * @notice Calculate the amount of a token based on provided parameters.\\n     * @dev This function calculates the amount of a token based on a set of input parameters.\\n     * @param parameters The encoded parameters for the calculation.\\n     * @return token The address of the token to be calculated.\\n     * @return amount The calculated amount of the token.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) external view returns (\\n        address token,\\n        uint256 amount\\n    ); \\n\\n     // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @notice Process a transaction for opening an option position.\\n     * @dev This function processes a transaction for opening an option position based on the provided parameters.\\n     * @param parametersArray The encoded parameters for opening the option position.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param user The address of the user who is opening the option position.\\n     */\\n    function processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) external;\\n\\n\\n\\n}\\n\",\"keccak256\":\"0xe97c16dcf0d4746277867ab4ead00665161b2535fde4a2cbb31a51e691780302\",\"license\":\"GPL-3.0-or-later\"},\"contracts/hegic/IHegicStrategy.sol\":{\"content\":\"pragma solidity ^0.8.3;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2022 Hegic Protocol\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\ninterface IHegicStrategy {\\n    event SetLimit(uint256 limit);\\n\\n    event Acquired(\\n        uint256 indexed id,\\n        StrategyData data,\\n        uint256 negativepnl,\\n        uint256 positivepnl,\\n        uint256 period,\\n        bytes[] additional\\n    );\\n\\n    struct StrategyData {\\n        uint128 amount;\\n        uint128 strike;\\n    }\\n\\n    function strategyData(uint256 strategyID)\\n        external\\n        view\\n        returns (uint128 amount, uint128 strike);\\n\\n    function getLockedByStrategy() external view returns (uint256 amount);\\n\\n    function lockedLimit() external view returns (uint256 value);\\n\\n    function isPayoffAvailable(\\n        uint256 optID,\\n        address caller,\\n        address recipient\\n    ) external view returns (bool);\\n\\n    function getAvailableContracts(uint32 period, bytes[] calldata additional)\\n        external\\n        view\\n        returns (uint256 available);\\n\\n    function payOffAmount(uint256 optionID)\\n        external\\n        view\\n        returns (uint256 profit);\\n\\n    function calculateNegativepnlAndPositivepnl(\\n        uint256 amount,\\n        uint256 period,\\n        bytes[] calldata\\n    ) external view returns (uint128 negativepnl, uint128 positivepnl);\\n\\n    function create(\\n        uint256 id,\\n        address holder,\\n        uint256 amount,\\n        uint256 period,\\n        bytes[] calldata\\n    )\\n        external\\n        returns (\\n            uint32 expiration,\\n            uint256 positivePNL,\\n            uint256 negativePNL\\n        );\\n\\n    function connect() external;\\n\\n    function positionExpiration(uint256)\\n        external\\n        view\\n        returns (uint32 timestamp);\\n}\\n\",\"keccak256\":\"0x76560ef25ec8bcf9dc2170fcd555fbc42534b9de0b0b680afe49a4da62f0350c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/hegic/IPositionsManager.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IPositionsManager is IERC721 {\\n    function nextTokenId() external view returns (uint256);\\n}\",\"keccak256\":\"0x0c2c32d00f3b7cb5a335138804313f747efa65afa9382bf42c38219e990ea0b8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/hegic/IProxySeller.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {IHegicStrategy} from \\\"./IHegicStrategy.sol\\\";\\n\\ninterface IProxySeller {\\n    function buyWithReferal(\\n        IHegicStrategy strategy,\\n        uint256 amount,\\n        uint256 period,\\n        bytes[] calldata additional,\\n        address referrer\\n    )  external;\\n}\\n\",\"keccak256\":\"0xf141b630e74161ae513125f680834cb9959fad8289d60a2cdf102c14c94e3927\",\"license\":\"GPL-3.0-or-later\"},\"contracts/hegic/ITxBuilderOpenHegic.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {IHegicStrategy} from \\\"./IHegicStrategy.sol\\\";\\n\\ninterface ITxBuilderOpenHegic {\\n\\n    // OWNER FUNCTIONS //\\n\\n    /**\\n     * @notice Set a new referrer address.\\n     * @dev This external function allows the owner to update the referrer address associated with the contract.\\n     * @param newReferrer The new address to set as the referrer.\\n     */\\n    function setReferrer(address newReferrer) external;\\n\\n    // EXTERNAL FUNCTIONS //  \\n\\n    /**\\n     * @notice Grants an unlimited approval of USDC tokens to the proxy seller contract.\\n     * @dev This external function approves the proxy seller contract to spend an unlimited amount of USDC tokens on behalf of the calling user. \\n     * It sets the approval amount to the maximum possible value, allowing the proxy seller to interact with USDC tokens without needing further approvals.\\n     */\\n    function allApprove() external;\\n\\n    // PURE FUNCTIONS //\\n\\n    /**\\n     * @notice Encodes parameters for interacting with a Hegic option strategy.\\n     * @dev This external function encodes various parameters, including the strategy contract, \\n     * option amount, option period, maximum total cost, and additional data, \\n     * into a single byte array for interactions with a Hegic option strategy.\\n     * @param strategy The address of the Hegic option strategy contract.\\n     * @param amount The amount of the option to be purchased.\\n     * @param period The duration of the option period in seconds.\\n     * @param maxTotalCost The maximum total cost allowed for the option purchase.\\n     * @param additional Additional data required for the strategy, encoded as bytes array.\\n     * @return paramData The encoded parameters as a bytes array.\\n     */\\n    function encodeFromHegic(\\n        IHegicStrategy strategy,\\n        uint256 amount,\\n        uint256 period,\\n        uint256 maxTotalCost,\\n        bytes[] memory additional\\n    ) external pure returns (bytes memory paramData);\\n\\n    /**\\n     * @notice Decodes parameters from an encoded byte array.\\n     * @dev This public function decodes an encoded byte array containing parameters related to a Hegic option strategy. \\n     * It extracts the strategy contract address, option amount, option period, maximum total cost, and additional data.\\n     * @param paramData The encoded parameters as a bytes array.\\n     * @return strategy The address of the Hegic option strategy contract.\\n     * @return amount The amount of the option.\\n     * @return period The duration of the option period in seconds.\\n     * @return maxTotalCost The maximum total cost allowed for the option purchase.\\n     * @return additional Additional data required for the strategy, decoded as bytes array.\\n     */\\n    function decodeFromHegic(\\n        bytes memory paramData\\n    ) external pure returns (\\n        IHegicStrategy strategy,\\n        uint256 amount,\\n        uint256 period,\\n        uint256 maxTotalCost,\\n        bytes[] memory additional\\n    );\\n\\n    // EVENTS //\\n\\n    /**\\n     * @notice Emitted when a Hegic option position is opened.\\n     * @dev This event is triggered when a user successfully opens a Hegic option position using this contract.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param tokenID The identifier of the newly created Hegic option token.\\n     * @param strategy The address of the Hegic option strategy contract used for the position.\\n     * @param holder The address of the user who opened the option position.\\n     * @param amount The amount of the option that was purchased.\\n     * @param period The duration of the option period in seconds.\\n     * @param premium The premium paid for the option.\\n     */\\n    event OpenPositionByHegic(\\n        uint256 indexed buildID,\\n        uint256 tokenID,\\n        address strategy,\\n        address holder,\\n        uint256 amount,\\n        uint256 period,\\n        uint256 premium\\n    );\\n}\",\"keccak256\":\"0x36e7b9ec507254caf9c751e7cd665c32be5cf5fe56bd15a4ec8ba719ba4aba9d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/hegic/TxBuilderOpenHegic.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {BaseTxBuilderOpen, ERC20} from \\\"../BaseTxBuilderOpen.sol\\\";\\nimport {IHegicStrategy} from \\\"./IHegicStrategy.sol\\\";\\nimport {IPositionsManager} from \\\"./IPositionsManager.sol\\\";\\nimport {IProxySeller} from \\\"./IProxySeller.sol\\\";\\nimport {ITxBuilderOpenHegic} from \\\"./ITxBuilderOpenHegic.sol\\\";\\n\\n/**\\n * @title Transaction Builder for Opening Hegic Option Positions\\n * @author 0nika0\\n * @notice This contract facilitates the opening of Hegic option positions using predefined parameters.\\n */\\ncontract TxBuilderOpenHegic is BaseTxBuilderOpen, ITxBuilderOpenHegic {\\n\\n    address public proxySeller; \\n    address public hegicErc721; \\n    address public usdc; \\n    address public referrer;\\n\\n    constructor(\\n        address _proxySeller,\\n        address _hegicErc721,\\n        address _usdc,\\n        address _referrer\\n    ) {\\n        proxySeller = _proxySeller;\\n        hegicErc721 = _hegicErc721;\\n        usdc = _usdc;\\n        referrer = _referrer;\\n    }\\n\\n    // OWNER FUNCTIONS //\\n\\n    /**\\n     * @dev See {ITxBuilderOpenHegic-setReferrer}.\\n     */\\n    function setReferrer(address newReferrer) external onlyOwner {\\n        referrer = newReferrer;\\n    }\\n\\n    // EXTERNAL FUNCTIONS //  \\n\\n    /**\\n     * @dev See {ITxBuilderOpenHegic-allApprove}.\\n     */\\n    function allApprove() external {\\n        ERC20(usdc).approve(proxySeller, type(uint256).max);\\n    }   \\n\\n    // PUBLIC FUNCTIONS //  \\n\\n    /**\\n     * @notice Calculate the amount of a token based on provided parameters.\\n     * @dev This public view function calculates the amount of a token based on a set of input parameters. \\n     * It decodes the parameters, retrieves the necessary information from a Hegic strategy, \\n     * calculates the premium amount from positive PNL (Profit and Loss), \\n     * and ensures it does not exceed the maximum total cost.\\n     * @param parameters The encoded parameters for the calculation.\\n     * @return token The address of the token to be calculated.\\n     * @return amount The calculated amount of the token.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) public view override returns (\\n        address token,\\n        uint256 amount\\n    ) {\\n        token = usdc;\\n\\n        (\\n            IHegicStrategy strategy,\\n            uint256 amountHegic,\\n            uint256 period,\\n            uint256 maxTotalCost,\\n            bytes[] memory additional\\n        ) = decodeFromHegic(parameters);\\n\\n        (, uint128 positivepnl) = strategy.calculateNegativepnlAndPositivepnl(amountHegic, period, additional);\\n\\n        require(uint256(positivepnl) <= maxTotalCost, \\\"maximum total value exceeded\\\");\\n\\n        amount = uint256(positivepnl);\\n    } \\n\\n    // INTERNAL FUNCTIONS //    \\n\\n    /**\\n     * @notice Process a transaction for opening a Hegic option position.\\n     * @dev This internal function processes a transaction for opening a Hegic option position based on provided parameters. \\n     * It decodes the parameters to extract strategy, amount, period, additional data, and premium. \\n     * It then performs the necessary actions to create and transfer the option token to the user.\\n     * @param parameters The encoded parameters for opening the option position.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param user The address of the user who is opening the option position.\\n     */\\n    function _processTx(\\n        bytes memory parameters, \\n        uint256 buildID,\\n        address user\\n    ) internal override {\\n        (\\n            IHegicStrategy strategy,\\n            uint256 amount,\\n            uint256 period,\\n            ,\\n            bytes[] memory additional\\n        ) = decodeFromHegic(parameters);\\n        \\n        (, uint256 premium) = calculateAmount(parameters);\\n        \\n        uint256 id = IPositionsManager(hegicErc721).nextTokenId();\\n        \\n        IProxySeller(proxySeller).buyWithReferal(\\n            strategy,\\n            amount,\\n            period,\\n            additional,\\n            referrer\\n        );\\n        \\n        IPositionsManager(hegicErc721).transferFrom(address(this), user, id);\\n        \\n        emit OpenPositionByHegic(buildID, id, address(strategy), user, amount, period, premium);\\n    }\\n\\n    // PURE FUNCTIONS //\\n\\n    /**\\n     * @dev See {ITxBuilderOpenHegic-encodeFromHegic}.\\n     */\\n    function encodeFromHegic(\\n        IHegicStrategy strategy,\\n        uint256 amount,\\n        uint256 period,\\n        uint256 maxTotalCost,\\n        bytes[] memory additional\\n    ) external pure returns (bytes memory paramData) {\\n        return abi.encode(strategy, amount, period, maxTotalCost, additional);\\n    }\\n\\n    /**\\n     * @dev See {ITxBuilderOpenHegic-decodeFromHegic}.\\n     */\\n    function decodeFromHegic(\\n        bytes memory paramData\\n    ) public pure returns (\\n        IHegicStrategy strategy,\\n        uint256 amount,\\n        uint256 period,\\n        uint256 maxTotalCost,\\n        bytes[] memory additional\\n    ) {\\n        (\\n            strategy,\\n            amount,\\n            period,\\n            maxTotalCost,\\n            additional\\n        ) = abi.decode(paramData, (\\n            IHegicStrategy,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bytes[]\\n        ));\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x8900d12ee4ab7df4a3832d18ad094cbc8da9d5971d0e0be1f556d26134de6a9f\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001c7f38038062001c7f83398181016040528101906200003791906200029b565b620000576200004b6200016560201b60201c565b6200016d60201b60201c565b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050506200030d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002638262000236565b9050919050565b620002758162000256565b81146200028157600080fd5b50565b60008151905062000295816200026a565b92915050565b60008060008060808587031215620002b857620002b762000231565b5b6000620002c88782880162000284565b9450506020620002db8782880162000284565b9350506040620002ee8782880162000284565b9250506060620003018782880162000284565b91505092959194509250565b611962806200031d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806379cce6241161008c578063ad4bb90811610066578063ad4bb9081461023a578063f2b60d2a14610244578063f2fde38b14610278578063f68cae1e14610294576100ea565b806379cce624146101d05780638da5cb5b14610200578063a18a7bfc1461021e576100ea565b80633e413bee116100c85780633e413bee1461015957806368447c9314610177578063715018a6146101955780637531a64e1461019f576100ea565b806305395c20146100ef578063150b7a021461010d5780633819137a1461013d575b600080fd5b6100f76102b2565b6040516101049190610b2a565b60405180910390f35b61012760048036038101906101229190610c20565b6102d8565b6040516101349190610ce3565b60405180910390f35b61015760048036038101906101529190610e3f565b610306565b005b610161610316565b60405161016e9190610b2a565b60405180910390f35b61017f61033c565b60405161018c9190610b2a565b60405180910390f35b61019d610362565b005b6101b960048036038101906101b49190610eae565b610376565b6040516101c7929190610f06565b60405180910390f35b6101ea60048036038101906101e5919061104e565b6104bf565b6040516101f7919061116d565b60405180910390f35b6102086104f4565b6040516102159190610b2a565b60405180910390f35b6102386004803603810190610233919061118f565b61051d565b005b610242610569565b005b61025e60048036038101906102599190610eae565b61065d565b60405161026f959493929190611327565b60405180910390f35b610292600480360381019061028d919061118f565b610696565b005b61029c61071a565b6040516102a99190610b2a565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f150b7a023d4804d13e8c85fb27262cb750cf6ba9f9dd3bb30d90f482ceeb4b1f905095945050505050565b610311838383610740565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61036a61099f565b6103746000610a1d565b565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915060008060008060006103af8861065d565b9450945094509450945060008573ffffffffffffffffffffffffffffffffffffffff1663d666b4338686856040518463ffffffff1660e01b81526004016103f893929190611381565b604080518083038186803b15801561040f57600080fd5b505afa158015610423573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104479190611407565b91505082816fffffffffffffffffffffffffffffffff16111561049f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610496906114a4565b60405180910390fd5b806fffffffffffffffffffffffffffffffff169650505050505050915091565b606085858585856040516020016104da959493929190611327565b604051602081830303815290604052905095945050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61052561099f565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610608929190610f06565b602060405180830381600087803b15801561062257600080fd5b505af1158015610636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065a91906114fc565b50565b6000806000806060858060200190518101906106799190611678565b809550819650829750839850849950505050505091939590929450565b61069e61099f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561070e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070590611781565b60405180910390fd5b61071781610a1d565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008061074f8761065d565b945050935093509350600061076388610376565b9150506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375794a3c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107d057600080fd5b505afa1580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080891906117a1565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663250d295e87878787600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518663ffffffff1660e01b815260040161088f9594939291906117ce565b600060405180830381600087803b1580156108a957600080fd5b505af11580156108bd573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3089846040518463ffffffff1660e01b815260040161092093929190611828565b600060405180830381600087803b15801561093a57600080fd5b505af115801561094e573d6000803e3d6000fd5b50505050877fb58b8caf38f3a5fb1aa22a6ae38defcd6835d2efaf65952daa55d65c56ac416182888a89898860405161098c9695949392919061185f565b60405180910390a2505050505050505050565b6109a7610ae1565b73ffffffffffffffffffffffffffffffffffffffff166109c56104f4565b73ffffffffffffffffffffffffffffffffffffffff1614610a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a129061190c565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b1482610ae9565b9050919050565b610b2481610b09565b82525050565b6000602082019050610b3f6000830184610b1b565b92915050565b6000604051905090565b600080fd5b600080fd5b610b6281610b09565b8114610b6d57600080fd5b50565b600081359050610b7f81610b59565b92915050565b6000819050919050565b610b9881610b85565b8114610ba357600080fd5b50565b600081359050610bb581610b8f565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610be057610bdf610bbb565b5b8235905067ffffffffffffffff811115610bfd57610bfc610bc0565b5b602083019150836001820283011115610c1957610c18610bc5565b5b9250929050565b600080600080600060808688031215610c3c57610c3b610b4f565b5b6000610c4a88828901610b70565b9550506020610c5b88828901610b70565b9450506040610c6c88828901610ba6565b935050606086013567ffffffffffffffff811115610c8d57610c8c610b54565b5b610c9988828901610bca565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610cdd81610ca8565b82525050565b6000602082019050610cf86000830184610cd4565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d4c82610d03565b810181811067ffffffffffffffff82111715610d6b57610d6a610d14565b5b80604052505050565b6000610d7e610b45565b9050610d8a8282610d43565b919050565b600067ffffffffffffffff821115610daa57610da9610d14565b5b610db382610d03565b9050602081019050919050565b82818337600083830152505050565b6000610de2610ddd84610d8f565b610d74565b905082815260208101848484011115610dfe57610dfd610cfe565b5b610e09848285610dc0565b509392505050565b600082601f830112610e2657610e25610bbb565b5b8135610e36848260208601610dcf565b91505092915050565b600080600060608486031215610e5857610e57610b4f565b5b600084013567ffffffffffffffff811115610e7657610e75610b54565b5b610e8286828701610e11565b9350506020610e9386828701610ba6565b9250506040610ea486828701610b70565b9150509250925092565b600060208284031215610ec457610ec3610b4f565b5b600082013567ffffffffffffffff811115610ee257610ee1610b54565b5b610eee84828501610e11565b91505092915050565b610f0081610b85565b82525050565b6000604082019050610f1b6000830185610b1b565b610f286020830184610ef7565b9392505050565b6000610f3a82610b09565b9050919050565b610f4a81610f2f565b8114610f5557600080fd5b50565b600081359050610f6781610f41565b92915050565b600067ffffffffffffffff821115610f8857610f87610d14565b5b602082029050602081019050919050565b6000610fac610fa784610f6d565b610d74565b90508083825260208201905060208402830185811115610fcf57610fce610bc5565b5b835b8181101561101657803567ffffffffffffffff811115610ff457610ff3610bbb565b5b8086016110018982610e11565b85526020850194505050602081019050610fd1565b5050509392505050565b600082601f83011261103557611034610bbb565b5b8135611045848260208601610f99565b91505092915050565b600080600080600060a0868803121561106a57611069610b4f565b5b600061107888828901610f58565b955050602061108988828901610ba6565b945050604061109a88828901610ba6565b93505060606110ab88828901610ba6565b925050608086013567ffffffffffffffff8111156110cc576110cb610b54565b5b6110d888828901611020565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b60005b8381101561111f578082015181840152602081019050611104565b8381111561112e576000848401525b50505050565b600061113f826110e5565b61114981856110f0565b9350611159818560208601611101565b61116281610d03565b840191505092915050565b600060208201905081810360008301526111878184611134565b905092915050565b6000602082840312156111a5576111a4610b4f565b5b60006111b384828501610b70565b91505092915050565b6000819050919050565b60006111e16111dc6111d784610ae9565b6111bc565b610ae9565b9050919050565b60006111f3826111c6565b9050919050565b6000611205826111e8565b9050919050565b611215816111fa565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000611263826110e5565b61126d8185611247565b935061127d818560208601611101565b61128681610d03565b840191505092915050565b600061129d8383611258565b905092915050565b6000602082019050919050565b60006112bd8261121b565b6112c78185611226565b9350836020820285016112d985611237565b8060005b8581101561131557848403895281516112f68582611291565b9450611301836112a5565b925060208a019950506001810190506112dd565b50829750879550505050505092915050565b600060a08201905061133c600083018861120c565b6113496020830187610ef7565b6113566040830186610ef7565b6113636060830185610ef7565b818103608083015261137581846112b2565b90509695505050505050565b60006060820190506113966000830186610ef7565b6113a36020830185610ef7565b81810360408301526113b581846112b2565b9050949350505050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6113e4816113bf565b81146113ef57600080fd5b50565b600081519050611401816113db565b92915050565b6000806040838503121561141e5761141d610b4f565b5b600061142c858286016113f2565b925050602061143d858286016113f2565b9150509250929050565b600082825260208201905092915050565b7f6d6178696d756d20746f74616c2076616c756520657863656564656400000000600082015250565b600061148e601c83611447565b915061149982611458565b602082019050919050565b600060208201905081810360008301526114bd81611481565b9050919050565b60008115159050919050565b6114d9816114c4565b81146114e457600080fd5b50565b6000815190506114f6816114d0565b92915050565b60006020828403121561151257611511610b4f565b5b6000611520848285016114e7565b91505092915050565b60008151905061153881610f41565b92915050565b60008151905061154d81610b8f565b92915050565b600061156661156184610d8f565b610d74565b90508281526020810184848401111561158257611581610cfe565b5b61158d848285611101565b509392505050565b600082601f8301126115aa576115a9610bbb565b5b81516115ba848260208601611553565b91505092915050565b60006115d66115d184610f6d565b610d74565b905080838252602082019050602084028301858111156115f9576115f8610bc5565b5b835b8181101561164057805167ffffffffffffffff81111561161e5761161d610bbb565b5b80860161162b8982611595565b855260208501945050506020810190506115fb565b5050509392505050565b600082601f83011261165f5761165e610bbb565b5b815161166f8482602086016115c3565b91505092915050565b600080600080600060a0868803121561169457611693610b4f565b5b60006116a288828901611529565b95505060206116b38882890161153e565b94505060406116c48882890161153e565b93505060606116d58882890161153e565b925050608086015167ffffffffffffffff8111156116f6576116f5610b54565b5b6117028882890161164a565b9150509295509295909350565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061176b602683611447565b91506117768261170f565b604082019050919050565b6000602082019050818103600083015261179a8161175e565b9050919050565b6000602082840312156117b7576117b6610b4f565b5b60006117c58482850161153e565b91505092915050565b600060a0820190506117e3600083018861120c565b6117f06020830187610ef7565b6117fd6040830186610ef7565b818103606083015261180f81856112b2565b905061181e6080830184610b1b565b9695505050505050565b600060608201905061183d6000830186610b1b565b61184a6020830185610b1b565b6118576040830184610ef7565b949350505050565b600060c0820190506118746000830189610ef7565b6118816020830188610b1b565b61188e6040830187610b1b565b61189b6060830186610ef7565b6118a86080830185610ef7565b6118b560a0830184610ef7565b979650505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006118f6602083611447565b9150611901826118c0565b602082019050919050565b60006020820190508181036000830152611925816118e9565b905091905056fea2646970667358221220a243e3d51955a8fd73a549f9621376571c72dee46f5a812ce8c802a9cd588dc664736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806379cce6241161008c578063ad4bb90811610066578063ad4bb9081461023a578063f2b60d2a14610244578063f2fde38b14610278578063f68cae1e14610294576100ea565b806379cce624146101d05780638da5cb5b14610200578063a18a7bfc1461021e576100ea565b80633e413bee116100c85780633e413bee1461015957806368447c9314610177578063715018a6146101955780637531a64e1461019f576100ea565b806305395c20146100ef578063150b7a021461010d5780633819137a1461013d575b600080fd5b6100f76102b2565b6040516101049190610b2a565b60405180910390f35b61012760048036038101906101229190610c20565b6102d8565b6040516101349190610ce3565b60405180910390f35b61015760048036038101906101529190610e3f565b610306565b005b610161610316565b60405161016e9190610b2a565b60405180910390f35b61017f61033c565b60405161018c9190610b2a565b60405180910390f35b61019d610362565b005b6101b960048036038101906101b49190610eae565b610376565b6040516101c7929190610f06565b60405180910390f35b6101ea60048036038101906101e5919061104e565b6104bf565b6040516101f7919061116d565b60405180910390f35b6102086104f4565b6040516102159190610b2a565b60405180910390f35b6102386004803603810190610233919061118f565b61051d565b005b610242610569565b005b61025e60048036038101906102599190610eae565b61065d565b60405161026f959493929190611327565b60405180910390f35b610292600480360381019061028d919061118f565b610696565b005b61029c61071a565b6040516102a99190610b2a565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f150b7a023d4804d13e8c85fb27262cb750cf6ba9f9dd3bb30d90f482ceeb4b1f905095945050505050565b610311838383610740565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61036a61099f565b6103746000610a1d565b565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915060008060008060006103af8861065d565b9450945094509450945060008573ffffffffffffffffffffffffffffffffffffffff1663d666b4338686856040518463ffffffff1660e01b81526004016103f893929190611381565b604080518083038186803b15801561040f57600080fd5b505afa158015610423573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104479190611407565b91505082816fffffffffffffffffffffffffffffffff16111561049f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610496906114a4565b60405180910390fd5b806fffffffffffffffffffffffffffffffff169650505050505050915091565b606085858585856040516020016104da959493929190611327565b604051602081830303815290604052905095945050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61052561099f565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610608929190610f06565b602060405180830381600087803b15801561062257600080fd5b505af1158015610636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065a91906114fc565b50565b6000806000806060858060200190518101906106799190611678565b809550819650829750839850849950505050505091939590929450565b61069e61099f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561070e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070590611781565b60405180910390fd5b61071781610a1d565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008061074f8761065d565b945050935093509350600061076388610376565b9150506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375794a3c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107d057600080fd5b505afa1580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080891906117a1565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663250d295e87878787600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518663ffffffff1660e01b815260040161088f9594939291906117ce565b600060405180830381600087803b1580156108a957600080fd5b505af11580156108bd573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3089846040518463ffffffff1660e01b815260040161092093929190611828565b600060405180830381600087803b15801561093a57600080fd5b505af115801561094e573d6000803e3d6000fd5b50505050877fb58b8caf38f3a5fb1aa22a6ae38defcd6835d2efaf65952daa55d65c56ac416182888a89898860405161098c9695949392919061185f565b60405180910390a2505050505050505050565b6109a7610ae1565b73ffffffffffffffffffffffffffffffffffffffff166109c56104f4565b73ffffffffffffffffffffffffffffffffffffffff1614610a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a129061190c565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b1482610ae9565b9050919050565b610b2481610b09565b82525050565b6000602082019050610b3f6000830184610b1b565b92915050565b6000604051905090565b600080fd5b600080fd5b610b6281610b09565b8114610b6d57600080fd5b50565b600081359050610b7f81610b59565b92915050565b6000819050919050565b610b9881610b85565b8114610ba357600080fd5b50565b600081359050610bb581610b8f565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610be057610bdf610bbb565b5b8235905067ffffffffffffffff811115610bfd57610bfc610bc0565b5b602083019150836001820283011115610c1957610c18610bc5565b5b9250929050565b600080600080600060808688031215610c3c57610c3b610b4f565b5b6000610c4a88828901610b70565b9550506020610c5b88828901610b70565b9450506040610c6c88828901610ba6565b935050606086013567ffffffffffffffff811115610c8d57610c8c610b54565b5b610c9988828901610bca565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610cdd81610ca8565b82525050565b6000602082019050610cf86000830184610cd4565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d4c82610d03565b810181811067ffffffffffffffff82111715610d6b57610d6a610d14565b5b80604052505050565b6000610d7e610b45565b9050610d8a8282610d43565b919050565b600067ffffffffffffffff821115610daa57610da9610d14565b5b610db382610d03565b9050602081019050919050565b82818337600083830152505050565b6000610de2610ddd84610d8f565b610d74565b905082815260208101848484011115610dfe57610dfd610cfe565b5b610e09848285610dc0565b509392505050565b600082601f830112610e2657610e25610bbb565b5b8135610e36848260208601610dcf565b91505092915050565b600080600060608486031215610e5857610e57610b4f565b5b600084013567ffffffffffffffff811115610e7657610e75610b54565b5b610e8286828701610e11565b9350506020610e9386828701610ba6565b9250506040610ea486828701610b70565b9150509250925092565b600060208284031215610ec457610ec3610b4f565b5b600082013567ffffffffffffffff811115610ee257610ee1610b54565b5b610eee84828501610e11565b91505092915050565b610f0081610b85565b82525050565b6000604082019050610f1b6000830185610b1b565b610f286020830184610ef7565b9392505050565b6000610f3a82610b09565b9050919050565b610f4a81610f2f565b8114610f5557600080fd5b50565b600081359050610f6781610f41565b92915050565b600067ffffffffffffffff821115610f8857610f87610d14565b5b602082029050602081019050919050565b6000610fac610fa784610f6d565b610d74565b90508083825260208201905060208402830185811115610fcf57610fce610bc5565b5b835b8181101561101657803567ffffffffffffffff811115610ff457610ff3610bbb565b5b8086016110018982610e11565b85526020850194505050602081019050610fd1565b5050509392505050565b600082601f83011261103557611034610bbb565b5b8135611045848260208601610f99565b91505092915050565b600080600080600060a0868803121561106a57611069610b4f565b5b600061107888828901610f58565b955050602061108988828901610ba6565b945050604061109a88828901610ba6565b93505060606110ab88828901610ba6565b925050608086013567ffffffffffffffff8111156110cc576110cb610b54565b5b6110d888828901611020565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b60005b8381101561111f578082015181840152602081019050611104565b8381111561112e576000848401525b50505050565b600061113f826110e5565b61114981856110f0565b9350611159818560208601611101565b61116281610d03565b840191505092915050565b600060208201905081810360008301526111878184611134565b905092915050565b6000602082840312156111a5576111a4610b4f565b5b60006111b384828501610b70565b91505092915050565b6000819050919050565b60006111e16111dc6111d784610ae9565b6111bc565b610ae9565b9050919050565b60006111f3826111c6565b9050919050565b6000611205826111e8565b9050919050565b611215816111fa565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000611263826110e5565b61126d8185611247565b935061127d818560208601611101565b61128681610d03565b840191505092915050565b600061129d8383611258565b905092915050565b6000602082019050919050565b60006112bd8261121b565b6112c78185611226565b9350836020820285016112d985611237565b8060005b8581101561131557848403895281516112f68582611291565b9450611301836112a5565b925060208a019950506001810190506112dd565b50829750879550505050505092915050565b600060a08201905061133c600083018861120c565b6113496020830187610ef7565b6113566040830186610ef7565b6113636060830185610ef7565b818103608083015261137581846112b2565b90509695505050505050565b60006060820190506113966000830186610ef7565b6113a36020830185610ef7565b81810360408301526113b581846112b2565b9050949350505050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6113e4816113bf565b81146113ef57600080fd5b50565b600081519050611401816113db565b92915050565b6000806040838503121561141e5761141d610b4f565b5b600061142c858286016113f2565b925050602061143d858286016113f2565b9150509250929050565b600082825260208201905092915050565b7f6d6178696d756d20746f74616c2076616c756520657863656564656400000000600082015250565b600061148e601c83611447565b915061149982611458565b602082019050919050565b600060208201905081810360008301526114bd81611481565b9050919050565b60008115159050919050565b6114d9816114c4565b81146114e457600080fd5b50565b6000815190506114f6816114d0565b92915050565b60006020828403121561151257611511610b4f565b5b6000611520848285016114e7565b91505092915050565b60008151905061153881610f41565b92915050565b60008151905061154d81610b8f565b92915050565b600061156661156184610d8f565b610d74565b90508281526020810184848401111561158257611581610cfe565b5b61158d848285611101565b509392505050565b600082601f8301126115aa576115a9610bbb565b5b81516115ba848260208601611553565b91505092915050565b60006115d66115d184610f6d565b610d74565b905080838252602082019050602084028301858111156115f9576115f8610bc5565b5b835b8181101561164057805167ffffffffffffffff81111561161e5761161d610bbb565b5b80860161162b8982611595565b855260208501945050506020810190506115fb565b5050509392505050565b600082601f83011261165f5761165e610bbb565b5b815161166f8482602086016115c3565b91505092915050565b600080600080600060a0868803121561169457611693610b4f565b5b60006116a288828901611529565b95505060206116b38882890161153e565b94505060406116c48882890161153e565b93505060606116d58882890161153e565b925050608086015167ffffffffffffffff8111156116f6576116f5610b54565b5b6117028882890161164a565b9150509295509295909350565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061176b602683611447565b91506117768261170f565b604082019050919050565b6000602082019050818103600083015261179a8161175e565b9050919050565b6000602082840312156117b7576117b6610b4f565b5b60006117c58482850161153e565b91505092915050565b600060a0820190506117e3600083018861120c565b6117f06020830187610ef7565b6117fd6040830186610ef7565b818103606083015261180f81856112b2565b905061181e6080830184610b1b565b9695505050505050565b600060608201905061183d6000830186610b1b565b61184a6020830185610b1b565b6118576040830184610ef7565b949350505050565b600060c0820190506118746000830189610ef7565b6118816020830188610b1b565b61188e6040830187610b1b565b61189b6060830186610ef7565b6118a86080830185610ef7565b6118b560a0830184610ef7565b979650505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006118f6602083611447565b9150611901826118c0565b602082019050919050565b60006020820190508181036000830152611925816118e9565b905091905056fea2646970667358221220a243e3d51955a8fd73a549f9621376571c72dee46f5a812ce8c802a9cd588dc664736f6c63430008090033",
  "devdoc": {
    "author": "0nika0",
    "kind": "dev",
    "methods": {
      "allApprove()": {
        "details": "See {ITxBuilderOpenHegic-allApprove}."
      },
      "calculateAmount(bytes)": {
        "details": "This public view function calculates the amount of a token based on a set of input parameters.  It decodes the parameters, retrieves the necessary information from a Hegic strategy,  calculates the premium amount from positive PNL (Profit and Loss),  and ensures it does not exceed the maximum total cost.",
        "params": {
          "parameters": "The encoded parameters for the calculation."
        },
        "returns": {
          "amount": "The calculated amount of the token.",
          "token": "The address of the token to be calculated."
        }
      },
      "decodeFromHegic(bytes)": {
        "details": "See {ITxBuilderOpenHegic-decodeFromHegic}."
      },
      "encodeFromHegic(address,uint256,uint256,uint256,bytes[])": {
        "details": "See {ITxBuilderOpenHegic-encodeFromHegic}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "processTx(bytes,uint256,address)": {
        "details": "See {IBaseTxBuilderOpen-processTx}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setReferrer(address)": {
        "details": "See {ITxBuilderOpenHegic-setReferrer}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Transaction Builder for Opening Hegic Option Positions",
    "version": 1
  },
  "userdoc": {
    "events": {
      "OpenPositionByHegic(uint256,uint256,address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when a Hegic option position is opened."
      }
    },
    "kind": "user",
    "methods": {
      "calculateAmount(bytes)": {
        "notice": "Calculate the amount of a token based on provided parameters."
      }
    },
    "notice": "This contract facilitates the opening of Hegic option positions using predefined parameters.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/hegic/TxBuilderOpenHegic.sol:TxBuilderOpenHegic",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4022,
        "contract": "contracts/hegic/TxBuilderOpenHegic.sol:TxBuilderOpenHegic",
        "label": "proxySeller",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4024,
        "contract": "contracts/hegic/TxBuilderOpenHegic.sol:TxBuilderOpenHegic",
        "label": "hegicErc721",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4026,
        "contract": "contracts/hegic/TxBuilderOpenHegic.sol:TxBuilderOpenHegic",
        "label": "usdc",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4028,
        "contract": "contracts/hegic/TxBuilderOpenHegic.sol:TxBuilderOpenHegic",
        "label": "referrer",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}