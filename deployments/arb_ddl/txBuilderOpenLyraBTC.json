{
  "address": "0x90481D5ed869be0E5bf11e5a2a8dCF632b9FAEf5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_optionMarket",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_optionToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strikeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "iterations",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IOptionMarket.OptionType",
          "name": "optionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "setCollateralTo",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minTotalCost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxTotalCost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "OpenPositionByLyra",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "calculateAmount",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "name": "decodeFromLyra",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "strikeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "iterations",
              "type": "uint256"
            },
            {
              "internalType": "enum IOptionMarket.OptionType",
              "name": "optionType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "setCollateralTo",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minTotalCost",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxTotalCost",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            }
          ],
          "internalType": "struct IOptionMarket.TradeInputParameters",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "strikeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "iterations",
              "type": "uint256"
            },
            {
              "internalType": "enum IOptionMarket.OptionType",
              "name": "optionType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "setCollateralTo",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minTotalCost",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxTotalCost",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            }
          ],
          "internalType": "struct IOptionMarket.TradeInputParameters",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "encodeFromLyra",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "parametersArray",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "processTx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referrer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newReferrer",
          "type": "address"
        }
      ],
      "name": "setReferrer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7a255d5c71a3cf902361009acdd6214ab4d561b3cebf662cb4c90b482c91d84f",
  "receipt": {
    "to": null,
    "from": "0x8B57f3a9bDf2cfdBF9B2627ff8bEa86fB5641a50",
    "contractAddress": "0x90481D5ed869be0E5bf11e5a2a8dCF632b9FAEf5",
    "transactionIndex": 1,
    "gasUsed": "8434441",
    "logsBloom": "0x
    "blockHash": "0xfb6ab3e3b0193bffdb6027dabe1dba8e70acf029f67f1f12e27b5044d89380c4",
    "transactionHash": "0x7a255d5c71a3cf902361009acdd6214ab4d561b3cebf662cb4c90b482c91d84f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 143163661,
        "transactionHash": "0x7a255d5c71a3cf902361009acdd6214ab4d561b3cebf662cb4c90b482c91d84f",
        "address": "0x90481D5ed869be0E5bf11e5a2a8dCF632b9FAEf5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b57f3a9bdf2cfdbf9b2627ff8bea86fb5641a50"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xfb6ab3e3b0193bffdb6027dabe1dba8e70acf029f67f1f12e27b5044d89380c4"
      }
    ],
    "blockNumber": 143163661,
    "cumulativeGasUsed": "8434441",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe044919cf58dFb066FC9DE7c69C7db19f336B20c",
    "0x0e97498F3d91756Ec7F2d244aC97F6Ea9f4eBbC3",
    "0x683ad8b899cd14d8e077c9a623e8b3fed65a8c09"
  ],
  "numDeployments": 1,
  "solcInputHash": "bbe1494aa8cb1ccf942a0a0e74d3ef7f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_optionMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_optionToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strikeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IOptionMarket.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setCollateralTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTotalCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTotalCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"OpenPositionByLyra\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"calculateAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"name\":\"decodeFromLyra\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"strikeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"enum IOptionMarket.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setCollateralTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"internalType\":\"struct IOptionMarket.TradeInputParameters\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"strikeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"enum IOptionMarket.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setCollateralTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"internalType\":\"struct IOptionMarket.TradeInputParameters\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"encodeFromLyra\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"parametersArray\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"processTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReferrer\",\"type\":\"address\"}],\"name\":\"setReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0nika0\",\"kind\":\"dev\",\"methods\":{\"allApprove()\":{\"details\":\"See {ITxBuilderOpenLyra-allApprove}.\"},\"calculateAmount(bytes)\":{\"details\":\"This public view function calculates the amount of a token based on a set of input parameters. It decodes the parameters, retrieves the necessary information from a Lyra strategy, and calculates the amount based on the option type and related factors.\",\"params\":{\"parameters\":\"The encoded parameters for the calculation.\"},\"returns\":{\"amount\":\"The calculated amount of the token.\",\"token\":\"The address of the token to be calculated.\"}},\"decodeFromLyra(bytes)\":{\"details\":\"See {ITxBuilderOpenLyra-decodeFromLyra}.\"},\"encodeFromLyra((uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,address))\":{\"details\":\"See {ITxBuilderOpenLyra-encodeFromLyra}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"processTx(bytes,uint256,address)\":{\"details\":\"See {IBaseTxBuilderOpen-processTx}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setReferrer(address)\":{\"details\":\"See {ITxBuilderOpenLyra-setReferrer}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"TxBuilderOpenLyra\",\"version\":1},\"userdoc\":{\"events\":{\"OpenPositionByLyra(uint256,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Emitted when a position is opened using the Lyra protocol.\"}},\"kind\":\"user\",\"methods\":{\"calculateAmount(bytes)\":{\"notice\":\"Calculate the amount of a token based on provided parameters.\"}},\"notice\":\"A contract for building and processing Lyra option transactions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lyra/TxBuilderOpenLyra.sol\":\"TxBuilderOpenLyra\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BaseTxBuilderOpen.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IBaseTxBuilderOpen} from \\\"./IBaseTxBuilderOpen.sol\\\";\\n\\n/**\\n * @title BaseTxBuilderOpen\\n * @author 0nika0\\n * @notice An abstract base contract for building and processing option transactions.\\n * @dev This contract provides the foundational structure for creating and processing option transactions. \\n * It includes functions to handle transaction processing and token amount calculation.\\n */\\nabstract contract BaseTxBuilderOpen is Ownable, IBaseTxBuilderOpen {\\n\\n    // PUBLIC FUNCTONS //\\n\\n    /**\\n     * @dev See {IBaseTxBuilderOpen-calculateAmount}.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) public view virtual returns (\\n        address token,\\n        uint256 amount\\n    ) {}\\n\\n    // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @dev See {IBaseTxBuilderOpen-processTx}.\\n     */\\n    function processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) external {\\n        _processTx(parametersArray, buildID, user);\\n    }\\n\\n    function onERC721Received(\\n        address, \\n        address, \\n        uint256, \\n        bytes calldata\\n    ) external returns(bytes4) {\\n        return bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"));\\n    } \\n\\n    // INTERNAL FUNCTIONS //\\n\\n    /**\\n     * @notice Internal function to process a transaction for opening an option position.\\n     * @dev This internal function processes a transaction for opening an option position based on the provided parameters.\\n     * @param parametersArray The encoded parameters for opening the option position.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param user The address of the user who is opening the option position.\\n     */\\n    function _processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd63444fe003c4e60eb5224e3b3f4913e27778ac54bd275286bb7fca05f53d583\",\"license\":\"GPL-3.0-or-later\"},\"contracts/IBaseTxBuilderOpen.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\n\\ninterface IBaseTxBuilderOpen {\\n    // PUBLIC FUNCTONS //\\n\\n    /**\\n     * @notice Calculate the amount of a token based on provided parameters.\\n     * @dev This function calculates the amount of a token based on a set of input parameters.\\n     * @param parameters The encoded parameters for the calculation.\\n     * @return token The address of the token to be calculated.\\n     * @return amount The calculated amount of the token.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) external view returns (\\n        address token,\\n        uint256 amount\\n    ); \\n\\n     // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @notice Process a transaction for opening an option position.\\n     * @dev This function processes a transaction for opening an option position based on the provided parameters.\\n     * @param parametersArray The encoded parameters for opening the option position.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param user The address of the user who is opening the option position.\\n     */\\n    function processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) external;\\n\\n\\n\\n}\\n\",\"keccak256\":\"0xe97c16dcf0d4746277867ab4ead00665161b2535fde4a2cbb31a51e691780302\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lyra/IOptionMarket.sol\":{\"content\":\"pragma solidity ^0.8.3;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IOptionMarket {\\n    enum OptionType {\\n        LONG_CALL,\\n        LONG_PUT,\\n        SHORT_CALL_BASE,\\n        SHORT_CALL_QUOTE,\\n        SHORT_PUT_QUOTE\\n    }\\n\\n    struct Result {\\n        uint positionId;\\n        uint totalCost;\\n        uint totalFee;\\n    }\\n\\n    struct TradeInputParameters {\\n        // id of strike\\n        uint strikeId;\\n        // OptionToken ERC721 id for position (set to 0 for new positions)\\n        uint positionId;\\n        // number of sub-orders to break order into (reduces slippage)\\n        uint iterations;\\n        // type of option to trade\\n        OptionType optionType;\\n        // number of contracts to trade\\n        uint amount;\\n        // final amount of collateral to leave in OptionToken position\\n        uint setCollateralTo;\\n        // revert trade if totalCost is below this value\\n        uint minTotalCost;\\n        // revert trade if totalCost is above this value\\n        uint maxTotalCost;\\n        // referrer emitted in Trade event, no on-chain interaction\\n        address referrer;\\n    }\\n\\n    function openPosition(TradeInputParameters memory params) external returns (Result memory result);\\n    function closePosition(TradeInputParameters memory params) external returns (Result memory result);\\n    function quoteAsset() external view returns(ERC20);\\n    function baseAsset() external view returns(ERC20);\\n}\",\"keccak256\":\"0x35ee0a81acdb4e3abfc496ba55982e71d5b0d0a992d2736a19a2b958862eac2a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lyra/IOptionToken.sol\":{\"content\":\"pragma solidity ^0.8.3;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IOptionToken is IERC721 {\\n    function nextId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9ebb31691b8a685c974af09246e620f1f8004c10e4e032e1f4083f71e1abf3fb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lyra/ITxBuilderOpenLyra.sol\":{\"content\":\"pragma solidity ^0.8.3;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {IOptionMarket} from \\\"./IOptionMarket.sol\\\";\\n\\ninterface ITxBuilderOpenLyra {\\n\\n    // OWNER FUNCTIONS //\\n\\n    /**\\n     * @notice Set a new referrer address.\\n     * @dev This external function allows the owner to update the referrer address associated with the contract.\\n     * @param newReferrer The new address to set as the referrer.\\n     */\\n    function setReferrer(address newReferrer) external;\\n\\n    // EXTERNAL FUNCTIONS //  \\n\\n    /**\\n     * @notice Grants an unlimited approval for assets to be used in the OptionMarket.\\n     * @dev This external function allows the contract owner to grant an unlimited approval for the quote asset and base asset to be used within the OptionMarket contract. \\n     * It sets the approval amount to the maximum possible value, allowing the OptionMarket to interact with these assets without needing further approvals.\\n     */\\n    function allApprove() external;\\n\\n    // PURE FUNCTIONS //\\n\\n    /**\\n     * @notice Encodes parameters for interacting with a Lyra option strategy.\\n     * @dev This external function encodes the provided trade input parameters into a bytes array for interactions with a Lyra option strategy.\\n     * @param params The trade input parameters to encode.\\n     * @return paramData The encoded parameters as a bytes array.\\n     */\\n    function encodeFromLyra(IOptionMarket.TradeInputParameters memory params) external pure returns (bytes memory paramData);\\n\\n    /**\\n     * @notice Decodes parameters from an encoded byte array.\\n     * @dev This public function decodes an encoded byte array containing trade input parameters related to a Lyra option strategy.\\n     * @param paramData The encoded parameters as a bytes array.\\n     * @return params The decoded trade input parameters.\\n     */\\n    function decodeFromLyra(bytes memory paramData) external pure returns (IOptionMarket.TradeInputParameters memory params);\\n\\n    // EVENTS //\\n\\n    /**\\n     * @notice Emitted when a position is opened using the Lyra protocol.\\n     * @dev This event is emitted when a user opens a position using the Lyra protocol, recording important details of the transaction.\\n     * @param buildID The unique identifier for the Lyra option position build.\\n     * @param strikeId The identifier for the strike price of the option.\\n     * @param positionId The identifier for the option position.\\n     * @param iterations The number of iterations for the Lyra option.\\n     * @param optionType The type of the Lyra option (e.g., LONG_CALL, LONG_PUT, SHORT_CALL_BASE).\\n     * @param amount The amount of the Lyra option.\\n     * @param setCollateralTo The collateral amount set for the option.\\n     * @param minTotalCost The minimum total cost allowed for the option.\\n     * @param maxTotalCost The maximum total cost allowed for the option.\\n     * @param referrer The referrer associated with the option transaction.\\n     * @param tokenID The unique identifier of the Lyra option token.\\n     */\\n    event OpenPositionByLyra(\\n        uint256 indexed buildID,\\n        uint256 strikeId,\\n        uint256 positionId,\\n        uint256 iterations,\\n        IOptionMarket.OptionType optionType,\\n        uint256 amount,\\n        uint256 setCollateralTo,\\n        uint256 minTotalCost,\\n        uint256 maxTotalCost,\\n        address referrer,\\n        uint256 tokenID\\n    );\\n}\\n\",\"keccak256\":\"0x0c16b7c9ed63b9d4dc26b123c9c4bd1cc456f7e8ff426a263054771223425a2b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lyra/TxBuilderOpenLyra.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {BaseTxBuilderOpen, ERC20} from \\\"../BaseTxBuilderOpen.sol\\\";\\nimport {IOptionMarket} from \\\"./IOptionMarket.sol\\\";\\nimport {IOptionToken} from \\\"./IOptionToken.sol\\\";\\nimport {ITxBuilderOpenLyra} from \\\"./ITxBuilderOpenLyra.sol\\\";\\n\\n/**\\n * @title TxBuilderOpenLyra\\n * @author 0nika0\\n * @notice A contract for building and processing Lyra option transactions.\\n */\\ncontract TxBuilderOpenLyra is BaseTxBuilderOpen, ITxBuilderOpenLyra {\\n    \\n    address public optionMarket; \\n    address public optionToken; \\n    address public referrer;\\n\\n    constructor(\\n        address _optionMarket,\\n        address _optionToken,\\n        address _referrer\\n    ) {\\n        optionMarket = _optionMarket;\\n        optionToken = _optionToken;\\n        referrer = _referrer;\\n    }\\n\\n    // OWNER FUNCTIONS //\\n\\n    /**\\n     * @dev See {ITxBuilderOpenLyra-setReferrer}.\\n     */\\n    function setReferrer(address newReferrer) external onlyOwner {\\n        referrer = newReferrer;\\n    }\\n\\n    // EXTERNAL FUNCTIONS //  \\n\\n    /**\\n     * @dev See {ITxBuilderOpenLyra-allApprove}.\\n     */\\n    function allApprove() external {\\n        IOptionMarket(optionMarket).quoteAsset().approve(optionMarket, type(uint256).max);\\n        IOptionMarket(optionMarket).baseAsset().approve(optionMarket, type(uint256).max);\\n    }\\n\\n    // PUBLIC FUNCTIONS //  \\n\\n    /**\\n     * @notice Calculate the amount of a token based on provided parameters.\\n     * @dev This public view function calculates the amount of a token based on a set of input parameters.\\n     * It decodes the parameters, retrieves the necessary information from a Lyra strategy,\\n     * and calculates the amount based on the option type and related factors.\\n     * @param parameters The encoded parameters for the calculation.\\n     * @return token The address of the token to be calculated.\\n     * @return amount The calculated amount of the token.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) public view override returns (\\n        address token,\\n        uint256 amount\\n    ) {\\n        (\\n            IOptionMarket.TradeInputParameters memory params\\n        ) = decodeFromLyra(parameters);\\n\\n        if (params.optionType == IOptionMarket.OptionType.LONG_CALL || params.optionType == IOptionMarket.OptionType.LONG_PUT) {\\n            amount = params.maxTotalCost / (1e18 / 10 ** IOptionMarket(optionMarket).quoteAsset().decimals());\\n            token = address(IOptionMarket(optionMarket).quoteAsset());\\n        } else if (params.optionType == IOptionMarket.OptionType.SHORT_CALL_QUOTE || params.optionType == IOptionMarket.OptionType.SHORT_PUT_QUOTE) {\\n            amount = params.setCollateralTo / (1e18 / 10 ** IOptionMarket(optionMarket).quoteAsset().decimals());\\n            token = address(IOptionMarket(optionMarket).quoteAsset());\\n        } else if (params.optionType == IOptionMarket.OptionType.SHORT_CALL_BASE) {\\n            amount = params.setCollateralTo / (1e18 / 10 ** IOptionMarket(optionMarket).baseAsset().decimals());\\n            token = address(IOptionMarket(optionMarket).baseAsset());\\n        }\\n    }\\n\\n    // INTERNAL FUNCTIONS //   \\n\\n    /**\\n     * @notice Process a transaction for opening a Lyra option position.\\n     * @dev This internal function processes a transaction for opening a Lyra option position based on provided parameters.\\n     * It decodes the parameters, retrieves the necessary information from a Lyra strategy,\\n     * calculates the required Lyra asset, and performs the necessary actions to create and transfer the option token to the user.\\n     * @param parameters The encoded parameters for opening the option position.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param user The address of the user who is opening the option position.\\n     */\\n    function _processTx(\\n        bytes memory parameters,\\n        uint256 buildID,\\n        address user\\n    ) override internal {\\n        (\\n            IOptionMarket.TradeInputParameters memory params\\n        ) = decodeFromLyra(parameters);\\n\\n        params.referrer = referrer; \\n        \\n        (address lyraAsset,) = calculateAmount(parameters);\\n        \\n        uint256 id = IOptionToken(optionToken).nextId();\\n        \\n        IOptionMarket(optionMarket).openPosition(params);\\n        \\n        ERC20(lyraAsset).transfer(user, ERC20(lyraAsset).balanceOf(address(this)));\\n        \\n        IOptionToken(optionToken).transferFrom(address(this), user, id);\\n\\n        if (params.optionType == IOptionMarket.OptionType.SHORT_CALL_BASE) {\\n            IOptionMarket(optionMarket).quoteAsset().transfer(user, IOptionMarket(optionMarket).quoteAsset().balanceOf(address(this)));\\n        }\\n        \\n        emit OpenPositionByLyra(\\n            buildID,\\n            params.strikeId,\\n            params.positionId,\\n            params.iterations,\\n            params.optionType,\\n            params.amount,\\n            params.setCollateralTo,\\n            params.minTotalCost,\\n            params.maxTotalCost,\\n            params.referrer,\\n            id\\n        );\\n    }\\n\\n    // PURE FUNCTIONS //\\n\\n    /**\\n     * @dev See {ITxBuilderOpenLyra-encodeFromLyra}.\\n     */\\n    function encodeFromLyra(IOptionMarket.TradeInputParameters memory params) external pure returns (bytes memory paramData) {\\n        return abi.encode(params);\\n    }\\n\\n    /**\\n     * @dev See {ITxBuilderOpenLyra-decodeFromLyra}.\\n     */\\n    function decodeFromLyra(bytes memory paramData) public pure returns (IOptionMarket.TradeInputParameters memory params) {\\n        (\\n            params\\n        ) = abi.decode(paramData, (\\n            IOptionMarket.TradeInputParameters\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x98e4e5c10339d14d67670c91f338775b587585f0f2c36c7121b6d24ec53edd93\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200286738038062002867833981810160405281019062000037919062000259565b620000576200004b6200012360201b60201c565b6200012b60201b60201c565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620002b5565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022182620001f4565b9050919050565b620002338162000214565b81146200023f57600080fd5b50565b600081519050620002538162000228565b92915050565b600080600060608486031215620002755762000274620001ef565b5b6000620002858682870162000242565b9350506020620002988682870162000242565b9250506040620002ab8682870162000242565b9150509250925092565b6125a280620002c56000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637531a64e1161008c578063a18a7bfc11610066578063a18a7bfc14610215578063ad4bb90814610231578063bb4a9f881461023b578063f2fde38b14610259576100cf565b80637531a64e1461019657806389f94c29146101c75780638da5cb5b146101f7576100cf565b8063150b7a02146100d45780632bab754b146101045780632f63d892146101225780633819137a1461015257806368447c931461016e578063715018a61461018c575b600080fd5b6100ee60048036038101906100e9919061177d565b610275565b6040516100fb9190611840565b60405180910390f35b61010c6102a3565b604051610119919061186a565b60405180910390f35b61013c60048036038101906101379190611a1b565b6102c9565b6040516101499190611ad1565b60405180910390f35b61016c60048036038101906101679190611ba8565b6102f2565b005b610176610302565b604051610183919061186a565b60405180910390f35b610194610328565b005b6101b060048036038101906101ab9190611c17565b61033c565b6040516101be929190611c6f565b60405180910390f35b6101e160048036038101906101dc9190611c17565b610a24565b6040516101ee9190611de4565b60405180910390f35b6101ff610a47565b60405161020c919061186a565b60405180910390f35b61022f600480360381019061022a9190611e00565b610a70565b005b610239610abc565b005b610243610d9c565b604051610250919061186a565b60405180910390f35b610273600480360381019061026e9190611e00565b610dc2565b005b60007f150b7a023d4804d13e8c85fb27262cb750cf6ba9f9dd3bb30d90f482ceeb4b1f905095945050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060816040516020016102dc9190611de4565b6040516020818303038152906040529050919050565b6102fd838383610e46565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6103306114b2565b61033a6000611530565b565b600080600061034a84610a24565b9050600060048111156103605761035f611ca7565b5b8160600151600481111561037757610376611ca7565b5b14806103ab57506001600481111561039257610391611ca7565b5b816060015160048111156103a9576103a8611ca7565b5b145b156105a457600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561041857600080fd5b505afa15801561042c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104509190611e6b565b73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561049557600080fd5b505afa1580156104a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cd9190611ed1565b600a6104d99190612060565b670de0b6b3a76400006104ec91906120da565b8160e001516104fb91906120da565b9150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561056557600080fd5b505afa158015610579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059d9190611e6b565b9250610a1e565b600360048111156105b8576105b7611ca7565b5b816060015160048111156105cf576105ce611ca7565b5b148061060257506004808111156105e9576105e8611ca7565b5b81606001516004811115610600576105ff611ca7565b5b145b156107fb57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561066f57600080fd5b505afa158015610683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a79190611e6b565b73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156106ec57600080fd5b505afa158015610700573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107249190611ed1565b600a6107309190612060565b670de0b6b3a764000061074391906120da565b8160a0015161075291906120da565b9150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b1580156107bc57600080fd5b505afa1580156107d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f49190611e6b565b9250610a1d565b6002600481111561080f5761080e611ca7565b5b8160600151600481111561082657610825611ca7565b5b1415610a1c57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdf456e16040518163ffffffff1660e01b815260040160206040518083038186803b15801561089457600080fd5b505afa1580156108a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cc9190611e6b565b73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561091157600080fd5b505afa158015610925573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109499190611ed1565b600a6109559190612060565b670de0b6b3a764000061096891906120da565b8160a0015161097791906120da565b9150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdf456e16040518163ffffffff1660e01b815260040160206040518083038186803b1580156109e157600080fd5b505afa1580156109f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a199190611e6b565b92505b5b5b50915091565b610a2c6115fc565b81806020019051810190610a40919061222a565b9050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610a786114b2565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2457600080fd5b505afa158015610b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5c9190611e6b565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610bd8929190611c6f565b602060405180830381600087803b158015610bf257600080fd5b505af1158015610c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2a9190612290565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdf456e16040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9357600080fd5b505afa158015610ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccb9190611e6b565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610d47929190611c6f565b602060405180830381600087803b158015610d6157600080fd5b505af1158015610d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d999190612290565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610dca6114b2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3190612340565b60405180910390fd5b610e4381611530565b50565b6000610e5184610a24565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000610eb98561033c565b5090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166361b8ce8c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2657600080fd5b505afa158015610f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5e9190612360565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d6c0bb44846040518263ffffffff1660e01b8152600401610fbb9190611de4565b606060405180830381600087803b158015610fd557600080fd5b505af1158015610fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100d91906123f1565b508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611064919061186a565b60206040518083038186803b15801561107c57600080fd5b505afa158015611090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b49190612360565b6040518363ffffffff1660e01b81526004016110d1929190611c6f565b602060405180830381600087803b1580156110eb57600080fd5b505af11580156110ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111239190612290565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3086846040518463ffffffff1660e01b81526004016111839392919061241e565b600060405180830381600087803b15801561119d57600080fd5b505af11580156111b1573d6000803e3d6000fd5b50505050600260048111156111c9576111c8611ca7565b5b836060015160048111156111e0576111df611ca7565b5b141561143b57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561124e57600080fd5b505afa158015611262573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112869190611e6b565b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561130a57600080fd5b505afa15801561131e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113429190611e6b565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161137a919061186a565b60206040518083038186803b15801561139257600080fd5b505afa1580156113a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ca9190612360565b6040518363ffffffff1660e01b81526004016113e7929190611c6f565b602060405180830381600087803b15801561140157600080fd5b505af1158015611415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114399190612290565b505b847f8650344f378c8df5446864351ca3e88677936be22fcf7b4d2254da11ce46875a846000015185602001518660400151876060015188608001518960a001518a60c001518b60e001518c61010001518b6040516114a29a99989796959493929190612464565b60405180910390a2505050505050565b6114ba6115f4565b73ffffffffffffffffffffffffffffffffffffffff166114d8610a47565b73ffffffffffffffffffffffffffffffffffffffff161461152e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115259061254c565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6040518061012001604052806000815260200160008152602001600081526020016000600481111561163157611630611ca7565b5b815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116af82611684565b9050919050565b6116bf816116a4565b81146116ca57600080fd5b50565b6000813590506116dc816116b6565b92915050565b6000819050919050565b6116f5816116e2565b811461170057600080fd5b50565b600081359050611712816116ec565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261173d5761173c611718565b5b8235905067ffffffffffffffff81111561175a5761175961171d565b5b60208301915083600182028301111561177657611775611722565b5b9250929050565b6000806000806000608086880312156117995761179861167a565b5b60006117a7888289016116cd565b95505060206117b8888289016116cd565b94505060406117c988828901611703565b935050606086013567ffffffffffffffff8111156117ea576117e961167f565b5b6117f688828901611727565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61183a81611805565b82525050565b60006020820190506118556000830184611831565b92915050565b611864816116a4565b82525050565b600060208201905061187f600083018461185b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6118d38261188a565b810181811067ffffffffffffffff821117156118f2576118f161189b565b5b80604052505050565b6000611905611670565b905061191182826118ca565b919050565b6005811061192357600080fd5b50565b60008135905061193581611916565b92915050565b6000610120828403121561195257611951611885565b5b61195d6101206118fb565b9050600061196d84828501611703565b600083015250602061198184828501611703565b602083015250604061199584828501611703565b60408301525060606119a984828501611926565b60608301525060806119bd84828501611703565b60808301525060a06119d184828501611703565b60a08301525060c06119e584828501611703565b60c08301525060e06119f984828501611703565b60e083015250610100611a0e848285016116cd565b6101008301525092915050565b60006101208284031215611a3257611a3161167a565b5b6000611a408482850161193b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a83578082015181840152602081019050611a68565b83811115611a92576000848401525b50505050565b6000611aa382611a49565b611aad8185611a54565b9350611abd818560208601611a65565b611ac68161188a565b840191505092915050565b60006020820190508181036000830152611aeb8184611a98565b905092915050565b600080fd5b600067ffffffffffffffff821115611b1357611b1261189b565b5b611b1c8261188a565b9050602081019050919050565b82818337600083830152505050565b6000611b4b611b4684611af8565b6118fb565b905082815260208101848484011115611b6757611b66611af3565b5b611b72848285611b29565b509392505050565b600082601f830112611b8f57611b8e611718565b5b8135611b9f848260208601611b38565b91505092915050565b600080600060608486031215611bc157611bc061167a565b5b600084013567ffffffffffffffff811115611bdf57611bde61167f565b5b611beb86828701611b7a565b9350506020611bfc86828701611703565b9250506040611c0d868287016116cd565b9150509250925092565b600060208284031215611c2d57611c2c61167a565b5b600082013567ffffffffffffffff811115611c4b57611c4a61167f565b5b611c5784828501611b7a565b91505092915050565b611c69816116e2565b82525050565b6000604082019050611c84600083018561185b565b611c916020830184611c60565b9392505050565b611ca1816116e2565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058110611ce757611ce6611ca7565b5b50565b6000819050611cf882611cd6565b919050565b6000611d0882611cea565b9050919050565b611d1881611cfd565b82525050565b611d27816116a4565b82525050565b61012082016000820151611d446000850182611c98565b506020820151611d576020850182611c98565b506040820151611d6a6040850182611c98565b506060820151611d7d6060850182611d0f565b506080820151611d906080850182611c98565b5060a0820151611da360a0850182611c98565b5060c0820151611db660c0850182611c98565b5060e0820151611dc960e0850182611c98565b50610100820151611dde610100850182611d1e565b50505050565b600061012082019050611dfa6000830184611d2d565b92915050565b600060208284031215611e1657611e1561167a565b5b6000611e24848285016116cd565b91505092915050565b6000611e38826116a4565b9050919050565b611e4881611e2d565b8114611e5357600080fd5b50565b600081519050611e6581611e3f565b92915050565b600060208284031215611e8157611e8061167a565b5b6000611e8f84828501611e56565b91505092915050565b600060ff82169050919050565b611eae81611e98565b8114611eb957600080fd5b50565b600081519050611ecb81611ea5565b92915050565b600060208284031215611ee757611ee661167a565b5b6000611ef584828501611ebc565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115611f8457808604811115611f6057611f5f611efe565b5b6001851615611f6f5780820291505b8081029050611f7d85611f2d565b9450611f44565b94509492505050565b600082611f9d5760019050612059565b81611fab5760009050612059565b8160018114611fc15760028114611fcb57611ffa565b6001915050612059565b60ff841115611fdd57611fdc611efe565b5b8360020a915084821115611ff457611ff3611efe565b5b50612059565b5060208310610133831016604e8410600b841016171561202f5782820a90508381111561202a57612029611efe565b5b612059565b61203c8484846001611f3a565b9250905081840481111561205357612052611efe565b5b81810290505b9392505050565b600061206b826116e2565b915061207683611e98565b92506120a37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611f8d565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006120e5826116e2565b91506120f0836116e2565b925082612100576120ff6120ab565b5b828204905092915050565b60008151905061211a816116ec565b92915050565b60008151905061212f81611916565b92915050565b600081519050612144816116b6565b92915050565b6000610120828403121561216157612160611885565b5b61216c6101206118fb565b9050600061217c8482850161210b565b60008301525060206121908482850161210b565b60208301525060406121a48482850161210b565b60408301525060606121b884828501612120565b60608301525060806121cc8482850161210b565b60808301525060a06121e08482850161210b565b60a08301525060c06121f48482850161210b565b60c08301525060e06122088482850161210b565b60e08301525061010061221d84828501612135565b6101008301525092915050565b600061012082840312156122415761224061167a565b5b600061224f8482850161214a565b91505092915050565b60008115159050919050565b61226d81612258565b811461227857600080fd5b50565b60008151905061228a81612264565b92915050565b6000602082840312156122a6576122a561167a565b5b60006122b48482850161227b565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061232a6026836122bd565b9150612335826122ce565b604082019050919050565b600060208201905081810360008301526123598161231d565b9050919050565b6000602082840312156123765761237561167a565b5b60006123848482850161210b565b91505092915050565b6000606082840312156123a3576123a2611885565b5b6123ad60606118fb565b905060006123bd8482850161210b565b60008301525060206123d18482850161210b565b60208301525060406123e58482850161210b565b60408301525092915050565b6000606082840312156124075761240661167a565b5b60006124158482850161238d565b91505092915050565b6000606082019050612433600083018661185b565b612440602083018561185b565b61244d6040830184611c60565b949350505050565b61245e81611cfd565b82525050565b60006101408201905061247a600083018d611c60565b612487602083018c611c60565b612494604083018b611c60565b6124a1606083018a612455565b6124ae6080830189611c60565b6124bb60a0830188611c60565b6124c860c0830187611c60565b6124d560e0830186611c60565b6124e361010083018561185b565b6124f1610120830184611c60565b9b9a5050505050505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006125366020836122bd565b915061254182612500565b602082019050919050565b6000602082019050818103600083015261256581612529565b905091905056fea264697066735822122083279f9980b6b4c0d55fd3d229ab74b25116c4e97a735fcadf700360bb7a6a1e64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637531a64e1161008c578063a18a7bfc11610066578063a18a7bfc14610215578063ad4bb90814610231578063bb4a9f881461023b578063f2fde38b14610259576100cf565b80637531a64e1461019657806389f94c29146101c75780638da5cb5b146101f7576100cf565b8063150b7a02146100d45780632bab754b146101045780632f63d892146101225780633819137a1461015257806368447c931461016e578063715018a61461018c575b600080fd5b6100ee60048036038101906100e9919061177d565b610275565b6040516100fb9190611840565b60405180910390f35b61010c6102a3565b604051610119919061186a565b60405180910390f35b61013c60048036038101906101379190611a1b565b6102c9565b6040516101499190611ad1565b60405180910390f35b61016c60048036038101906101679190611ba8565b6102f2565b005b610176610302565b604051610183919061186a565b60405180910390f35b610194610328565b005b6101b060048036038101906101ab9190611c17565b61033c565b6040516101be929190611c6f565b60405180910390f35b6101e160048036038101906101dc9190611c17565b610a24565b6040516101ee9190611de4565b60405180910390f35b6101ff610a47565b60405161020c919061186a565b60405180910390f35b61022f600480360381019061022a9190611e00565b610a70565b005b610239610abc565b005b610243610d9c565b604051610250919061186a565b60405180910390f35b610273600480360381019061026e9190611e00565b610dc2565b005b60007f150b7a023d4804d13e8c85fb27262cb750cf6ba9f9dd3bb30d90f482ceeb4b1f905095945050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060816040516020016102dc9190611de4565b6040516020818303038152906040529050919050565b6102fd838383610e46565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6103306114b2565b61033a6000611530565b565b600080600061034a84610a24565b9050600060048111156103605761035f611ca7565b5b8160600151600481111561037757610376611ca7565b5b14806103ab57506001600481111561039257610391611ca7565b5b816060015160048111156103a9576103a8611ca7565b5b145b156105a457600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561041857600080fd5b505afa15801561042c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104509190611e6b565b73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561049557600080fd5b505afa1580156104a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cd9190611ed1565b600a6104d99190612060565b670de0b6b3a76400006104ec91906120da565b8160e001516104fb91906120da565b9150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561056557600080fd5b505afa158015610579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059d9190611e6b565b9250610a1e565b600360048111156105b8576105b7611ca7565b5b816060015160048111156105cf576105ce611ca7565b5b148061060257506004808111156105e9576105e8611ca7565b5b81606001516004811115610600576105ff611ca7565b5b145b156107fb57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561066f57600080fd5b505afa158015610683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a79190611e6b565b73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156106ec57600080fd5b505afa158015610700573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107249190611ed1565b600a6107309190612060565b670de0b6b3a764000061074391906120da565b8160a0015161075291906120da565b9150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b1580156107bc57600080fd5b505afa1580156107d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f49190611e6b565b9250610a1d565b6002600481111561080f5761080e611ca7565b5b8160600151600481111561082657610825611ca7565b5b1415610a1c57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdf456e16040518163ffffffff1660e01b815260040160206040518083038186803b15801561089457600080fd5b505afa1580156108a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cc9190611e6b565b73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561091157600080fd5b505afa158015610925573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109499190611ed1565b600a6109559190612060565b670de0b6b3a764000061096891906120da565b8160a0015161097791906120da565b9150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdf456e16040518163ffffffff1660e01b815260040160206040518083038186803b1580156109e157600080fd5b505afa1580156109f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a199190611e6b565b92505b5b5b50915091565b610a2c6115fc565b81806020019051810190610a40919061222a565b9050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610a786114b2565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2457600080fd5b505afa158015610b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5c9190611e6b565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610bd8929190611c6f565b602060405180830381600087803b158015610bf257600080fd5b505af1158015610c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2a9190612290565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdf456e16040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9357600080fd5b505afa158015610ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccb9190611e6b565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610d47929190611c6f565b602060405180830381600087803b158015610d6157600080fd5b505af1158015610d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d999190612290565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610dca6114b2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3190612340565b60405180910390fd5b610e4381611530565b50565b6000610e5184610a24565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000610eb98561033c565b5090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166361b8ce8c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2657600080fd5b505afa158015610f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5e9190612360565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d6c0bb44846040518263ffffffff1660e01b8152600401610fbb9190611de4565b606060405180830381600087803b158015610fd557600080fd5b505af1158015610fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100d91906123f1565b508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611064919061186a565b60206040518083038186803b15801561107c57600080fd5b505afa158015611090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b49190612360565b6040518363ffffffff1660e01b81526004016110d1929190611c6f565b602060405180830381600087803b1580156110eb57600080fd5b505af11580156110ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111239190612290565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3086846040518463ffffffff1660e01b81526004016111839392919061241e565b600060405180830381600087803b15801561119d57600080fd5b505af11580156111b1573d6000803e3d6000fd5b50505050600260048111156111c9576111c8611ca7565b5b836060015160048111156111e0576111df611ca7565b5b141561143b57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561124e57600080fd5b505afa158015611262573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112869190611e6b565b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561130a57600080fd5b505afa15801561131e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113429190611e6b565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161137a919061186a565b60206040518083038186803b15801561139257600080fd5b505afa1580156113a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ca9190612360565b6040518363ffffffff1660e01b81526004016113e7929190611c6f565b602060405180830381600087803b15801561140157600080fd5b505af1158015611415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114399190612290565b505b847f8650344f378c8df5446864351ca3e88677936be22fcf7b4d2254da11ce46875a846000015185602001518660400151876060015188608001518960a001518a60c001518b60e001518c61010001518b6040516114a29a99989796959493929190612464565b60405180910390a2505050505050565b6114ba6115f4565b73ffffffffffffffffffffffffffffffffffffffff166114d8610a47565b73ffffffffffffffffffffffffffffffffffffffff161461152e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115259061254c565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6040518061012001604052806000815260200160008152602001600081526020016000600481111561163157611630611ca7565b5b815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116af82611684565b9050919050565b6116bf816116a4565b81146116ca57600080fd5b50565b6000813590506116dc816116b6565b92915050565b6000819050919050565b6116f5816116e2565b811461170057600080fd5b50565b600081359050611712816116ec565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261173d5761173c611718565b5b8235905067ffffffffffffffff81111561175a5761175961171d565b5b60208301915083600182028301111561177657611775611722565b5b9250929050565b6000806000806000608086880312156117995761179861167a565b5b60006117a7888289016116cd565b95505060206117b8888289016116cd565b94505060406117c988828901611703565b935050606086013567ffffffffffffffff8111156117ea576117e961167f565b5b6117f688828901611727565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61183a81611805565b82525050565b60006020820190506118556000830184611831565b92915050565b611864816116a4565b82525050565b600060208201905061187f600083018461185b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6118d38261188a565b810181811067ffffffffffffffff821117156118f2576118f161189b565b5b80604052505050565b6000611905611670565b905061191182826118ca565b919050565b6005811061192357600080fd5b50565b60008135905061193581611916565b92915050565b6000610120828403121561195257611951611885565b5b61195d6101206118fb565b9050600061196d84828501611703565b600083015250602061198184828501611703565b602083015250604061199584828501611703565b60408301525060606119a984828501611926565b60608301525060806119bd84828501611703565b60808301525060a06119d184828501611703565b60a08301525060c06119e584828501611703565b60c08301525060e06119f984828501611703565b60e083015250610100611a0e848285016116cd565b6101008301525092915050565b60006101208284031215611a3257611a3161167a565b5b6000611a408482850161193b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a83578082015181840152602081019050611a68565b83811115611a92576000848401525b50505050565b6000611aa382611a49565b611aad8185611a54565b9350611abd818560208601611a65565b611ac68161188a565b840191505092915050565b60006020820190508181036000830152611aeb8184611a98565b905092915050565b600080fd5b600067ffffffffffffffff821115611b1357611b1261189b565b5b611b1c8261188a565b9050602081019050919050565b82818337600083830152505050565b6000611b4b611b4684611af8565b6118fb565b905082815260208101848484011115611b6757611b66611af3565b5b611b72848285611b29565b509392505050565b600082601f830112611b8f57611b8e611718565b5b8135611b9f848260208601611b38565b91505092915050565b600080600060608486031215611bc157611bc061167a565b5b600084013567ffffffffffffffff811115611bdf57611bde61167f565b5b611beb86828701611b7a565b9350506020611bfc86828701611703565b9250506040611c0d868287016116cd565b9150509250925092565b600060208284031215611c2d57611c2c61167a565b5b600082013567ffffffffffffffff811115611c4b57611c4a61167f565b5b611c5784828501611b7a565b91505092915050565b611c69816116e2565b82525050565b6000604082019050611c84600083018561185b565b611c916020830184611c60565b9392505050565b611ca1816116e2565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058110611ce757611ce6611ca7565b5b50565b6000819050611cf882611cd6565b919050565b6000611d0882611cea565b9050919050565b611d1881611cfd565b82525050565b611d27816116a4565b82525050565b61012082016000820151611d446000850182611c98565b506020820151611d576020850182611c98565b506040820151611d6a6040850182611c98565b506060820151611d7d6060850182611d0f565b506080820151611d906080850182611c98565b5060a0820151611da360a0850182611c98565b5060c0820151611db660c0850182611c98565b5060e0820151611dc960e0850182611c98565b50610100820151611dde610100850182611d1e565b50505050565b600061012082019050611dfa6000830184611d2d565b92915050565b600060208284031215611e1657611e1561167a565b5b6000611e24848285016116cd565b91505092915050565b6000611e38826116a4565b9050919050565b611e4881611e2d565b8114611e5357600080fd5b50565b600081519050611e6581611e3f565b92915050565b600060208284031215611e8157611e8061167a565b5b6000611e8f84828501611e56565b91505092915050565b600060ff82169050919050565b611eae81611e98565b8114611eb957600080fd5b50565b600081519050611ecb81611ea5565b92915050565b600060208284031215611ee757611ee661167a565b5b6000611ef584828501611ebc565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115611f8457808604811115611f6057611f5f611efe565b5b6001851615611f6f5780820291505b8081029050611f7d85611f2d565b9450611f44565b94509492505050565b600082611f9d5760019050612059565b81611fab5760009050612059565b8160018114611fc15760028114611fcb57611ffa565b6001915050612059565b60ff841115611fdd57611fdc611efe565b5b8360020a915084821115611ff457611ff3611efe565b5b50612059565b5060208310610133831016604e8410600b841016171561202f5782820a90508381111561202a57612029611efe565b5b612059565b61203c8484846001611f3a565b9250905081840481111561205357612052611efe565b5b81810290505b9392505050565b600061206b826116e2565b915061207683611e98565b92506120a37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611f8d565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006120e5826116e2565b91506120f0836116e2565b925082612100576120ff6120ab565b5b828204905092915050565b60008151905061211a816116ec565b92915050565b60008151905061212f81611916565b92915050565b600081519050612144816116b6565b92915050565b6000610120828403121561216157612160611885565b5b61216c6101206118fb565b9050600061217c8482850161210b565b60008301525060206121908482850161210b565b60208301525060406121a48482850161210b565b60408301525060606121b884828501612120565b60608301525060806121cc8482850161210b565b60808301525060a06121e08482850161210b565b60a08301525060c06121f48482850161210b565b60c08301525060e06122088482850161210b565b60e08301525061010061221d84828501612135565b6101008301525092915050565b600061012082840312156122415761224061167a565b5b600061224f8482850161214a565b91505092915050565b60008115159050919050565b61226d81612258565b811461227857600080fd5b50565b60008151905061228a81612264565b92915050565b6000602082840312156122a6576122a561167a565b5b60006122b48482850161227b565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061232a6026836122bd565b9150612335826122ce565b604082019050919050565b600060208201905081810360008301526123598161231d565b9050919050565b6000602082840312156123765761237561167a565b5b60006123848482850161210b565b91505092915050565b6000606082840312156123a3576123a2611885565b5b6123ad60606118fb565b905060006123bd8482850161210b565b60008301525060206123d18482850161210b565b60208301525060406123e58482850161210b565b60408301525092915050565b6000606082840312156124075761240661167a565b5b60006124158482850161238d565b91505092915050565b6000606082019050612433600083018661185b565b612440602083018561185b565b61244d6040830184611c60565b949350505050565b61245e81611cfd565b82525050565b60006101408201905061247a600083018d611c60565b612487602083018c611c60565b612494604083018b611c60565b6124a1606083018a612455565b6124ae6080830189611c60565b6124bb60a0830188611c60565b6124c860c0830187611c60565b6124d560e0830186611c60565b6124e361010083018561185b565b6124f1610120830184611c60565b9b9a5050505050505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006125366020836122bd565b915061254182612500565b602082019050919050565b6000602082019050818103600083015261256581612529565b905091905056fea264697066735822122083279f9980b6b4c0d55fd3d229ab74b25116c4e97a735fcadf700360bb7a6a1e64736f6c63430008090033",
  "devdoc": {
    "author": "0nika0",
    "kind": "dev",
    "methods": {
      "allApprove()": {
        "details": "See {ITxBuilderOpenLyra-allApprove}."
      },
      "calculateAmount(bytes)": {
        "details": "This public view function calculates the amount of a token based on a set of input parameters. It decodes the parameters, retrieves the necessary information from a Lyra strategy, and calculates the amount based on the option type and related factors.",
        "params": {
          "parameters": "The encoded parameters for the calculation."
        },
        "returns": {
          "amount": "The calculated amount of the token.",
          "token": "The address of the token to be calculated."
        }
      },
      "decodeFromLyra(bytes)": {
        "details": "See {ITxBuilderOpenLyra-decodeFromLyra}."
      },
      "encodeFromLyra((uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,address))": {
        "details": "See {ITxBuilderOpenLyra-encodeFromLyra}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "processTx(bytes,uint256,address)": {
        "details": "See {IBaseTxBuilderOpen-processTx}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setReferrer(address)": {
        "details": "See {ITxBuilderOpenLyra-setReferrer}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "TxBuilderOpenLyra",
    "version": 1
  },
  "userdoc": {
    "events": {
      "OpenPositionByLyra(uint256,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,address,uint256)": {
        "notice": "Emitted when a position is opened using the Lyra protocol."
      }
    },
    "kind": "user",
    "methods": {
      "calculateAmount(bytes)": {
        "notice": "Calculate the amount of a token based on provided parameters."
      }
    },
    "notice": "A contract for building and processing Lyra option transactions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/lyra/TxBuilderOpenLyra.sol:TxBuilderOpenLyra",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4448,
        "contract": "contracts/lyra/TxBuilderOpenLyra.sol:TxBuilderOpenLyra",
        "label": "optionMarket",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4450,
        "contract": "contracts/lyra/TxBuilderOpenLyra.sol:TxBuilderOpenLyra",
        "label": "optionToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4452,
        "contract": "contracts/lyra/TxBuilderOpenLyra.sol:TxBuilderOpenLyra",
        "label": "referrer",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}