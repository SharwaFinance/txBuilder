{
  "address": "0x97490835213d1d8c95Fb130a8bE44ac4cF33B43D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "_wbtc",
          "type": "address"
        },
        {
          "internalType": "contract IBeyondPricer",
          "name": "_pricer",
          "type": "address"
        },
        {
          "internalType": "contract IOptionExchange",
          "name": "_optionExchange",
          "type": "address"
        },
        {
          "internalType": "contract IAlphaPortfolioValuesFeed",
          "name": "_portfolioValuesFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum ICombinedActions.OperationType",
              "name": "operation",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "actionType",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "secondAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "vaultId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint64",
                      "name": "expiration",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint128",
                      "name": "strike",
                      "type": "uint128"
                    },
                    {
                      "internalType": "bool",
                      "name": "isPut",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "underlying",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "strikeAsset",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "collateral",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct ITypes.OptionSeries",
                  "name": "optionSeries",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "indexOrAcceptablePremium",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ICombinedActions.ActionArgs[]",
              "name": "operationQueue",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct ICombinedActions.OperationProcedures[]",
          "name": "operationProcedures",
          "type": "tuple[]"
        }
      ],
      "name": "OpenPositionByRyskFinance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "calculateAmount",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "name": "decodeFromRyskFinance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ICombinedActions.OperationType",
              "name": "operation",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "actionType",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "secondAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "vaultId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint64",
                      "name": "expiration",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint128",
                      "name": "strike",
                      "type": "uint128"
                    },
                    {
                      "internalType": "bool",
                      "name": "isPut",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "underlying",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "strikeAsset",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "collateral",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct ITypes.OptionSeries",
                  "name": "optionSeries",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "indexOrAcceptablePremium",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ICombinedActions.ActionArgs[]",
              "name": "operationQueue",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ICombinedActions.OperationProcedures[]",
          "name": "operationProcedures",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ICombinedActions.OperationType",
              "name": "operation",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "actionType",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "secondAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "vaultId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint64",
                      "name": "expiration",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint128",
                      "name": "strike",
                      "type": "uint128"
                    },
                    {
                      "internalType": "bool",
                      "name": "isPut",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "underlying",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "strikeAsset",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "collateral",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct ITypes.OptionSeries",
                  "name": "optionSeries",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "indexOrAcceptablePremium",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ICombinedActions.ActionArgs[]",
              "name": "operationQueue",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ICombinedActions.OperationProcedures[]",
          "name": "operationProcedures",
          "type": "tuple[]"
        }
      ],
      "name": "encodeFromRyskFinance",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionExchange",
      "outputs": [
        {
          "internalType": "contract IOptionExchange",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioValuesFeed",
      "outputs": [
        {
          "internalType": "contract IAlphaPortfolioValuesFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricer",
      "outputs": [
        {
          "internalType": "contract IBeyondPricer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "parametersArray",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "processTx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wbtc",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5ba3aa2f77e420782081b6df3d8b9011ff6e621b4662caedd69cbda8eef0a54b",
  "receipt": {
    "to": null,
    "from": "0x8B57f3a9bDf2cfdBF9B2627ff8bEa86fB5641a50",
    "contractAddress": "0x97490835213d1d8c95Fb130a8bE44ac4cF33B43D",
    "transactionIndex": 3,
    "gasUsed": "17054990",
    "logsBloom": "0x
    "blockHash": "0xeb1bc61d93c68fd28e422984beb210a11aced5e2e346d27adc306c7011e0136f",
    "transactionHash": "0x5ba3aa2f77e420782081b6df3d8b9011ff6e621b4662caedd69cbda8eef0a54b",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 156427209,
        "transactionHash": "0x5ba3aa2f77e420782081b6df3d8b9011ff6e621b4662caedd69cbda8eef0a54b",
        "address": "0x97490835213d1d8c95Fb130a8bE44ac4cF33B43D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b57f3a9bdf2cfdbf9b2627ff8bea86fb5641a50"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xeb1bc61d93c68fd28e422984beb210a11aced5e2e346d27adc306c7011e0136f"
      }
    ],
    "blockNumber": 156427209,
    "cumulativeGasUsed": "18773398",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaf88d065e77c8cC2239327C5EDb3A432268e5831",
    "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
    "0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f",
    "0xeA5Fb118862876f249Ff0b3e7fb25fEb38158def",
    "0xC117bf3103bd09552F9a721F0B8Bce9843aaE1fa",
    "0xc7abaec336098cd0dcd98b67cb14d3b18e1c68a8"
  ],
  "numDeployments": 1,
  "solcInputHash": "f5c0ef8415e924685f353bddfcdd3666",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_wbtc\",\"type\":\"address\"},{\"internalType\":\"contract IBeyondPricer\",\"name\":\"_pricer\",\"type\":\"address\"},{\"internalType\":\"contract IOptionExchange\",\"name\":\"_optionExchange\",\"type\":\"address\"},{\"internalType\":\"contract IAlphaPortfolioValuesFeed\",\"name\":\"_portfolioValuesFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ICombinedActions.OperationType\",\"name\":\"operation\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"strike\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"internalType\":\"struct ITypes.OptionSeries\",\"name\":\"optionSeries\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"indexOrAcceptablePremium\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICombinedActions.ActionArgs[]\",\"name\":\"operationQueue\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct ICombinedActions.OperationProcedures[]\",\"name\":\"operationProcedures\",\"type\":\"tuple[]\"}],\"name\":\"OpenPositionByRyskFinance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"calculateAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"name\":\"decodeFromRyskFinance\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ICombinedActions.OperationType\",\"name\":\"operation\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"strike\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"internalType\":\"struct ITypes.OptionSeries\",\"name\":\"optionSeries\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"indexOrAcceptablePremium\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICombinedActions.ActionArgs[]\",\"name\":\"operationQueue\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ICombinedActions.OperationProcedures[]\",\"name\":\"operationProcedures\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ICombinedActions.OperationType\",\"name\":\"operation\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"strike\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"internalType\":\"struct ITypes.OptionSeries\",\"name\":\"optionSeries\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"indexOrAcceptablePremium\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICombinedActions.ActionArgs[]\",\"name\":\"operationQueue\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ICombinedActions.OperationProcedures[]\",\"name\":\"operationProcedures\",\"type\":\"tuple[]\"}],\"name\":\"encodeFromRyskFinance\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionExchange\",\"outputs\":[{\"internalType\":\"contract IOptionExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioValuesFeed\",\"outputs\":[{\"internalType\":\"contract IAlphaPortfolioValuesFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricer\",\"outputs\":[{\"internalType\":\"contract IBeyondPricer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"parametersArray\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"processTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allApprove()\":{\"details\":\"See {ITxBuilderOpenRyskFinance-allApprove}.\"},\"calculateAmount(bytes)\":{\"details\":\"This public view function `calculateAmount` takes encoded parameters from Rysk Finance and decodes them to determine the token and amount involved in the specified Rysk operations. The decoded parameters represent a series of actions (operation procedures) related to Rysk Finance.\",\"params\":{\"parameters\":\"Encoded parameters containing Rysk Finance operation details.\"},\"returns\":{\"amount\":\"The total amount associated with the specified Rysk operations.\",\"token\":\"The address of the token involved in the Rysk operations.\"}},\"decodeFromRyskFinance(bytes)\":{\"details\":\"See {ITxBuilderOpenRyskFinance-decodeFromRyskFinance}.\"},\"encodeFromRyskFinance((uint8,(uint256,address,address,address,uint256,uint256,(uint64,uint128,bool,address,address,address),uint256,bytes)[])[])\":{\"details\":\"See {ITxBuilderOpenRyskFinance-encodeFromRyskFinance}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"processTx(bytes,uint256,address)\":{\"details\":\"See {IBaseTxBuilderOpen-processTx}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"OpenPositionByRyskFinance(uint256,address,(uint8,(uint256,address,address,address,uint256,uint256,(uint64,uint128,bool,address,address,address),uint256,bytes)[])[])\":{\"notice\":\"Emitted to signal the successful opening of a position by Rysk Finance.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/risk_finance/TxBuilderOpenRyskFinance.sol\":\"TxBuilderOpenRyskFinance\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BaseTxBuilderOpen.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IBaseTxBuilderOpen} from \\\"./IBaseTxBuilderOpen.sol\\\";\\n\\n/**\\n * @title BaseTxBuilderOpen\\n * @author 0nika0\\n * @notice An abstract base contract for building and processing option transactions.\\n * @dev This contract provides the foundational structure for creating and processing option transactions. \\n * It includes functions to handle transaction processing and token amount calculation.\\n */\\nabstract contract BaseTxBuilderOpen is Ownable, IBaseTxBuilderOpen {\\n\\n    // PUBLIC FUNCTONS //\\n\\n    /**\\n     * @dev See {IBaseTxBuilderOpen-calculateAmount}.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) public view virtual returns (\\n        address token,\\n        uint256 amount\\n    ) {}\\n\\n    // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @dev See {IBaseTxBuilderOpen-processTx}.\\n     */\\n    function processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) external {\\n        _processTx(parametersArray, buildID, user);\\n    }\\n\\n    function onERC721Received(\\n        address, \\n        address, \\n        uint256, \\n        bytes calldata\\n    ) external returns(bytes4) {\\n        return bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"));\\n    } \\n\\n    // INTERNAL FUNCTIONS //\\n\\n    /**\\n     * @notice Internal function to process a transaction for opening an option position.\\n     * @dev This internal function processes a transaction for opening an option position based on the provided parameters.\\n     * @param parametersArray The encoded parameters for opening the option position.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param user The address of the user who is opening the option position.\\n     */\\n    function _processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd63444fe003c4e60eb5224e3b3f4913e27778ac54bd275286bb7fca05f53d583\",\"license\":\"GPL-3.0-or-later\"},\"contracts/IBaseTxBuilderOpen.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\n\\ninterface IBaseTxBuilderOpen {\\n    // PUBLIC FUNCTONS //\\n\\n    /**\\n     * @notice Calculate the amount of a token based on provided parameters.\\n     * @dev This function calculates the amount of a token based on a set of input parameters.\\n     * @param parameters The encoded parameters for the calculation.\\n     * @return token The address of the token to be calculated.\\n     * @return amount The calculated amount of the token.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) external view returns (\\n        address token,\\n        uint256 amount\\n    ); \\n\\n     // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @notice Process a transaction for opening an option position.\\n     * @dev This function processes a transaction for opening an option position based on the provided parameters.\\n     * @param parametersArray The encoded parameters for opening the option position.\\n     * @param buildID The unique identifier for the option position build.\\n     * @param user The address of the user who is opening the option position.\\n     */\\n    function processTx(\\n        bytes memory parametersArray,\\n        uint256 buildID,\\n        address user\\n    ) external;\\n\\n\\n\\n}\\n\",\"keccak256\":\"0xe97c16dcf0d4746277867ab4ead00665161b2535fde4a2cbb31a51e691780302\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/IAlphaPortfolioValuesFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\ninterface IAlphaPortfolioValuesFeed {\\n\\tfunction netDhvExposure(bytes32) external view returns(int256);\\n}\\n\",\"keccak256\":\"0x3aa69f31a2f2f5326083ccd52d6d4d7419720023d84aa4bc77a38035e52a2cc0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/IBeyondPricer.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {ITypes} from \\\"./ITypes.sol\\\";\\n\\ninterface IBeyondPricer {\\n\\tfunction quoteOptionPrice(\\n\\t\\tITypes.OptionSeries memory _optionSeries,\\n\\t\\tuint256 _amount,\\n\\t\\tbool isSell,\\n\\t\\tint256 netDhvExposure\\n\\t) external view returns (uint256 totalPremium, int256 totalDelta, uint256 totalFees);\\n}\\n\",\"keccak256\":\"0x7674fade1a4ef9fa55e651aa880e57ae6dc48db64199752245ab687b397bdd45\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/ICombinedActions.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {ITypes} from \\\"./ITypes.sol\\\";\\n\\ninterface ICombinedActions {\\n\\tenum OperationType {\\n\\t\\tOPYN,\\n\\t\\tRYSK\\n\\t}\\n\\n\\tstruct OperationProcedures {\\n\\t\\tOperationType operation;\\n\\t\\tActionArgs[] operationQueue;\\n\\t}\\n\\n    struct ActionArgs {\\n        // type of action that is being performed on the system\\n        uint256 actionType;\\n        // address of the account owner\\n        address owner;\\n        // address which we move assets from or to (depending on the action type)\\n        address secondAddress;\\n        // asset that is to be transfered\\n        address asset;\\n        // index of the vault that is to be modified (if any)\\n        uint256 vaultId;\\n        // amount of asset that is to be transfered\\n        uint256 amount;\\n        // option series (if any)\\n        ITypes.OptionSeries optionSeries;\\n        // each vault can hold multiple short / long / collateral assets but we are restricting the scope to only 1 of each in this version\\n        // OR for rysk actions it is the acceptable premium (if option is being sold to the dhv then the actual premium should be more than this number (i.e. max price),\\n        // if option is being bought from the dhv then the actual premium should be less than this number (i.e. max price))\\n        uint256 indexOrAcceptablePremium;\\n        // any other data that needs to be passed in for arbitrary function calls\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0x91bb5ca59e1d7956c973fdf7e1052bc9cc521bd4a4f05647331426806e6bc89f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/IOptionExchange.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {ICombinedActions} from \\\"./ICombinedActions.sol\\\";\\nimport {ITypes} from \\\"./ITypes.sol\\\";\\n\\ninterface IOptionExchange {\\n\\t/**\\n\\t * @notice entry point to the contract for users, takes a queue of actions for both opyn and rysk and executes them sequentially\\n\\t * @param  _operationProcedures an array of actions to be executed sequentially\\n\\t */\\n\\tfunction operate(\\n\\t\\tICombinedActions.OperationProcedures[] memory _operationProcedures\\n\\t) external;\\n\\n\\tfunction checkHash(\\n\\t\\tITypes.OptionSeries memory optionSeries,\\n\\t\\tuint128 strikeDecimalConverted,\\n\\t\\tbool isSell\\n\\t) external view returns (bytes32 oHash);\\n\\n\\tfunction getOptionDetails(\\n\\t\\taddress seriesAddress,\\n\\t\\tITypes.OptionSeries memory optionSeries\\n\\t) external view returns (address, ITypes.OptionSeries memory, uint128);\\n}\\n\",\"keccak256\":\"0xa122c6f9f5c4c611e46b67761d99d069fb08b7e9adee41190c3cf4c26fb1cb4f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/ITxBuilderOpenRyskFinance.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {ICombinedActions} from \\\"./ICombinedActions.sol\\\";\\n\\ninterface ITxBuilderOpenRyskFinance {\\n\\n    // EXTERNAL FUNCTIONS //  \\n\\n    /**\\n     * @dev This external function `allApprove` is designed to approve a maximum amount of tokens\\n     * required for trading on a specific exchange. In this case, the function approves the maximum amount\\n     * of USDC, WETH, and WBTC tokens for use in transactions on the options exchange specified in the `optionExchange` variable.\\n     * \\n     * Note: Approving tokens allows the contract to perform operations with these tokens on behalf of the contract owner,\\n     * in this context, on behalf of the contract containing this function.\\n     */\\n    function allApprove() external;\\n\\n    // PURE FUNCTIONS //\\n\\n    /**\\n     * @dev This external function `encodeFromRyskFinance` takes an array of Rysk Finance operation procedures\\n     * and encodes them into a byte array. This encoded data can be used to pass Rysk Finance operation details\\n     * between contracts or external systems.\\n     *\\n     * @param operationProcedures An array of Rysk Finance operation procedures to be encoded.\\n     * @return paramData The encoded byte array representing the Rysk Finance operation procedures.\\n     */\\n    function encodeFromRyskFinance(\\n        ICombinedActions.OperationProcedures[] memory operationProcedures\\n    ) external pure returns (bytes memory paramData);\\n\\n    /**\\n     * @dev This public function `decodeFromRyskFinance` takes an encoded byte array containing Rysk Finance operation details\\n     * and decodes it into an array of operation procedures. This allows contracts to interpret and use Rysk Finance operations\\n     * encoded in external systems or passed as data.\\n     *\\n     * @param paramData The encoded byte array containing Rysk Finance operation details.\\n     * @return operationProcedures An array of decoded Rysk Finance operation procedures.\\n     */\\n    function decodeFromRyskFinance(\\n        bytes memory paramData\\n    ) external pure returns (\\n        ICombinedActions.OperationProcedures[] memory operationProcedures\\n    );\\n\\n    // EVENTS //\\n\\n    /**\\n     * @notice Emitted to signal the successful opening of a position by Rysk Finance.\\n     * @dev This event, `OpenPositionByRyskFinance`, provides information about the specific transaction build\\n     * identified by `buildID`, the involved `token` in the position, and an array of `OperationProcedures`\\n     * representing the steps taken in the process. This event is useful for tracking and monitoring transactions\\n     * related to opening positions initiated by Rysk Finance.\\n     * @param buildID The unique identifier for the transaction build associated with the opened position.\\n     * @param token The address of the token involved in the opened position.\\n     * @param operationProcedures An array of `OperationProcedures` representing the steps taken in the process of opening the position.\\n     */\\n    event OpenPositionByRyskFinance(\\n        uint256 indexed buildID,\\n        address token,\\n        ICombinedActions.OperationProcedures[] operationProcedures\\n    );\\n}\",\"keccak256\":\"0x4692f1ad8488ebf43e91864ae160676b3d52c79c5cb2bcb9caca0298016f4c7c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/ITypes.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\ninterface ITypes {\\n\\tstruct OptionSeries {\\n\\t\\tuint64 expiration;\\n\\t\\tuint128 strike;\\n\\t\\tbool isPut;\\n\\t\\taddress underlying;\\n\\t\\taddress strikeAsset;\\n\\t\\taddress collateral;\\n\\t}\\n}\\n\",\"keccak256\":\"0x144c021d8a227952f379029ebb85134460ab92dc451a9caf6de6bf0892c46047\",\"license\":\"GPL-3.0-or-later\"},\"contracts/risk_finance/TxBuilderOpenRyskFinance.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {BaseTxBuilderOpen, ERC20} from \\\"../BaseTxBuilderOpen.sol\\\";\\nimport {IBeyondPricer} from \\\"./IBeyondPricer.sol\\\";\\nimport {IOptionExchange} from \\\"./IOptionExchange.sol\\\";\\nimport {IAlphaPortfolioValuesFeed} from \\\"./IAlphaPortfolioValuesFeed.sol\\\";\\nimport {ICombinedActions, ITxBuilderOpenRyskFinance} from \\\"./ITxBuilderOpenRyskFinance.sol\\\";\\nimport {ITypes} from \\\"./ITypes.sol\\\";\\n\\ncontract TxBuilderOpenRyskFinance is BaseTxBuilderOpen, ITxBuilderOpenRyskFinance {\\n    ERC20 public usdc;\\n    ERC20 public weth; \\n    ERC20 public wbtc; \\n\\n    IBeyondPricer public pricer;\\n    IOptionExchange public optionExchange; \\n    IAlphaPortfolioValuesFeed public portfolioValuesFeed;\\n\\n    constructor(\\n        ERC20 _usdc,\\n        ERC20 _weth, \\n        ERC20 _wbtc,\\n        IBeyondPricer _pricer,\\n        IOptionExchange _optionExchange,\\n        IAlphaPortfolioValuesFeed _portfolioValuesFeed\\n    ) {\\n        usdc = _usdc;\\n        weth = _weth; \\n        wbtc = _wbtc;\\n        pricer = _pricer;\\n        optionExchange = _optionExchange;\\n        portfolioValuesFeed = _portfolioValuesFeed;\\n    }\\n\\n    // EXTERNAL FUNCTIONS //  \\n\\n    /**\\n     * @dev See {ITxBuilderOpenRyskFinance-allApprove}.\\n     */\\n    function allApprove() external {\\n        usdc.approve(address(optionExchange), type(uint256).max);\\n        weth.approve(address(optionExchange), type(uint256).max);\\n        wbtc.approve(address(optionExchange), type(uint256).max);\\n    }   \\n\\n    // PUBLIC FUNCTIONS //  \\n\\n    /**\\n     * @dev This public view function `calculateAmount` takes encoded parameters from Rysk Finance and decodes them\\n     * to determine the token and amount involved in the specified Rysk operations. The decoded parameters represent\\n     * a series of actions (operation procedures) related to Rysk Finance.\\n     *\\n     * @param parameters Encoded parameters containing Rysk Finance operation details.\\n     * @return token The address of the token involved in the Rysk operations.\\n     * @return amount The total amount associated with the specified Rysk operations.\\n     */\\n    function calculateAmount(\\n        bytes memory parameters\\n    ) public view override returns (\\n        address token,\\n        uint256 amount\\n    ) {\\n        (\\n            ICombinedActions.OperationProcedures[] memory operationProcedures\\n        ) = decodeFromRyskFinance(parameters);\\n\\n        address verificationAddress;\\n\\n        uint256 lenRyskActionArgs;\\n\\n        for (uint256 i; i < operationProcedures.length; i++) {\\n            if (operationProcedures[i].operation == ICombinedActions.OperationType.RYSK) {\\n                    lenRyskActionArgs++;\\n            }\\n        }\\n        \\n        ICombinedActions.ActionArgs[] memory ryskActionArgs = new ICombinedActions.ActionArgs[](lenRyskActionArgs);\\n\\n        for (uint256 i; i < lenRyskActionArgs; i++) {\\n            if (operationProcedures[i].operation == ICombinedActions.OperationType.RYSK) {\\n                for (uint256 index; index < operationProcedures[i].operationQueue.length; index++) {\\n                    ryskActionArgs[i] = operationProcedures[i].operationQueue[index];\\n                }\\n            }\\n        }\\n\\n        for (uint256 i; i < lenRyskActionArgs; i++) {\\n            if (ryskActionArgs[i].actionType == 1 || ryskActionArgs[i].actionType == 2) {\\n                address collateral = ryskActionArgs[i].optionSeries.collateral;\\n\\n                if (verificationAddress == address(0)) {\\n                    verificationAddress = collateral;\\n                }\\n\\n                require(collateral == verificationAddress, \\\"different collateral tokens\\\");\\n                token = collateral;\\n\\n                amount += ryskActionArgs[i].indexOrAcceptablePremium;\\n            }\\n        }\\n    }    \\n\\n    // INTERNAL FUNCTIONS //    \\n\\n    /**\\n     * @dev This internal function `_processTx` is responsible for processing a transaction based on Rysk Finance parameters.\\n     * It decodes the provided parameters, calculates the involved token and amount, performs operations on the options exchange,\\n     * transfers any remaining USDC, WETH, and WBTC balances back to the user, and emits an event to signal the opening of a position\\n     * by Rysk Finance.\\n     *\\n     * @param parameters Encoded parameters containing Rysk Finance operation details.\\n     * @param buildID Identifier for the build associated with the transaction.\\n     * @param user The address of the user initiating the transaction.\\n     */\\n    function _processTx(\\n        bytes memory parameters, \\n        uint256 buildID,\\n        address user\\n    ) internal override {\\n        (\\n            ICombinedActions.OperationProcedures[] memory operationProcedures\\n        ) = decodeFromRyskFinance(parameters);\\n        \\n        (address token, ) = calculateAmount(parameters);\\n        \\n        optionExchange.operate(operationProcedures);\\n\\n        uint256 balanceUSDC = ERC20(usdc).balanceOf(address(this));\\n        if (balanceUSDC != 0) {\\n            ERC20(usdc).transfer(user, balanceUSDC);\\n        }\\n\\n        uint256 balanceWETH = ERC20(weth).balanceOf(address(this));\\n        if (balanceWETH != 0) {\\n            ERC20(weth).transfer(user, balanceWETH);\\n        }\\n\\n        uint256 balanceWBTC = ERC20(wbtc).balanceOf(address(this));\\n        if (balanceWBTC != 0) {\\n            ERC20(wbtc).transfer(user, balanceWBTC);\\n        }\\n        \\n        emit OpenPositionByRyskFinance(buildID, token, operationProcedures);\\n    }\\n\\n    // PURE FUNCTIONS //\\n\\n    /**\\n     * @dev See {ITxBuilderOpenRyskFinance-encodeFromRyskFinance}.\\n     */\\n    function encodeFromRyskFinance(\\n        ICombinedActions.OperationProcedures[] memory operationProcedures\\n    ) external pure returns (bytes memory paramData) {\\n        return abi.encode(operationProcedures);\\n    }\\n\\n    /**\\n     * @dev See {ITxBuilderOpenRyskFinance-decodeFromRyskFinance}.\\n     */\\n    function decodeFromRyskFinance(\\n        bytes memory paramData\\n    ) public pure returns (\\n        ICombinedActions.OperationProcedures[] memory operationProcedures\\n    ) {\\n        (\\n            operationProcedures\\n        ) = abi.decode(paramData, (\\n            ICombinedActions.OperationProcedures[]\\n        ));\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x6b297e29f38671990c05f69eb718fe0d3380db4f77be56c5772b0927c37ad3ea\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80635fb480c9116100975780638da5cb5b116100665780638da5cb5b14610277578063a6138ed914610295578063ad4bb908146102b3578063f2fde38b146102bd576100f5565b80635fb480c9146101ee578063715018a61461020c5780637294eb40146102165780637531a64e14610246576100f5565b80633cdc5389116100d35780633cdc5389146101765780633e413bee146101945780633fc8cef3146101b2578063532785c7146101d0576100f5565b8063150b7a02146100fa5780631b116e951461012a5780633819137a1461015a575b600080fd5b610114600480360381019061010f91906113d9565b6102d9565b604051610121919061149c565b60405180910390f35b610144600480360381019061013f9190611ab2565b610307565b6040516101519190611b83565b60405180910390f35b610174600480360381019061016f9190611ba5565b610330565b005b61017e610340565b60405161018b9190611c73565b60405180910390f35b61019c610366565b6040516101a99190611c73565b60405180910390f35b6101ba61038c565b6040516101c79190611c73565b60405180910390f35b6101d86103b2565b6040516101e59190611caf565b60405180910390f35b6101f66103d8565b6040516102039190611ceb565b60405180910390f35b6102146103fe565b005b610230600480360381019061022b9190611d06565b610412565b60405161023d919061215d565b60405180910390f35b610260600480360381019061025b9190611d06565b61042f565b60405161026e92919061219d565b60405180910390f35b61027f610789565b60405161028c91906121c6565b60405180910390f35b61029d6107b2565b6040516102aa9190612202565b60405180910390f35b6102bb6107d8565b005b6102d760048036038101906102d2919061221d565b610ab0565b005b60007f150b7a023d4804d13e8c85fb27262cb750cf6ba9f9dd3bb30d90f482ceeb4b1f905095945050505050565b60608160405160200161031a919061215d565b6040516020818303038152906040529050919050565b61033b838383610b34565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610406611058565b61041060006110d6565b565b60608180602001905181019061042891906126ab565b9050919050565b600080600061043d84610412565b905060008060005b83518110156104ba5760018081111561046157610460611d7b565b5b848281518110610474576104736126f4565b5b602002602001015160000151600181111561049257610491611d7b565b5b14156104a75781806104a390612752565b9250505b80806104b290612752565b915050610445565b5060008167ffffffffffffffff8111156104d7576104d66114c8565b5b60405190808252806020026020018201604052801561051057816020015b6104fd6111a2565b8152602001906001900390816104f55790505b50905060005b828110156106115760018081111561053157610530611d7b565b5b858281518110610544576105436126f4565b5b602002602001015160000151600181111561056257610561611d7b565b5b14156105fe5760005b85828151811061057e5761057d6126f4565b5b602002602001015160200151518110156105fc578582815181106105a5576105a46126f4565b5b60200260200101516020015181815181106105c3576105c26126f4565b5b60200260200101518383815181106105de576105dd6126f4565b5b602002602001018190525080806105f490612752565b91505061056b565b505b808061060990612752565b915050610516565b5060005b8281101561077f576001828281518110610632576106316126f4565b5b60200260200101516000015114806106685750600282828151811061065a576106596126f4565b5b602002602001015160000151145b1561076c576000828281518110610682576106816126f4565b5b602002602001015160c0015160a001519050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156106cd578094505b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461073b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610732906127f8565b60405180910390fd5b809750828281518110610751576107506126f4565b5b602002602001015160e00151876107689190612818565b9650505b808061077790612752565b915050610615565b5050505050915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b815260040161087792919061219d565b602060405180830381600087803b15801561089157600080fd5b505af11580156108a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c9919061286e565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b815260040161096992919061219d565b602060405180830381600087803b15801561098357600080fd5b505af1158015610997573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bb919061286e565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610a5b92919061219d565b602060405180830381600087803b158015610a7557600080fd5b505af1158015610a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aad919061286e565b50565b610ab8611058565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1f9061290d565b60405180910390fd5b610b31816110d6565b50565b6000610b3f84610412565b90506000610b4c8561042f565b509050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166314b6c4c6836040518263ffffffff1660e01b8152600401610baa919061215d565b600060405180830381600087803b158015610bc457600080fd5b505af1158015610bd8573d6000803e3d6000fd5b505050506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c3991906121c6565b60206040518083038186803b158015610c5157600080fd5b505afa158015610c65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c89919061292d565b905060008114610d4457600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff1660e01b8152600401610cf092919061219d565b602060405180830381600087803b158015610d0a57600080fd5b505af1158015610d1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d42919061286e565b505b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610da191906121c6565b60206040518083038186803b158015610db957600080fd5b505afa158015610dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df1919061292d565b905060008114610eac57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86836040518363ffffffff1660e01b8152600401610e5892919061219d565b602060405180830381600087803b158015610e7257600080fd5b505af1158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaa919061286e565b505b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f0991906121c6565b60206040518083038186803b158015610f2157600080fd5b505afa158015610f35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f59919061292d565b90506000811461101457600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb87836040518363ffffffff1660e01b8152600401610fc092919061219d565b602060405180830381600087803b158015610fda57600080fd5b505af1158015610fee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611012919061286e565b505b867feb749712d2654f72d79433c37e4c3049c7de50f55000ee9d6b9f951656301b6f858760405161104692919061295a565b60405180910390a25050505050505050565b61106061119a565b73ffffffffffffffffffffffffffffffffffffffff1661107e610789565b73ffffffffffffffffffffffffffffffffffffffff16146110d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cb906129d6565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60405180610120016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001611222611236565b815260200160008152602001606081525090565b6040518060c00160405280600067ffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061130b826112e0565b9050919050565b61131b81611300565b811461132657600080fd5b50565b60008135905061133881611312565b92915050565b6000819050919050565b6113518161133e565b811461135c57600080fd5b50565b60008135905061136e81611348565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261139957611398611374565b5b8235905067ffffffffffffffff8111156113b6576113b5611379565b5b6020830191508360018202830111156113d2576113d161137e565b5b9250929050565b6000806000806000608086880312156113f5576113f46112d6565b5b600061140388828901611329565b955050602061141488828901611329565b94505060406114258882890161135f565b935050606086013567ffffffffffffffff811115611446576114456112db565b5b61145288828901611383565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61149681611461565b82525050565b60006020820190506114b1600083018461148d565b92915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611500826114b7565b810181811067ffffffffffffffff8211171561151f5761151e6114c8565b5b80604052505050565b60006115326112cc565b905061153e82826114f7565b919050565b600067ffffffffffffffff82111561155e5761155d6114c8565b5b602082029050602081019050919050565b600080fd5b600080fd5b6002811061158657600080fd5b50565b60008135905061159881611579565b92915050565b600067ffffffffffffffff8211156115b9576115b86114c8565b5b602082029050602081019050919050565b600067ffffffffffffffff82169050919050565b6115e7816115ca565b81146115f257600080fd5b50565b600081359050611604816115de565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61162f8161160a565b811461163a57600080fd5b50565b60008135905061164c81611626565b92915050565b60008115159050919050565b61166781611652565b811461167257600080fd5b50565b6000813590506116848161165e565b92915050565b600060c082840312156116a05761169f61156f565b5b6116aa60c0611528565b905060006116ba848285016115f5565b60008301525060206116ce8482850161163d565b60208301525060406116e284828501611675565b60408301525060606116f684828501611329565b606083015250608061170a84828501611329565b60808301525060a061171e84828501611329565b60a08301525092915050565b600080fd5b600067ffffffffffffffff82111561174a576117496114c8565b5b611753826114b7565b9050602081019050919050565b82818337600083830152505050565b600061178261177d8461172f565b611528565b90508281526020810184848401111561179e5761179d61172a565b5b6117a9848285611760565b509392505050565b600082601f8301126117c6576117c5611374565b5b81356117d684826020860161176f565b91505092915050565b60006101c082840312156117f6576117f561156f565b5b611801610120611528565b905060006118118482850161135f565b600083015250602061182584828501611329565b602083015250604061183984828501611329565b604083015250606061184d84828501611329565b60608301525060806118618482850161135f565b60808301525060a06118758482850161135f565b60a08301525060c06118898482850161168a565b60c08301525061018061189e8482850161135f565b60e0830152506101a082013567ffffffffffffffff8111156118c3576118c2611574565b5b6118cf848285016117b1565b6101008301525092915050565b60006118ef6118ea8461159e565b611528565b905080838252602082019050602084028301858111156119125761191161137e565b5b835b8181101561195957803567ffffffffffffffff81111561193757611936611374565b5b80860161194489826117df565b85526020850194505050602081019050611914565b5050509392505050565b600082601f83011261197857611977611374565b5b81356119888482602086016118dc565b91505092915050565b6000604082840312156119a7576119a661156f565b5b6119b16040611528565b905060006119c184828501611589565b600083015250602082013567ffffffffffffffff8111156119e5576119e4611574565b5b6119f184828501611963565b60208301525092915050565b6000611a10611a0b84611543565b611528565b90508083825260208201905060208402830185811115611a3357611a3261137e565b5b835b81811015611a7a57803567ffffffffffffffff811115611a5857611a57611374565b5b808601611a658982611991565b85526020850194505050602081019050611a35565b5050509392505050565b600082601f830112611a9957611a98611374565b5b8135611aa98482602086016119fd565b91505092915050565b600060208284031215611ac857611ac76112d6565b5b600082013567ffffffffffffffff811115611ae657611ae56112db565b5b611af284828501611a84565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611b35578082015181840152602081019050611b1a565b83811115611b44576000848401525b50505050565b6000611b5582611afb565b611b5f8185611b06565b9350611b6f818560208601611b17565b611b78816114b7565b840191505092915050565b60006020820190508181036000830152611b9d8184611b4a565b905092915050565b600080600060608486031215611bbe57611bbd6112d6565b5b600084013567ffffffffffffffff811115611bdc57611bdb6112db565b5b611be8868287016117b1565b9350506020611bf98682870161135f565b9250506040611c0a86828701611329565b9150509250925092565b6000819050919050565b6000611c39611c34611c2f846112e0565b611c14565b6112e0565b9050919050565b6000611c4b82611c1e565b9050919050565b6000611c5d82611c40565b9050919050565b611c6d81611c52565b82525050565b6000602082019050611c886000830184611c64565b92915050565b6000611c9982611c40565b9050919050565b611ca981611c8e565b82525050565b6000602082019050611cc46000830184611ca0565b92915050565b6000611cd582611c40565b9050919050565b611ce581611cca565b82525050565b6000602082019050611d006000830184611cdc565b92915050565b600060208284031215611d1c57611d1b6112d6565b5b600082013567ffffffffffffffff811115611d3a57611d396112db565b5b611d46848285016117b1565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611dbb57611dba611d7b565b5b50565b6000819050611dcc82611daa565b919050565b6000611ddc82611dbe565b9050919050565b611dec81611dd1565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611e278161133e565b82525050565b611e3681611300565b82525050565b611e45816115ca565b82525050565b611e548161160a565b82525050565b611e6381611652565b82525050565b60c082016000820151611e7f6000850182611e3c565b506020820151611e926020850182611e4b565b506040820151611ea56040850182611e5a565b506060820151611eb86060850182611e2d565b506080820151611ecb6080850182611e2d565b5060a0820151611ede60a0850182611e2d565b50505050565b600082825260208201905092915050565b6000611f0082611afb565b611f0a8185611ee4565b9350611f1a818560208601611b17565b611f23816114b7565b840191505092915050565b60006101c083016000830151611f476000860182611e1e565b506020830151611f5a6020860182611e2d565b506040830151611f6d6040860182611e2d565b506060830151611f806060860182611e2d565b506080830151611f936080860182611e1e565b5060a0830151611fa660a0860182611e1e565b5060c0830151611fb960c0860182611e69565b5060e0830151611fcd610180860182611e1e565b506101008301518482036101a0860152611fe78282611ef5565b9150508091505092915050565b60006120008383611f2e565b905092915050565b6000602082019050919050565b600061202082611df2565b61202a8185611dfd565b93508360208202850161203c85611e0e565b8060005b8581101561207857848403895281516120598582611ff4565b945061206483612008565b925060208a01995050600181019050612040565b50829750879550505050505092915050565b60006040830160008301516120a26000860182611de3565b50602083015184820360208601526120ba8282612015565b9150508091505092915050565b60006120d3838361208a565b905092915050565b6000602082019050919050565b60006120f382611d4f565b6120fd8185611d5a565b93508360208202850161210f85611d6b565b8060005b8581101561214b578484038952815161212c85826120c7565b9450612137836120db565b925060208a01995050600181019050612113565b50829750879550505050505092915050565b6000602082019050818103600083015261217781846120e8565b905092915050565b61218881611300565b82525050565b6121978161133e565b82525050565b60006040820190506121b2600083018561217f565b6121bf602083018461218e565b9392505050565b60006020820190506121db600083018461217f565b92915050565b60006121ec82611c40565b9050919050565b6121fc816121e1565b82525050565b600060208201905061221760008301846121f3565b92915050565b600060208284031215612233576122326112d6565b5b600061224184828501611329565b91505092915050565b60008151905061225981611579565b92915050565b60008151905061226e81611348565b92915050565b60008151905061228381611312565b92915050565b600081519050612298816115de565b92915050565b6000815190506122ad81611626565b92915050565b6000815190506122c28161165e565b92915050565b600060c082840312156122de576122dd61156f565b5b6122e860c0611528565b905060006122f884828501612289565b600083015250602061230c8482850161229e565b6020830152506040612320848285016122b3565b604083015250606061233484828501612274565b606083015250608061234884828501612274565b60808301525060a061235c84828501612274565b60a08301525092915050565b600061237b6123768461172f565b611528565b9050828152602081018484840111156123975761239661172a565b5b6123a2848285611b17565b509392505050565b600082601f8301126123bf576123be611374565b5b81516123cf848260208601612368565b91505092915050565b60006101c082840312156123ef576123ee61156f565b5b6123fa610120611528565b9050600061240a8482850161225f565b600083015250602061241e84828501612274565b602083015250604061243284828501612274565b604083015250606061244684828501612274565b606083015250608061245a8482850161225f565b60808301525060a061246e8482850161225f565b60a08301525060c0612482848285016122c8565b60c0830152506101806124978482850161225f565b60e0830152506101a082015167ffffffffffffffff8111156124bc576124bb611574565b5b6124c8848285016123aa565b6101008301525092915050565b60006124e86124e38461159e565b611528565b9050808382526020820190506020840283018581111561250b5761250a61137e565b5b835b8181101561255257805167ffffffffffffffff8111156125305761252f611374565b5b80860161253d89826123d8565b8552602085019450505060208101905061250d565b5050509392505050565b600082601f83011261257157612570611374565b5b81516125818482602086016124d5565b91505092915050565b6000604082840312156125a05761259f61156f565b5b6125aa6040611528565b905060006125ba8482850161224a565b600083015250602082015167ffffffffffffffff8111156125de576125dd611574565b5b6125ea8482850161255c565b60208301525092915050565b600061260961260484611543565b611528565b9050808382526020820190506020840283018581111561262c5761262b61137e565b5b835b8181101561267357805167ffffffffffffffff81111561265157612650611374565b5b80860161265e898261258a565b8552602085019450505060208101905061262e565b5050509392505050565b600082601f83011261269257612691611374565b5b81516126a28482602086016125f6565b91505092915050565b6000602082840312156126c1576126c06112d6565b5b600082015167ffffffffffffffff8111156126df576126de6112db565b5b6126eb8482850161267d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061275d8261133e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127905761278f612723565b5b600182019050919050565b600082825260208201905092915050565b7f646966666572656e7420636f6c6c61746572616c20746f6b656e730000000000600082015250565b60006127e2601b8361279b565b91506127ed826127ac565b602082019050919050565b60006020820190508181036000830152612811816127d5565b9050919050565b60006128238261133e565b915061282e8361133e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561286357612862612723565b5b828201905092915050565b600060208284031215612884576128836112d6565b5b6000612892848285016122b3565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006128f760268361279b565b91506129028261289b565b604082019050919050565b60006020820190508181036000830152612926816128ea565b9050919050565b600060208284031215612943576129426112d6565b5b60006129518482850161225f565b91505092915050565b600060408201905061296f600083018561217f565b818103602083015261298181846120e8565b90509392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006129c060208361279b565b91506129cb8261298a565b602082019050919050565b600060208201905081810360008301526129ef816129b3565b905091905056fea264697066735822122096c8508cfa6de14b6bf225c842659ced769c559fd60bdc47652681dd28e49b4364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allApprove()": {
        "details": "See {ITxBuilderOpenRyskFinance-allApprove}."
      },
      "calculateAmount(bytes)": {
        "details": "This public view function `calculateAmount` takes encoded parameters from Rysk Finance and decodes them to determine the token and amount involved in the specified Rysk operations. The decoded parameters represent a series of actions (operation procedures) related to Rysk Finance.",
        "params": {
          "parameters": "Encoded parameters containing Rysk Finance operation details."
        },
        "returns": {
          "amount": "The total amount associated with the specified Rysk operations.",
          "token": "The address of the token involved in the Rysk operations."
        }
      },
      "decodeFromRyskFinance(bytes)": {
        "details": "See {ITxBuilderOpenRyskFinance-decodeFromRyskFinance}."
      },
      "encodeFromRyskFinance((uint8,(uint256,address,address,address,uint256,uint256,(uint64,uint128,bool,address,address,address),uint256,bytes)[])[])": {
        "details": "See {ITxBuilderOpenRyskFinance-encodeFromRyskFinance}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "processTx(bytes,uint256,address)": {
        "details": "See {IBaseTxBuilderOpen-processTx}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "OpenPositionByRyskFinance(uint256,address,(uint8,(uint256,address,address,address,uint256,uint256,(uint64,uint128,bool,address,address,address),uint256,bytes)[])[])": {
        "notice": "Emitted to signal the successful opening of a position by Rysk Finance."
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5122,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "usdc",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ERC20)1088"
      },
      {
        "astId": 5125,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "weth",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ERC20)1088"
      },
      {
        "astId": 5128,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "wbtc",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ERC20)1088"
      },
      {
        "astId": 5131,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "pricer",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IBeyondPricer)4964"
      },
      {
        "astId": 5134,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "optionExchange",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IOptionExchange)5042"
      },
      {
        "astId": 5137,
        "contract": "contracts/risk_finance/TxBuilderOpenRyskFinance.sol:TxBuilderOpenRyskFinance",
        "label": "portfolioValuesFeed",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IAlphaPortfolioValuesFeed)4941"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20)1088": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IAlphaPortfolioValuesFeed)4941": {
        "encoding": "inplace",
        "label": "contract IAlphaPortfolioValuesFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IBeyondPricer)4964": {
        "encoding": "inplace",
        "label": "contract IBeyondPricer",
        "numberOfBytes": "20"
      },
      "t_contract(IOptionExchange)5042": {
        "encoding": "inplace",
        "label": "contract IOptionExchange",
        "numberOfBytes": "20"
      }
    }
  }
}