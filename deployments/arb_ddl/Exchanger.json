{
  "address": "0x2f7e0Ee16FFd6BA0721158F74934Ff0e42Df6131",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roleManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth9",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        }
      ],
      "name": "calculateMsgValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "swapDataArray",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "checkMsgValue",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "name": "decodeFromExchange",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isETH",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "swap",
              "type": "bool"
            }
          ],
          "internalType": "struct IExchanger.ExchangeData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isETH",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "swap",
              "type": "bool"
            }
          ],
          "internalType": "struct IExchanger.ExchangeData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "encodeFromExchange",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleManager",
      "outputs": [
        {
          "internalType": "contract RoleManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth9",
      "outputs": [
        {
          "internalType": "contract IWETH9",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4d69d716bdd1af8f2e94cf099c49f6912e7b56e5516b929bdfeab1ff7dc3f105",
  "receipt": {
    "to": null,
    "from": "0x8B57f3a9bDf2cfdBF9B2627ff8bEa86fB5641a50",
    "contractAddress": "0x2f7e0Ee16FFd6BA0721158F74934Ff0e42Df6131",
    "transactionIndex": 2,
    "gasUsed": "17686658",
    "logsBloom": "0x
    "blockHash": "0x24839d015c2cb3e3df7965da901f1ce9353916030233cf1e8be2cd9c1df28dc4",
    "transactionHash": "0x4d69d716bdd1af8f2e94cf099c49f6912e7b56e5516b929bdfeab1ff7dc3f105",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 145452645,
        "transactionHash": "0x4d69d716bdd1af8f2e94cf099c49f6912e7b56e5516b929bdfeab1ff7dc3f105",
        "address": "0x2f7e0Ee16FFd6BA0721158F74934Ff0e42Df6131",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b57f3a9bdf2cfdbf9b2627ff8bea86fb5641a50"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x24839d015c2cb3e3df7965da901f1ce9353916030233cf1e8be2cd9c1df28dc4"
      }
    ],
    "blockNumber": 145452645,
    "cumulativeGasUsed": "20411137",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE592427A0AEce92De3Edee1F18E0157C05861564",
    "0xf02E21a390A368AC7ce9f90Da8Ef3201e74A00Aa",
    "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1"
  ],
  "numDeployments": 5,
  "solcInputHash": "b1f2077a0dc40f076929ef05d9203b2d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roleManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth9\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"calculateMsgValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"swapDataArray\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"checkMsgValue\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"name\":\"decodeFromExchange\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isETH\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swap\",\"type\":\"bool\"}],\"internalType\":\"struct IExchanger.ExchangeData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isETH\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swap\",\"type\":\"bool\"}],\"internalType\":\"struct IExchanger.ExchangeData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"encodeFromExchange\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"contract RoleManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth9\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0nika0\",\"details\":\"A smart contract for executing token swaps and managing roles for traders.  This contract allows users with the TRADER_ROLE to perform token swaps and enforces checks on the validity of swaps.\",\"kind\":\"dev\",\"methods\":{\"calculateMsgValue(bytes)\":{\"details\":\"See {IExchanger-calculateMsgValue}.\"},\"checkMsgValue(bytes[],uint256)\":{\"details\":\"See {IExchanger-checkMsgValue}.\"},\"decodeFromExchange(bytes)\":{\"details\":\"See {IExchanger-decodeFromExchange}.\"},\"encodeFromExchange((bytes,address,address,uint256,uint256,bool,bool))\":{\"details\":\"See {IExchanger-encodeFromExchange}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"swap(bytes,address,address)\":{\"details\":\"See {IExchanger-swap}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Exchanger\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/exchanger/Exchanger.sol\":\"Exchanger\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/RoleManager.sol\":{\"content\":\"pragma solidity ^0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract RoleManager is Ownable, AccessControl {\\n    bytes32 public constant TRADER_ROLE = keccak256(\\\"TRADER_ROLE\\\");\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setRoleAdmin(TRADER_ROLE, DEFAULT_ADMIN_ROLE);\\n    }\\n\\n    // EXTERNAL\\n\\n    function changeRole(address value, bytes32 role, bool state) external {\\n        if (state) {\\n            grantRole(role, value);\\n        } else {\\n            revokeRole(role, value);\\n        }\\n    }\\n\\n    // DEFAULT_ADMIN_ROLE\\n\\n    function changeAdminRole(bytes32 role, bytes32 adminRole) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"msg.sender does not own the role\\\");\\n        _setRoleAdmin(role, adminRole);\\n    }\\n\\n    function renounceAdminRole(bytes32 role) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"msg.sender does not own the role\\\");\\n        require(getRoleAdmin(role) == DEFAULT_ADMIN_ROLE, \\\"non-default admin role\\\");\\n        _setRoleAdmin(role, role);\\n    }\\n}\",\"keccak256\":\"0x7739502dbb2ab15e51b671b30ffca337065feb84556fdc15e09fbe020993fe01\",\"license\":\"GPL-3.0-or-later\"},\"contracts/exchanger/Exchanger.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport {TransferHelper} from \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport {ISwapRouter} from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {RoleManager, Ownable} from \\\"../RoleManager.sol\\\";\\nimport {IExchanger} from \\\"./IExchanger.sol\\\";\\nimport {IWETH9} from \\\"./IWETH9.sol\\\";\\n\\n/**\\n * @title Exchanger\\n * @author 0nika0\\n * @dev A smart contract for executing token swaps and managing roles for traders.\\n * \\n * This contract allows users with the TRADER_ROLE to perform token swaps and enforces checks on the validity of swaps.\\n */\\ncontract Exchanger is Ownable, IExchanger {\\n\\n    ISwapRouter public swapRouter;\\n    RoleManager public roleManager;\\n    IWETH9 public weth9;\\n\\n    constructor(\\n        address _swapRouter,\\n        address _roleManager,\\n        address _weth9\\n    ) {\\n        swapRouter = ISwapRouter(_swapRouter);\\n        roleManager = RoleManager(_roleManager);\\n        weth9 = IWETH9(_weth9);\\n    }\\n\\n    // EXTERNAL FUNCTIONS // \\n\\n    /**\\n     * @dev See {IExchanger-swap}.\\n     */\\n    function swap(bytes memory data, address from, address to) external payable {\\n        require(roleManager.hasRole(roleManager.TRADER_ROLE(), msg.sender), \\\"msg.sender not have TRADER_ROLE\\\");\\n        ExchangeData memory exchangeData = decodeFromExchange(data);\\n\\n        if (exchangeData.swap) {\\n            uint256 msgValue;\\n            uint256 amountOut;\\n\\n            if (exchangeData.isETH) {\\n                msgValue = exchangeData.amountIn;\\n            } else {\\n                TransferHelper.safeTransferFrom(exchangeData.tokenIn, from, address(this), exchangeData.amountIn);\\n                TransferHelper.safeApprove(exchangeData.tokenIn, address(swapRouter), exchangeData.amountIn);\\n            }\\n            \\n            if (exchangeData.isETH && exchangeData.tokenIn == exchangeData.tokenOut) {\\n                weth9.deposit{value: msgValue}();\\n            } else {\\n                ISwapRouter.ExactInputParams memory params =\\n                ISwapRouter.ExactInputParams({\\n                    path: exchangeData.path,\\n                    recipient: address(this),\\n                    deadline: block.timestamp,\\n                    amountIn: exchangeData.amountIn,\\n                    amountOutMinimum: exchangeData.amountOutMinimum\\n                });\\n\\n                amountOut = swapRouter.exactInput{value: msgValue}(params);\\n                require(amountOut >= exchangeData.amountOutMinimum, \\\"invalid swap\\\");\\n                ERC20(exchangeData.tokenOut).transfer(from, amountOut - exchangeData.amountOutMinimum);\\n            }\\n\\n            ERC20(exchangeData.tokenOut).transfer(to, exchangeData.amountOutMinimum);\\n            \\n            if (exchangeData.isETH && address(this).balance != 0) payable(to).transfer(address(this).balance);\\n        } else {\\n            ERC20(exchangeData.tokenIn).transferFrom(from, to, exchangeData.amountIn);\\n        }\\n    }\\n\\n    // PURE FUNCTIONS //\\n    \\n    /**\\n     * @dev See {IExchanger-checkMsgValue}.\\n     */\\n    function checkMsgValue(bytes[] memory swapDataArray, uint256 msgValue) external pure {\\n        uint256 msgValueCalc;\\n        for (uint i = 0; i < swapDataArray.length; i++) {\\n            ExchangeData memory exchangeData = decodeFromExchange(swapDataArray[i]);\\n            if (exchangeData.isETH && exchangeData.swap) {\\n                msgValueCalc += exchangeData.amountIn;\\n            }\\n        }\\n        require(msgValue == msgValueCalc, \\\"invalid msg.value\\\");\\n    }\\n\\n    /**\\n     * @dev See {IExchanger-calculateMsgValue}.\\n     */\\n    function calculateMsgValue(bytes memory swapData) external pure returns (uint256 value) {\\n        ExchangeData memory exchangeData = decodeFromExchange(swapData);\\n        if (exchangeData.isETH && exchangeData.swap) value = exchangeData.amountIn; \\n    }\\n\\n    /**\\n     * @dev See {IExchanger-encodeFromExchange}.\\n     */\\n    function encodeFromExchange(ExchangeData memory data) external pure returns (bytes memory paramData) {\\n        return abi.encode(data);\\n    }\\n\\n    /**\\n     * @dev See {IExchanger-decodeFromExchange}.\\n     */\\n    function decodeFromExchange(bytes memory paramData) public pure returns (ExchangeData memory data) {\\n        (\\n            data\\n        ) = abi.decode(paramData, (\\n            ExchangeData\\n        ));\\n    }\\n}\",\"keccak256\":\"0xd5cc4b80d944ef7ebe6c180df50332a4d0b96448d263fc29f896b0dabecadaa5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/exchanger/IExchanger.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\ninterface IExchanger {\\n    // STRUCTS //\\n\\n    /**\\n     * @dev A struct representing data related to token swaps.\\n     * \\n     * This struct encapsulates information necessary for token swaps, including the token path, input and output tokens,\\n     * input amount, minimum expected output amount, flags to indicate whether tokens are ETH and if the swap should be executed.\\n     * \\n     * @param path The path of tokens to follow in the swap.\\n     * @param tokenIn The address of the input token.\\n     * @param tokenOut The address of the output token.\\n     * @param amountIn The amount of input tokens to swap.\\n     * @param amountOutMinimum The minimum amount of output tokens expected from the swap.\\n     * @param isETH A boolean indicating whether the input token is ETH (true if it is).\\n     * @param swap A boolean indicating whether the swap should be executed (true if it should).\\n     */\\n    struct ExchangeData {\\n        bytes path;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        bool isETH;\\n        bool swap;\\n    }\\n    \\n    // EXTERNAL FUNCTIONS //\\n\\n    /**\\n     * @dev Allows a trader to perform a swap operation or a direct token transfer between addresses.\\n     * \\n     * This function can be used by traders to perform token swaps through a decentralized exchange or directly transfer tokens between addresses.\\n     * If the 'swap' flag in the provided data is set to true, a token swap is executed with specific details such as input and output tokens,\\n     * minimum expected output, and other swap-related parameters. If the 'swap' flag is set to false, a direct token transfer is performed between 'from' and 'to'.\\n     * \\n     * @param data The encoded swap or transfer data that includes information about the operation.\\n     * @param from The address from which tokens are transferred or swapped.\\n     * @param to The address that receives the tokens in the transfer or swap operation.\\n     * \\n     * Requirements:\\n     * - The caller must have the 'TRADER_ROLE'.\\n     */\\n    function swap(bytes memory data, address from, address to) external payable;\\n\\n    // PURE FUNCTIONS //\\n\\n    /**\\n     * @dev Verifies if the provided `msg.value` matches the calculated value based on a series of swap operations.\\n     * \\n     * This function checks if the provided `msg.value` matches the calculated value obtained by summing the input amounts of ETH for each swap operation.\\n     * It is used to ensure the correctness of `msg.value` when performing multiple swaps, preventing errors or discrepancies.\\n     * \\n     * @param swapDataArray An array of encoded swap data, each containing information about swap or transfer operations.\\n     * @param msgValue The expected `msg.value` to be validated against the calculated value.\\n     * \\n     * Requirements:\\n     * - The `msg.value` must match the calculated value based on the provided `swapDataArray`.\\n     */\\n    function checkMsgValue(bytes[] memory swapDataArray, uint256 msgValue) external pure;\\n    \\n    /**\\n     * @dev Calculates the expected `msg.value` for a given swap operation encoded in swapData.\\n     * \\n     * This function calculates the expected `msg.value` based on the information provided in the swapData.\\n     * It checks if the swap operation involves ETH and is indeed a swap (not just a transfer).\\n     * If these conditions are met, it returns the calculated `msg.value`.\\n     * \\n     * @param swapData The encoded swap data that describes the swap operation.\\n     * \\n     * @return value The calculated `msg.value` for the swap operation. If it's not a swap involving ETH, the value is 0.\\n     */\\n    function calculateMsgValue(bytes memory swapData) external pure returns (uint256 value);\\n    \\n    /**\\n     * @dev Encodes the ExchangeData struct into a bytes array.\\n     * \\n     * This function takes the ExchangeData struct as input and encodes it into a bytes array using ABI encoding.\\n     * The resulting bytes array, `paramData`, can be used to store or transmit the struct's data.\\n     * \\n     * @param data The ExchangeData struct to be encoded.\\n     * \\n     * @return paramData The encoded data in the form of a bytes array.\\n     */\\n    function encodeFromExchange(ExchangeData memory data) external pure returns (bytes memory paramData);\\n    \\n    /**\\n     * @dev Decodes the ExchangeData struct from a bytes array.\\n     * \\n     * This function decodes the ExchangeData struct from a given bytes array (`paramData`) using ABI decoding.\\n     * The decoded struct, `data`, is returned for further use and processing.\\n     * \\n     * @param paramData The bytes array containing the encoded ExchangeData struct.\\n     * \\n     * @return data The decoded ExchangeData struct.\\n     */\\n    function decodeFromExchange(bytes memory paramData) external pure returns (ExchangeData memory data);\\n}\",\"keccak256\":\"0x438b20f0e9412388f4d850201727de55ff334a8aa2fa72cee26066502f2b8f1d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/exchanger/IWETH9.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * SharwaFinance\\n * Copyright (C) 2023 SharwaFinance\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\ninterface IWETH9 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xbea5b5101d7595d941e3a200ce799bd705362c1eec61512044a36cb0b43de619\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620023a8380380620023a8833981810160405281019062000037919062000259565b620000576200004b6200012360201b60201c565b6200012b60201b60201c565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620002b5565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022182620001f4565b9050919050565b620002338162000214565b81146200023f57600080fd5b50565b600081519050620002538162000228565b92915050565b600080600060608486031215620002755762000274620001ef565b5b6000620002858682870162000242565b9350506020620002988682870162000242565b9250506040620002ab8682870162000242565b9150509250925092565b6120e380620002c56000396000f3fe60806040526004361061009b5760003560e01c80638da5cb5b116100645780638da5cb5b14610152578063bcc4bffd1461017d578063be3e58b6146101ba578063c31c9c07146101f7578063cafba07e14610222578063f2fde38b1461025f5761009b565b8062435da5146100a057806350879c1c146100cb578063715018a6146100f657806378a820a71461010d5780638a4c2a0e14610129575b600080fd5b3480156100ac57600080fd5b506100b5610288565b6040516100c29190611033565b60405180910390f35b3480156100d757600080fd5b506100e06102ae565b6040516100ed919061106f565b60405180910390f35b34801561010257600080fd5b5061010b6102d4565b005b61012760048036038101906101229190611222565b6102e8565b005b34801561013557600080fd5b50610150600480360381019061014b91906113ad565b610940565b005b34801561015e57600080fd5b506101676109fe565b6040516101749190611418565b60405180910390f35b34801561018957600080fd5b506101a4600480360381019061019f9190611433565b610a27565b6040516101b1919061148b565b60405180910390f35b3480156101c657600080fd5b506101e160048036038101906101dc91906115b8565b610a5a565b6040516101ee9190611689565b60405180910390f35b34801561020357600080fd5b5061020c610a83565b60405161021991906116cc565b60405180910390f35b34801561022e57600080fd5b5061024960048036038101906102449190611433565b610aa9565b60405161025691906117fa565b60405180910390f35b34801561026b57600080fd5b506102866004803603810190610281919061181c565b610acc565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102dc610b50565b6102e66000610bce565b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d14854600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f0a56fc86040518163ffffffff1660e01b815260040160206040518083038186803b15801561038e57600080fd5b505afa1580156103a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c6919061187f565b336040518363ffffffff1660e01b81526004016103e49291906118bb565b60206040518083038186803b1580156103fc57600080fd5b505afa158015610410573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043491906118f9565b610473576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046a90611983565b60405180910390fd5b600061047e84610aa9565b90508060c00151156108a1576000808260a00151156104a357826060015191506104ed565b6104b7836020015186308660600151610c92565b6104ec8360200151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560600151610dea565b5b8260a0015180156105315750826040015173ffffffffffffffffffffffffffffffffffffffff16836020015173ffffffffffffffffffffffffffffffffffffffff16145b156105be57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156105a057600080fd5b505af11580156105b4573d6000803e3d6000fd5b50505050506107a5565b60006040518060a00160405280856000015181526020013073ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018560600151815260200185608001518152509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c04b8d5984836040518363ffffffff1660e01b81526004016106679190611a19565b6020604051808303818588803b15801561068057600080fd5b505af1158015610694573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106b99190611a50565b91508360800151821015610702576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f990611ac9565b60405180910390fd5b836040015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb878660800151856107339190611b18565b6040518363ffffffff1660e01b8152600401610750929190611b4c565b602060405180830381600087803b15801561076a57600080fd5b505af115801561077e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a291906118f9565b50505b826040015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585608001516040518363ffffffff1660e01b81526004016107e8929190611b4c565b602060405180830381600087803b15801561080257600080fd5b505af1158015610816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083a91906118f9565b508260a00151801561084d575060004714155b1561089a578373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610898573d6000803e3d6000fd5b505b505061093a565b806020015173ffffffffffffffffffffffffffffffffffffffff166323b872dd848484606001516040518463ffffffff1660e01b81526004016108e693929190611b75565b602060405180830381600087803b15801561090057600080fd5b505af1158015610914573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093891906118f9565b505b50505050565b600080600090505b83518110156109b657600061097685838151811061096957610968611bac565b5b6020026020010151610aa9565b90508060a00151801561098a57508060c001515b156109a25780606001518361099f9190611bdb565b92505b5080806109ae90611c31565b915050610948565b508082146109f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f090611cc6565b60405180910390fd5b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080610a3383610aa9565b90508060a001518015610a4757508060c001515b15610a5457806060015191505b50919050565b606081604051602001610a6d91906117fa565b6040516020818303038152906040529050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610ab1610f47565b81806020019051810190610ac59190611e3b565b9050919050565b610ad4610b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3b90611ef6565b60405180910390fd5b610b4d81610bce565b50565b610b58610f3f565b73ffffffffffffffffffffffffffffffffffffffff16610b766109fe565b73ffffffffffffffffffffffffffffffffffffffff1614610bcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc390611f62565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401610cc993929190611b75565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610d339190611fbe565b6000604051808303816000865af19150503d8060008114610d70576040519150601f19603f3d011682016040523d82523d6000602084013e610d75565b606091505b5091509150818015610da35750600081511480610da2575080806020019051810190610da191906118f9565b5b5b610de2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd990612021565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401610e1f929190611b4c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610e899190611fbe565b6000604051808303816000865af19150503d8060008114610ec6576040519150601f19603f3d011682016040523d82523d6000602084013e610ecb565b606091505b5091509150818015610ef95750600081511480610ef8575080806020019051810190610ef791906118f9565b5b5b610f38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2f9061208d565b60405180910390fd5b5050505050565b600033905090565b6040518060e0016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000151581526020016000151581525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ff9610ff4610fef84610fb4565b610fd4565b610fb4565b9050919050565b600061100b82610fde565b9050919050565b600061101d82611000565b9050919050565b61102d81611012565b82525050565b60006020820190506110486000830184611024565b92915050565b600061105982611000565b9050919050565b6110698161104e565b82525050565b60006020820190506110846000830184611060565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110f1826110a8565b810181811067ffffffffffffffff821117156111105761110f6110b9565b5b80604052505050565b600061112361108a565b905061112f82826110e8565b919050565b600067ffffffffffffffff82111561114f5761114e6110b9565b5b611158826110a8565b9050602081019050919050565b82818337600083830152505050565b600061118761118284611134565b611119565b9050828152602081018484840111156111a3576111a26110a3565b5b6111ae848285611165565b509392505050565b600082601f8301126111cb576111ca61109e565b5b81356111db848260208601611174565b91505092915050565b60006111ef82610fb4565b9050919050565b6111ff816111e4565b811461120a57600080fd5b50565b60008135905061121c816111f6565b92915050565b60008060006060848603121561123b5761123a611094565b5b600084013567ffffffffffffffff81111561125957611258611099565b5b611265868287016111b6565b93505060206112768682870161120d565b92505060406112878682870161120d565b9150509250925092565b600067ffffffffffffffff8211156112ac576112ab6110b9565b5b602082029050602081019050919050565b600080fd5b60006112d56112d084611291565b611119565b905080838252602082019050602084028301858111156112f8576112f76112bd565b5b835b8181101561133f57803567ffffffffffffffff81111561131d5761131c61109e565b5b80860161132a89826111b6565b855260208501945050506020810190506112fa565b5050509392505050565b600082601f83011261135e5761135d61109e565b5b813561136e8482602086016112c2565b91505092915050565b6000819050919050565b61138a81611377565b811461139557600080fd5b50565b6000813590506113a781611381565b92915050565b600080604083850312156113c4576113c3611094565b5b600083013567ffffffffffffffff8111156113e2576113e1611099565b5b6113ee85828601611349565b92505060206113ff85828601611398565b9150509250929050565b611412816111e4565b82525050565b600060208201905061142d6000830184611409565b92915050565b60006020828403121561144957611448611094565b5b600082013567ffffffffffffffff81111561146757611466611099565b5b611473848285016111b6565b91505092915050565b61148581611377565b82525050565b60006020820190506114a0600083018461147c565b92915050565b600080fd5b600080fd5b60008115159050919050565b6114c5816114b0565b81146114d057600080fd5b50565b6000813590506114e2816114bc565b92915050565b600060e082840312156114fe576114fd6114a6565b5b61150860e0611119565b9050600082013567ffffffffffffffff811115611528576115276114ab565b5b611534848285016111b6565b60008301525060206115488482850161120d565b602083015250604061155c8482850161120d565b604083015250606061157084828501611398565b606083015250608061158484828501611398565b60808301525060a0611598848285016114d3565b60a08301525060c06115ac848285016114d3565b60c08301525092915050565b6000602082840312156115ce576115cd611094565b5b600082013567ffffffffffffffff8111156115ec576115eb611099565b5b6115f8848285016114e8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561163b578082015181840152602081019050611620565b8381111561164a576000848401525b50505050565b600061165b82611601565b611665818561160c565b935061167581856020860161161d565b61167e816110a8565b840191505092915050565b600060208201905081810360008301526116a38184611650565b905092915050565b60006116b682611000565b9050919050565b6116c6816116ab565b82525050565b60006020820190506116e160008301846116bd565b92915050565b600082825260208201905092915050565b600061170382611601565b61170d81856116e7565b935061171d81856020860161161d565b611726816110a8565b840191505092915050565b61173a816111e4565b82525050565b61174981611377565b82525050565b611758816114b0565b82525050565b600060e083016000830151848203600086015261177b82826116f8565b91505060208301516117906020860182611731565b5060408301516117a36040860182611731565b5060608301516117b66060860182611740565b5060808301516117c96080860182611740565b5060a08301516117dc60a086018261174f565b5060c08301516117ef60c086018261174f565b508091505092915050565b60006020820190508181036000830152611814818461175e565b905092915050565b60006020828403121561183257611831611094565b5b60006118408482850161120d565b91505092915050565b6000819050919050565b61185c81611849565b811461186757600080fd5b50565b60008151905061187981611853565b92915050565b60006020828403121561189557611894611094565b5b60006118a38482850161186a565b91505092915050565b6118b581611849565b82525050565b60006040820190506118d060008301856118ac565b6118dd6020830184611409565b9392505050565b6000815190506118f3816114bc565b92915050565b60006020828403121561190f5761190e611094565b5b600061191d848285016118e4565b91505092915050565b600082825260208201905092915050565b7f6d73672e73656e646572206e6f742068617665205452414445525f524f4c4500600082015250565b600061196d601f83611926565b915061197882611937565b602082019050919050565b6000602082019050818103600083015261199c81611960565b9050919050565b600060a08301600083015184820360008601526119c082826116f8565b91505060208301516119d56020860182611731565b5060408301516119e86040860182611740565b5060608301516119fb6060860182611740565b506080830151611a0e6080860182611740565b508091505092915050565b60006020820190508181036000830152611a3381846119a3565b905092915050565b600081519050611a4a81611381565b92915050565b600060208284031215611a6657611a65611094565b5b6000611a7484828501611a3b565b91505092915050565b7f696e76616c696420737761700000000000000000000000000000000000000000600082015250565b6000611ab3600c83611926565b9150611abe82611a7d565b602082019050919050565b60006020820190508181036000830152611ae281611aa6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b2382611377565b9150611b2e83611377565b925082821015611b4157611b40611ae9565b5b828203905092915050565b6000604082019050611b616000830185611409565b611b6e602083018461147c565b9392505050565b6000606082019050611b8a6000830186611409565b611b976020830185611409565b611ba4604083018461147c565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611be682611377565b9150611bf183611377565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611c2657611c25611ae9565b5b828201905092915050565b6000611c3c82611377565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611c6f57611c6e611ae9565b5b600182019050919050565b7f696e76616c6964206d73672e76616c7565000000000000000000000000000000600082015250565b6000611cb0601183611926565b9150611cbb82611c7a565b602082019050919050565b60006020820190508181036000830152611cdf81611ca3565b9050919050565b6000611cf9611cf484611134565b611119565b905082815260208101848484011115611d1557611d146110a3565b5b611d2084828561161d565b509392505050565b600082601f830112611d3d57611d3c61109e565b5b8151611d4d848260208601611ce6565b91505092915050565b600081519050611d65816111f6565b92915050565b600060e08284031215611d8157611d806114a6565b5b611d8b60e0611119565b9050600082015167ffffffffffffffff811115611dab57611daa6114ab565b5b611db784828501611d28565b6000830152506020611dcb84828501611d56565b6020830152506040611ddf84828501611d56565b6040830152506060611df384828501611a3b565b6060830152506080611e0784828501611a3b565b60808301525060a0611e1b848285016118e4565b60a08301525060c0611e2f848285016118e4565b60c08301525092915050565b600060208284031215611e5157611e50611094565b5b600082015167ffffffffffffffff811115611e6f57611e6e611099565b5b611e7b84828501611d6b565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611ee0602683611926565b9150611eeb82611e84565b604082019050919050565b60006020820190508181036000830152611f0f81611ed3565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611f4c602083611926565b9150611f5782611f16565b602082019050919050565b60006020820190508181036000830152611f7b81611f3f565b9050919050565b600081905092915050565b6000611f9882611601565b611fa28185611f82565b9350611fb281856020860161161d565b80840191505092915050565b6000611fca8284611f8d565b915081905092915050565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b600061200b600383611926565b915061201682611fd5565b602082019050919050565b6000602082019050818103600083015261203a81611ffe565b9050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b6000612077600283611926565b915061208282612041565b602082019050919050565b600060208201905081810360008301526120a68161206a565b905091905056fea2646970667358221220b4d26e7f953e4fe3319a39fddc31379eb5df079f137da23b1b1ffe5b5145fb4964736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061009b5760003560e01c80638da5cb5b116100645780638da5cb5b14610152578063bcc4bffd1461017d578063be3e58b6146101ba578063c31c9c07146101f7578063cafba07e14610222578063f2fde38b1461025f5761009b565b8062435da5146100a057806350879c1c146100cb578063715018a6146100f657806378a820a71461010d5780638a4c2a0e14610129575b600080fd5b3480156100ac57600080fd5b506100b5610288565b6040516100c29190611033565b60405180910390f35b3480156100d757600080fd5b506100e06102ae565b6040516100ed919061106f565b60405180910390f35b34801561010257600080fd5b5061010b6102d4565b005b61012760048036038101906101229190611222565b6102e8565b005b34801561013557600080fd5b50610150600480360381019061014b91906113ad565b610940565b005b34801561015e57600080fd5b506101676109fe565b6040516101749190611418565b60405180910390f35b34801561018957600080fd5b506101a4600480360381019061019f9190611433565b610a27565b6040516101b1919061148b565b60405180910390f35b3480156101c657600080fd5b506101e160048036038101906101dc91906115b8565b610a5a565b6040516101ee9190611689565b60405180910390f35b34801561020357600080fd5b5061020c610a83565b60405161021991906116cc565b60405180910390f35b34801561022e57600080fd5b5061024960048036038101906102449190611433565b610aa9565b60405161025691906117fa565b60405180910390f35b34801561026b57600080fd5b506102866004803603810190610281919061181c565b610acc565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102dc610b50565b6102e66000610bce565b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d14854600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f0a56fc86040518163ffffffff1660e01b815260040160206040518083038186803b15801561038e57600080fd5b505afa1580156103a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c6919061187f565b336040518363ffffffff1660e01b81526004016103e49291906118bb565b60206040518083038186803b1580156103fc57600080fd5b505afa158015610410573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043491906118f9565b610473576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046a90611983565b60405180910390fd5b600061047e84610aa9565b90508060c00151156108a1576000808260a00151156104a357826060015191506104ed565b6104b7836020015186308660600151610c92565b6104ec8360200151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560600151610dea565b5b8260a0015180156105315750826040015173ffffffffffffffffffffffffffffffffffffffff16836020015173ffffffffffffffffffffffffffffffffffffffff16145b156105be57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156105a057600080fd5b505af11580156105b4573d6000803e3d6000fd5b50505050506107a5565b60006040518060a00160405280856000015181526020013073ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018560600151815260200185608001518152509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c04b8d5984836040518363ffffffff1660e01b81526004016106679190611a19565b6020604051808303818588803b15801561068057600080fd5b505af1158015610694573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106b99190611a50565b91508360800151821015610702576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f990611ac9565b60405180910390fd5b836040015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb878660800151856107339190611b18565b6040518363ffffffff1660e01b8152600401610750929190611b4c565b602060405180830381600087803b15801561076a57600080fd5b505af115801561077e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a291906118f9565b50505b826040015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585608001516040518363ffffffff1660e01b81526004016107e8929190611b4c565b602060405180830381600087803b15801561080257600080fd5b505af1158015610816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083a91906118f9565b508260a00151801561084d575060004714155b1561089a578373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610898573d6000803e3d6000fd5b505b505061093a565b806020015173ffffffffffffffffffffffffffffffffffffffff166323b872dd848484606001516040518463ffffffff1660e01b81526004016108e693929190611b75565b602060405180830381600087803b15801561090057600080fd5b505af1158015610914573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093891906118f9565b505b50505050565b600080600090505b83518110156109b657600061097685838151811061096957610968611bac565b5b6020026020010151610aa9565b90508060a00151801561098a57508060c001515b156109a25780606001518361099f9190611bdb565b92505b5080806109ae90611c31565b915050610948565b508082146109f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f090611cc6565b60405180910390fd5b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080610a3383610aa9565b90508060a001518015610a4757508060c001515b15610a5457806060015191505b50919050565b606081604051602001610a6d91906117fa565b6040516020818303038152906040529050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610ab1610f47565b81806020019051810190610ac59190611e3b565b9050919050565b610ad4610b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3b90611ef6565b60405180910390fd5b610b4d81610bce565b50565b610b58610f3f565b73ffffffffffffffffffffffffffffffffffffffff16610b766109fe565b73ffffffffffffffffffffffffffffffffffffffff1614610bcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc390611f62565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401610cc993929190611b75565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610d339190611fbe565b6000604051808303816000865af19150503d8060008114610d70576040519150601f19603f3d011682016040523d82523d6000602084013e610d75565b606091505b5091509150818015610da35750600081511480610da2575080806020019051810190610da191906118f9565b5b5b610de2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd990612021565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401610e1f929190611b4c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610e899190611fbe565b6000604051808303816000865af19150503d8060008114610ec6576040519150601f19603f3d011682016040523d82523d6000602084013e610ecb565b606091505b5091509150818015610ef95750600081511480610ef8575080806020019051810190610ef791906118f9565b5b5b610f38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2f9061208d565b60405180910390fd5b5050505050565b600033905090565b6040518060e0016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000151581526020016000151581525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ff9610ff4610fef84610fb4565b610fd4565b610fb4565b9050919050565b600061100b82610fde565b9050919050565b600061101d82611000565b9050919050565b61102d81611012565b82525050565b60006020820190506110486000830184611024565b92915050565b600061105982611000565b9050919050565b6110698161104e565b82525050565b60006020820190506110846000830184611060565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110f1826110a8565b810181811067ffffffffffffffff821117156111105761110f6110b9565b5b80604052505050565b600061112361108a565b905061112f82826110e8565b919050565b600067ffffffffffffffff82111561114f5761114e6110b9565b5b611158826110a8565b9050602081019050919050565b82818337600083830152505050565b600061118761118284611134565b611119565b9050828152602081018484840111156111a3576111a26110a3565b5b6111ae848285611165565b509392505050565b600082601f8301126111cb576111ca61109e565b5b81356111db848260208601611174565b91505092915050565b60006111ef82610fb4565b9050919050565b6111ff816111e4565b811461120a57600080fd5b50565b60008135905061121c816111f6565b92915050565b60008060006060848603121561123b5761123a611094565b5b600084013567ffffffffffffffff81111561125957611258611099565b5b611265868287016111b6565b93505060206112768682870161120d565b92505060406112878682870161120d565b9150509250925092565b600067ffffffffffffffff8211156112ac576112ab6110b9565b5b602082029050602081019050919050565b600080fd5b60006112d56112d084611291565b611119565b905080838252602082019050602084028301858111156112f8576112f76112bd565b5b835b8181101561133f57803567ffffffffffffffff81111561131d5761131c61109e565b5b80860161132a89826111b6565b855260208501945050506020810190506112fa565b5050509392505050565b600082601f83011261135e5761135d61109e565b5b813561136e8482602086016112c2565b91505092915050565b6000819050919050565b61138a81611377565b811461139557600080fd5b50565b6000813590506113a781611381565b92915050565b600080604083850312156113c4576113c3611094565b5b600083013567ffffffffffffffff8111156113e2576113e1611099565b5b6113ee85828601611349565b92505060206113ff85828601611398565b9150509250929050565b611412816111e4565b82525050565b600060208201905061142d6000830184611409565b92915050565b60006020828403121561144957611448611094565b5b600082013567ffffffffffffffff81111561146757611466611099565b5b611473848285016111b6565b91505092915050565b61148581611377565b82525050565b60006020820190506114a0600083018461147c565b92915050565b600080fd5b600080fd5b60008115159050919050565b6114c5816114b0565b81146114d057600080fd5b50565b6000813590506114e2816114bc565b92915050565b600060e082840312156114fe576114fd6114a6565b5b61150860e0611119565b9050600082013567ffffffffffffffff811115611528576115276114ab565b5b611534848285016111b6565b60008301525060206115488482850161120d565b602083015250604061155c8482850161120d565b604083015250606061157084828501611398565b606083015250608061158484828501611398565b60808301525060a0611598848285016114d3565b60a08301525060c06115ac848285016114d3565b60c08301525092915050565b6000602082840312156115ce576115cd611094565b5b600082013567ffffffffffffffff8111156115ec576115eb611099565b5b6115f8848285016114e8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561163b578082015181840152602081019050611620565b8381111561164a576000848401525b50505050565b600061165b82611601565b611665818561160c565b935061167581856020860161161d565b61167e816110a8565b840191505092915050565b600060208201905081810360008301526116a38184611650565b905092915050565b60006116b682611000565b9050919050565b6116c6816116ab565b82525050565b60006020820190506116e160008301846116bd565b92915050565b600082825260208201905092915050565b600061170382611601565b61170d81856116e7565b935061171d81856020860161161d565b611726816110a8565b840191505092915050565b61173a816111e4565b82525050565b61174981611377565b82525050565b611758816114b0565b82525050565b600060e083016000830151848203600086015261177b82826116f8565b91505060208301516117906020860182611731565b5060408301516117a36040860182611731565b5060608301516117b66060860182611740565b5060808301516117c96080860182611740565b5060a08301516117dc60a086018261174f565b5060c08301516117ef60c086018261174f565b508091505092915050565b60006020820190508181036000830152611814818461175e565b905092915050565b60006020828403121561183257611831611094565b5b60006118408482850161120d565b91505092915050565b6000819050919050565b61185c81611849565b811461186757600080fd5b50565b60008151905061187981611853565b92915050565b60006020828403121561189557611894611094565b5b60006118a38482850161186a565b91505092915050565b6118b581611849565b82525050565b60006040820190506118d060008301856118ac565b6118dd6020830184611409565b9392505050565b6000815190506118f3816114bc565b92915050565b60006020828403121561190f5761190e611094565b5b600061191d848285016118e4565b91505092915050565b600082825260208201905092915050565b7f6d73672e73656e646572206e6f742068617665205452414445525f524f4c4500600082015250565b600061196d601f83611926565b915061197882611937565b602082019050919050565b6000602082019050818103600083015261199c81611960565b9050919050565b600060a08301600083015184820360008601526119c082826116f8565b91505060208301516119d56020860182611731565b5060408301516119e86040860182611740565b5060608301516119fb6060860182611740565b506080830151611a0e6080860182611740565b508091505092915050565b60006020820190508181036000830152611a3381846119a3565b905092915050565b600081519050611a4a81611381565b92915050565b600060208284031215611a6657611a65611094565b5b6000611a7484828501611a3b565b91505092915050565b7f696e76616c696420737761700000000000000000000000000000000000000000600082015250565b6000611ab3600c83611926565b9150611abe82611a7d565b602082019050919050565b60006020820190508181036000830152611ae281611aa6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b2382611377565b9150611b2e83611377565b925082821015611b4157611b40611ae9565b5b828203905092915050565b6000604082019050611b616000830185611409565b611b6e602083018461147c565b9392505050565b6000606082019050611b8a6000830186611409565b611b976020830185611409565b611ba4604083018461147c565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611be682611377565b9150611bf183611377565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611c2657611c25611ae9565b5b828201905092915050565b6000611c3c82611377565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611c6f57611c6e611ae9565b5b600182019050919050565b7f696e76616c6964206d73672e76616c7565000000000000000000000000000000600082015250565b6000611cb0601183611926565b9150611cbb82611c7a565b602082019050919050565b60006020820190508181036000830152611cdf81611ca3565b9050919050565b6000611cf9611cf484611134565b611119565b905082815260208101848484011115611d1557611d146110a3565b5b611d2084828561161d565b509392505050565b600082601f830112611d3d57611d3c61109e565b5b8151611d4d848260208601611ce6565b91505092915050565b600081519050611d65816111f6565b92915050565b600060e08284031215611d8157611d806114a6565b5b611d8b60e0611119565b9050600082015167ffffffffffffffff811115611dab57611daa6114ab565b5b611db784828501611d28565b6000830152506020611dcb84828501611d56565b6020830152506040611ddf84828501611d56565b6040830152506060611df384828501611a3b565b6060830152506080611e0784828501611a3b565b60808301525060a0611e1b848285016118e4565b60a08301525060c0611e2f848285016118e4565b60c08301525092915050565b600060208284031215611e5157611e50611094565b5b600082015167ffffffffffffffff811115611e6f57611e6e611099565b5b611e7b84828501611d6b565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611ee0602683611926565b9150611eeb82611e84565b604082019050919050565b60006020820190508181036000830152611f0f81611ed3565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611f4c602083611926565b9150611f5782611f16565b602082019050919050565b60006020820190508181036000830152611f7b81611f3f565b9050919050565b600081905092915050565b6000611f9882611601565b611fa28185611f82565b9350611fb281856020860161161d565b80840191505092915050565b6000611fca8284611f8d565b915081905092915050565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b600061200b600383611926565b915061201682611fd5565b602082019050919050565b6000602082019050818103600083015261203a81611ffe565b9050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b6000612077600283611926565b915061208282612041565b602082019050919050565b600060208201905081810360008301526120a68161206a565b905091905056fea2646970667358221220b4d26e7f953e4fe3319a39fddc31379eb5df079f137da23b1b1ffe5b5145fb4964736f6c63430008090033",
  "devdoc": {
    "author": "0nika0",
    "details": "A smart contract for executing token swaps and managing roles for traders.  This contract allows users with the TRADER_ROLE to perform token swaps and enforces checks on the validity of swaps.",
    "kind": "dev",
    "methods": {
      "calculateMsgValue(bytes)": {
        "details": "See {IExchanger-calculateMsgValue}."
      },
      "checkMsgValue(bytes[],uint256)": {
        "details": "See {IExchanger-checkMsgValue}."
      },
      "decodeFromExchange(bytes)": {
        "details": "See {IExchanger-decodeFromExchange}."
      },
      "encodeFromExchange((bytes,address,address,uint256,uint256,bool,bool))": {
        "details": "See {IExchanger-encodeFromExchange}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "swap(bytes,address,address)": {
        "details": "See {IExchanger-swap}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Exchanger",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/exchanger/Exchanger.sol:Exchanger",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3222,
        "contract": "contracts/exchanger/Exchanger.sol:Exchanger",
        "label": "swapRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISwapRouter)2563"
      },
      {
        "astId": 3225,
        "contract": "contracts/exchanger/Exchanger.sol:Exchanger",
        "label": "roleManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(RoleManager)2941"
      },
      {
        "astId": 3228,
        "contract": "contracts/exchanger/Exchanger.sol:Exchanger",
        "label": "weth9",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IWETH9)3639"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapRouter)2563": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH9)3639": {
        "encoding": "inplace",
        "label": "contract IWETH9",
        "numberOfBytes": "20"
      },
      "t_contract(RoleManager)2941": {
        "encoding": "inplace",
        "label": "contract RoleManager",
        "numberOfBytes": "20"
      }
    }
  }
}